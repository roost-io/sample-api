# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=68c053e0a8
# 
# 

# ********RoostGPT********
Feature: Add a new pet to the store

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Add a new pet with valid inputs
    Given path 'pet'
    And request
      """
      {
        "id": <id>,
        "name": <name>,
        "category": {
          "id": <categoryId>,
          "name": <categoryName>
        },
        "photoUrls": <photoUrls>,
        "tags": <tags>,
        "status": <status>
      }
      """
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.name == '#string'
    And match response.category.id == '#number'
    And match response.category.name == '#string'
    And match response.photoUrls == '#[]string'
    And match each response.tags[*].id == '#number'
    And match each response.tags[*].name == '#string'
    And match response.status == '#string'

    Examples:
      | read('pet_post.csv') |

  Scenario: Invalid input returns 400 error
    Given path 'pet'
    And request
      """
      {
        "id": null,
        "name": null,
        "photoUrls": []
      }
      """
    When method POST
    Then status 400

  Scenario: Validation exception returns 422 error
    Given path 'pet'
    And request
      """
      {
        "id": 0,
        "name": "",
        "photoUrls": []
      }
      """
    When method POST
    Then status 422

  Scenario: Unexpected error returns non-200 status code
    Given path 'pet'
    And request
      """
      {
        "id": -1,
        "name": "unexpected_pet",
        "photoUrls": ["invalid_url"]
      }
      """
    When method POST
    Then assert responseStatus != 200
    And match response.error.code == '#number'
    And match response.error.message == '#string'
