# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/{petId}_post for http method type POST 
# RoostTestHash=30359d59f9
# 
# 

# ********RoostGPT********
Feature: Update Pet in the Store with Form Data

  Background:
    """
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Accept: 'application/json', Authorization: '#(authToken)' }
    """

  Scenario Outline: Update Pet with valid details
    Given path 'pet' + '/' + <petId>
    And param name = <name>
    And param status = <status>
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.name == '#string'
    And match response.category.id == '#number'
    And match response.category.name == '#string'
    And match response.photoUrls == '#[]string'
    And match each response.tags[*].id == '#number'
    And match each response.tags[*].name == '#string'
    And match response.status == '#string'

    Examples:
      | petId | name       | status       |
      | 1     | ['doggie'] | ['available'] |
      | 2     | ['kitty']  | ['pending']   |
      | 3     | ['hamster']| ['sold']      |

  Scenario: Update Pet without optional parameters
    Given path 'pet' + '/' + 1
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.name == '#string'
    And match response.category.id == '#number'
    And match response.category.name == '#string'
    And match response.photoUrls == '#[]string'
    And match each response.tags[*].id == '#number'
    And match each response.tags[*].name == '#string'
    And match response.status == '#string'

  Scenario Outline: Attempt Update with invalid petId
    Given path 'pet' + '/' + <petId>
    And param name = <name>
    And param status = <status>
    When method POST
    Then status != 200
    And match response.error.message == '#string'
    And match response.error.code == '#number'

    Examples:
      | petId | name       | status       |
      | 'abc' | ['doggie'] | ['available'] |
      | -1    | ['kitty']  | ['pending']   |

  Scenario: Attempt Update with missing petId
    Given path 'pet'
    And param name = 'doggie'
    And param status = 'available'
    When method POST
    Then status 400

  Scenario Outline: Validate response payload and headers for default error
    Given path 'pet' + '/' + <petId>
    And param name = <name>
    And param status = <status>
    When method POST
    Then assert karate.match(responseStatus >= 400)
    And assert karate.match(response.headers != null)
    And match karate.sizeOf(response) >= 1

    Examples:
      | petId | name       | status       |
      | -1    | ['doggie'] | ['available'] |
      | 0     | ['error']  | ['pending']   |
