# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/findByStatus_get for http method type GET 
# RoostTestHash=946f2905a0
# 
# 

# ********RoostGPT********
Feature: Find Pets by Status API

  Background:
    """
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = 'Bearer ' + karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }
    """

  Scenario Outline: Fetch pets using valid status
    Given path 'pet/findByStatus'
    And param status = <status>
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].name == '##string'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '##string'
    And match each response[*].tags == '#[]'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == "available" || _ == "pending" || _ == "sold"'

    Examples:
      | status       |
      | ['available'] |
      | ['pending']   |
      | ['sold']      |

  Scenario Outline: Fetch pets using invalid status
    Given path 'pet/findByStatus'
    And param status = <status>
    When method GET
    Then status != 200
    And match response == '#null'

    Examples:
      | status          |
      | ['notValid']     |
      | ['undefined']    |

  Scenario: Fetch pets with missing status parameter
    Given path 'pet/findByStatus'
    When method GET
    Then status 200
    And match response == '#[]'

  Scenario: Invalid request without authorization
    """
    * configure headers = { Accept: 'application/json' }
    """
    Given path 'pet/findByStatus'
    When method GET
    Then status != 200
    And match response == '#null'

  Scenario: Unexpected error handling
    """
    * def unexpectedParam = 'unexpectedValue'
    """
    Given path 'pet/findByStatus'
    And param status = unexpectedParam
    When method GET
    Then status != 200
    And match response == '#null'
