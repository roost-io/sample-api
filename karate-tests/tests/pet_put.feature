# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet_put for http method type PUT 
# RoostTestHash=42edb35103
# 
# 

# ********RoostGPT********
Feature: Update an existing pet by Id

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Update pet details with valid input
    Given path '/pet'
    When method PUT
    And request
      """
      {
        "id": <id>,
        "name": <name>,
        "category": {
          "id": <category_id>,
          "name": <category_name>
        },
        "photoUrls": <photoUrls>,
        "tags": <tags>,
        "status": <status>
      }
      """
    Then status 200
    And match response.id == '#number'
    And match response.name == '#string'
    And match response.category.id == '#number'
    And match response.category.name == '#string'
    And match response.photoUrls == '#[] string'
    And match each response.tags[*].id == '#number'
    And match each response.tags[*].name == '#string'
    And match response.status == '#string'

    Examples:
      | read('pet_put.csv') |

  Scenario: Update pet with missing name or photoUrls
    Given path '/pet'
    When method PUT
    And request
      """
      {
        "id": 30,
        "category": {
          "id": 3,
          "name": "Birds"
        },
        "status": "pending"
      }
      """
    Then status 422
    And match response.error.message == '#string'

  Scenario: Invalid ID supplied
    Given path '/pet'
    When method PUT
    And request
      """
      {
        "id": -1,
        "name": "doggie",
        "photoUrls": ["url1", "url2"]
      }
      """
    Then status 400
    And match response.error.message == '#string'

  Scenario: Pet not found
    Given path '/pet'
    When method PUT
    And request
      """
      {
        "id": 99999,
        "name": "unknown",
        "photoUrls": ["url"]
      }
      """
    Then status 404
    And match response.error.message == '#string'

  Scenario: Unexpected error with incomplete data
    Given path '/pet'
    When method PUT
    And request
      """
      {
        "id": 40
      }
      """
    Then assert responseStatus != 200
    And match response.error.message == '#string'
