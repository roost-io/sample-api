# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /user_post for http method type POST 
# RoostTestHash=701b5cbba5
# 
# 

# ********RoostGPT********
Feature: Tests for User Endpoint - Create User

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * header Accept = 'application/json'
    * header Authorization = '{{$processEnvironment.AUTH_TOKEN}}'

  Scenario Outline: Create user with valid payload
    Given path 'user'
    And request
      """
      {
        "id": <id>,
        "username": "<username>",
        "firstName": "<firstName>",
        "lastName": "<lastName>",
        "email": "<email>",
        "password": "<password>",
        "phone": "<phone>",
        "userStatus": <userStatus>
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.username == '#string'
    And match response.firstName == '#string'
    And match response.lastName == '#string'
    And match response.email == '#string'
    And match response.password == '#string'
    And match response.phone == '#string'
    And match response.userStatus == '#number'

    Examples:
      | read('user_post.csv') |

  Scenario Outline: Create user with missing optional properties
    Given path 'user'
    And request
      """
      {
        "id": <id>,
        "username": "<username>"
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.username == '#string'
    And match response.firstName == '#? _ == null || typeof _ == "string"'
    And match response.lastName == '#? _ == null || typeof _ == "string"'
    And match response.email == '#? _ == null || typeof _ == "string"'
    And match response.password == '#? _ == null || typeof _ == "string"'
    And match response.phone == '#? _ == null || typeof _ == "string"'
    And match response.userStatus == '#? _ == null || typeof _ == "number"'

    Examples:
      | read('user_post.csv') |

  Scenario: Attempt to create user without required fields
    Given path 'user'
    And request
      """
      {
      }
      """
    When method POST
    Then assert responseStatus != 200
    And match response.error.code == '#number'
    And match response.error.message == '#string'

  Scenario Outline: Test handling invalid data types in payload
    Given path 'user'
    And request
      """
      {
        "id": "<id>",
        "username": "<username>",
        "firstName": "<firstName>",
        "lastName": "<lastName>",
        "email": "<email>",
        "password": "<password>",
        "phone": "<phone>",
        "userStatus": "<userStatus>"
      }
      """
    When method POST
    Then assert responseStatus != 200
    And match response.error.code == '#number'
    And match response.error.message == '#string'

    Examples:
      | id       | username | firstName | lastName | email           | password | phone           | userStatus |
      | 'string' | 'valid'  | 'valid'   | 'valid'  | 'invalidEmail'  | 'valid'  | ['1', '2', '3'] | 'string'   |
      |       10 | 'valid'  | 'valid'   | 'valid'  | ['1', '2', '3'] | '12345'  | 'invalid'       | 'invalid'  |

  Scenario Outline: Verify unexpected status codes
    Given path 'user'
    And request
      """
      {
        "id": 10,
        "username": "theUser"
      }
      """
    When method POST
    Then assert responseStatus != <expectedStatus>

    Examples:
      | expectedStatus |
      |            400 |
      |            401 |
      |            403 |
      |            500 |
