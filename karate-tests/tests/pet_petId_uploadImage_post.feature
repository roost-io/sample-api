# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-xcally using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/{petId}/uploadImage_post for http method type POST 
# RoostTestHash=b2ab25b329
# 
# 

# ********RoostGPT********
Feature: Upload Pet Image API Tests - /pet/{petId}/uploadImage

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Upload an image for a pet with valid inputs
    Given path 'pet', <petId>, 'uploadImage'
    And request """<file>"""
    And param additionalMetadata = <additionalMetadata>
    When method POST
    Then status 200
    And match response.code == '#number'
    And match response.type == '#string'
    And match response.message == '#string'

    Examples:
      | petId  | file                                      | additionalMetadata      |
      | 123456 | sample_binary_data_contents_here          | 'Sample metadata'       |
      | 789001 | another_binary_data_contents_here         | 'Additional metadata'   |

  Scenario: Upload image without providing file
    Given path 'pet', 123456, 'uploadImage'
    And param additionalMetadata = 'Metadata without file'
    When method POST
    Then status 400
    And match karate.get('responseStatus') != 200

  Scenario: Attempt upload for pet not found
    Given path 'pet', 999999, 'uploadImage'
    And request """
    sample_binary_data_contents_here
    """
    When method POST
    Then status 404
    And match karate.get('responseStatus') != 200

  Scenario: Handle unexpected error scenario during upload
    Given path 'pet', 123456, 'uploadImage'
    And request """
    corrupted_binary_data_contents_here
    """
    When method POST
    Then status != 200
    And match response.error.code == '#number'
    And match response.error.message == '#string'
