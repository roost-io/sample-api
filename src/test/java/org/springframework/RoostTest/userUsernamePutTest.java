// ********RoostGPT********
/*
Test generated by RoostGPT for test sample-api-petstore-rest-assured-test using AI Type Open AI and AI Model gpt-4

Test generated for /user/{username}_put for http method type PUT in rest-assured framework

RoostTestHash=452b32566e


*/

// ********RoostGPT********
package org.springframework.RoostTest;
io.restassured.RestAssured
io.restassured.path.json.JsonPath
io.restassured.http.ContentType
io.restassured.response.Response
org.junit.jupiter.api.BeforeEach
org.junit.jupiter.api.Test
io.restassured.RestAssured.given
org.hamcrest.MatcherAssert
org.hamcrest.Matchers.*
org.slf4j.Logger
org.slf4j.LoggerFactory
org.json.JSONObject
org.json.XML
org.json.JSONException
org.json.JSONArray

public class userUsernamePutTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {"username"};
      envList = dataloader.load("src\\test\\java\\org\\springframework\\RoostTest\\user_usernamePutTest.csv", envVarsList);
    }

  
    @Test  
    public void userUsernamePut_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "https://petstore.swagger.io/v2";  
          JSONObject requestBodyObject = new JSONObject();
          if(testData.get("RequestBody") != null){
              requestBodyObject = new JSONObject(testData.get("RequestBody"));
          }
                Response responseObj = given()
				.header("body", testData.get("body") != null ? testData.get("body") : "")
				.pathParam("username", testData.get("username") != null ? testData.get("username") : "")
                .when()
                .put("/user/{username}")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: userUsernamePut_Test \n", testNumber++);
              System.out.println("Request: PUT /user/{username}");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                String statusCodeFromCSV = testData.get("statusCode");
                if (statusCodeFromCSV.contains("X")) {
                  MatcherAssert.assertThat(
                      "Expected a status code of category " + statusCodeFromCSV + ", but got "
                          + Integer.toString(responseObj.statusCode()) + " instead",
                      Integer.toString(responseObj.statusCode()).charAt(0), equalTo(statusCodeFromCSV.charAt(0)));
                } else {
                  MatcherAssert.assertThat(
                      Integer.toString(responseObj.statusCode()), equalTo(statusCodeFromCSV));
                }
              } 
              				else {  
      List<Integer> expectedStatusCodes = Arrays.asList(400,404);
				MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
          }
				String stringifiedStatusCode = Integer.toString(responseObj.statusCode());
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if(stringifiedStatusCode.equals("400")){					System.out.println("Description: Invalid user supplied");
				}
if(stringifiedStatusCode.equals("404")){					System.out.println("Description: User not found");
				}


            }  
    }
}
