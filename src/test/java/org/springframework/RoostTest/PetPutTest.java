// ********RoostGPT********
/*
Test generated by RoostGPT for test amanRestAssured_clone using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /pet_put for http method type PUT in rest-assured framework

RoostTestHash=de1a215a32

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test a valid request with full body including name, photoUrls, category, tags, and status",
    "Execution": {
      "Arrange": "Prepare a valid 'PUT' request body with name='doggie', photoUrls=['url1', 'url2'], category={id: 1, name: 'Dogs'}, tags=[{id: 1, name: 'Friendly'}], status='available' and valid auth token",
      "Act": "Send PUT request to /pet with the prepared body and correct headers",
      "Assert": "Check for 200 status and response matches the input fields"
    },
    "Validation": "Ensures that the API successfully processes a valid request and returns the updated pet object"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingRequiredFieldsReturns422",
    "Description": "Test missing required fields in the request body",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body missing 'name' and 'photoUrls' while including other fields like category and status as valid",
      "Act": "Send PUT request to /pet with the prepared body and valid auth token",
      "Assert": "Check for 422 status and validation exception in response"
    },
    "Validation": "Validates API rejects requests with missing required fields"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidIDReturns400",
    "Description": "Test invalid 'id' in the request body",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with invalid 'id' value (e.g., string instead of integer) along with valid 'name' and 'photoUrls'",
      "Act": "Send PUT request to /pet with the prepared body and correct headers",
      "Assert": "Check for 400 status and appropriate error message in response"
    },
    "Validation": "Ensures API validates the data type of 'id' field"
  },
  {
    "ScenarioID": "4",
    "TestName": "testNullValuesForOptionalFieldsReturns200",
    "Description": "Test sending null values for optional fields",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with 'category' and 'tags' set to null and valid 'id', 'name', 'photoUrls', and 'status'",
      "Act": "Send PUT request to /pet with the prepared body and valid auth token",
      "Assert": "Check for 200 status and updated pet object has null values for category and tags"
    },
    "Validation": "Ensures API handles null values for optional fields correctly"
  },
  {
    "ScenarioID": "5",
    "TestName": "testEnumMismatchForStatusReturns422",
    "Description": "Test sending an invalid enum value for 'status' field",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with 'status' set to an invalid value (like 'unknown') and other fields as valid",
      "Act": "Send PUT request to /pet with the prepared body and valid auth token",
      "Assert": "Check for 422 status and validation exception in response"
    },
    "Validation": "Ensures API rejects values not matching the defined enum for 'status'"
  },
  {
    "ScenarioID": "6",
    "TestName": "testMissingAuthorizationTokenReturns403",
    "Description": "Test sending request without an authorization token",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with all valid fields but without providing an authorization token",
      "Act": "Send PUT request to /pet without the auth token",
      "Assert": "Check for 403 status and authorization error in response"
    },
    "Validation": "Ensures API enforces token-based authentication for secure access"
  },
  {
    "ScenarioID": "7",
    "TestName": "testInvalidAuthorizationTokenReturns403",
    "Description": "Test sending request with an invalid or expired authorization token",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with valid fields and attach an invalid auth token to the request headers",
      "Act": "Send PUT request to /pet with invalid token",
      "Assert": "Check for 403 status and authorization error in response"
    },
    "Validation": "Ensures API rejects requests with invalid or expired tokens"
  },
  {
    "ScenarioID": "8",
    "TestName": "testMalformedJSONBodyReturns400",
    "Description": "Test sending a malformed JSON body",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with improperly formatted JSON, such as missing brackets or quotes",
      "Act": "Send PUT request to /pet with the malformed body",
      "Assert": "Check for 400 status and error message about malformed request"
    },
    "Validation": "Ensures API handles malformed JSON requests gracefully"
  },
  {
    "ScenarioID": "9",
    "TestName": "testEmptyPhotoUrlsArrayReturns200",
    "Description": "Test sending a valid request with an empty 'photoUrls' array",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with valid 'id', 'name', 'category', 'status' but an empty photoUrls array",
      "Act": "Send PUT request to /pet with the prepared body and valid auth token",
      "Assert": "Check for 200 status and response object includes an empty photoUrls array"
    },
    "Validation": "Ensures API correctly handles empty arrays for 'photoUrls' field"
  },
  {
    "ScenarioID": "10",
    "TestName": "testNonArrayPhotoUrlsThrowsValidationError",
    "Description": "Test sending non-array value for `photoUrls` field",
    "Execution": {
      "Arrange": "Prepare a 'PUT' request body with 'photoUrls' set to a string instead of an array along with valid other fields",
      "Act": "Send PUT request to /pet with the prepared body and valid auth token",
      "Assert": "Check for 422 status and validation error in response"
    },
    "Validation": "Ensures API enforces array type for 'photoUrls' field"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class PetPutTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/petPutTest.JSON");
    }


    @Test
    public void PetPut_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://petstore3.swagger.io/api/v3/";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/pet";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "/var/tmp/Roost/RoostGPT/amanRestAssured_clone/b92e6768-fa4a-4379-aa8a-a19675f4641f/petstore-v3.json";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("put".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "put");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: PetPut_Test\n", testNumber++);
            System.out.println("Request: PUT " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
