// ********RoostGPT********
/*
Test generated by RoostGPT for test sample_demo_api using AI Type Open AI and AI Model gpt-4

Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework

RoostTestHash=3c88a89bc5


*/

// ********RoostGPT********
package org.springframework.RoostTest;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class NobelPrizeCategoryYearGetTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestDataLoader dataLoader = new TestDataLoader();
        String[] envVarsList = {"category", "year"};
        envList = dataLoader.load("src/test/java/org/springframework/RoostTest/nobelPrize_category_yearGetTest.csv", envVarsList);
    }

    @Test
    public void nobelPrizeCategoryYearGet_Test() {
        this.setUp();
        int testNumber = 1;
        for (Map<String, String> testData : envList) {
            String baseUrl = Optional.ofNullable(testData.get("BASE_URL")).filter(s -> !s.isEmpty()).orElse("http://api.nobelprize.org/2.1");
            RestAssured.baseURI = baseUrl;

            Response responseObj = given()
                    .pathParam("category", Optional.ofNullable(testData.get("category")).orElse(""))
                    .pathParam("year", Optional.ofNullable(testData.get("year")).orElse(""))
                    .when()
                    .get("/nobelPrize/{category}/{year}")
                    .then()
                    .extract().response();

            JsonPath response = responseObj.jsonPath();
            String contentType = responseObj.getContentType();

            System.out.printf("Test Case %d: nobelPrizeCategoryYearGet_Test \n", testNumber++);
            System.out.println("Request: GET /nobelPrize/{category}/{year}");
            System.out.println("Status Code: " + responseObj.statusCode());

            validateResponseStatusCode(testData, responseObj);
            validateResponseContentType(contentType, responseObj, response);

            evaluateResponseBasedOnStatusCode(responseObj, response);
        }
    }

    private void validateResponseStatusCode(Map<String, String> testData, Response responseObj) {
        if (testData.get("statusCode") != null) {
            String statusCodeFromCSV = testData.get("statusCode");
            if (statusCodeFromCSV.contains("X")) {
                assertThat(
                        "Expected a status code of category " + statusCodeFromCSV + ", but got "
                                + responseObj.statusCode() + " instead",
                        Integer.toString(responseObj.statusCode()).charAt(0), equalTo(statusCodeFromCSV.charAt(0)));
            } else {
                assertThat(responseObj.statusCode(), equalTo(Integer.parseInt(statusCodeFromCSV)));
            }
        } else {
            List<Integer> expectedStatusCodes = Arrays.asList(200, 400, 404, 422);
            assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
        }
    }

    private void validateResponseContentType(String contentType, Response responseObj, JsonPath response) {
        if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
            // Process XML response
        } else if (!contentType.contains("application/json")) {
            System.out.println("Response content type found: " + contentType + ", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
        }
    }

    private void evaluateResponseBasedOnStatusCode(Response responseObj, JsonPath response) {
        int statusCode = responseObj.statusCode();
        switch (statusCode) {
            case 200:
                // Validate successful response
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
        }
    }

    private void validateErrorResponse(JsonPath response) {
        assertThat(response.get("code"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
    }

    private void validateNotFoundResponse(JsonPath response) {
        assertThat(response.get("code"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
    }

    private void validateUnprocessableEntityResponse(JsonPath response) {
        assertThat(response.get("code"), instanceOf(String.class));
        assertThat(response.get("message"), instanceOf(String.class));
    }
}
