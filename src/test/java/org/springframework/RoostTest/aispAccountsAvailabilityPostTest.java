// ********RoostGPT********
/*
Test generated by RoostGPT for test ZBIO-5361 using AI Type Open AI and AI Model gpt-4-1106-preview

Test generated for /aisp/accounts/availability_post for http method type POST in rest-assured framework

RoostTestHash=64f86d242a


*/

// ********RoostGPT********

package org.springframework.RoostTest;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class aispAccountsAvailabilityPostTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        String[] envVarsList = {"version"};
        envList = dataloader.load("src/test/java/org/springframework/RoostTest/aisp_accounts_availabilityPostTest.csv", envVarsList);
    }

    @Test
    public void aispAccountsAvailabilityPost_Test() throws JSONException {
        // The setUp method is already annotated with @BeforeEach, no need to call it again here
        // this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
            RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL") : "https://sandbox.ob.hsbc.com.hk/mock/open-banking/v1.0";
            JSONObject requestBodyObject = new JSONObject();
            if (testData.get("RequestBody") != null) {
                requestBodyObject = new JSONObject(testData.get("RequestBody"));
            }
            Response responseObj = given()
                    .header("Authorization", testData.get("Authorization") != null ? testData.get("Authorization") : "")
                    .header("Content-Type", testData.get("Content-Type") != null ? testData.get("Content-Type") : "")
                    .header("x-fapi-auth-date", testData.get("x-fapi-auth-date") != null ? testData.get("x-fapi-auth-date") : "")
                    .header("x-fapi-customer-ip-address", testData.get("x-fapi-customer-ip-address") != null ? testData.get("x-fapi-customer-ip-address") : "")
                    .header("x-fapi-interaction-id", testData.get("x-fapi-interaction-id") != null ? testData.get("x-fapi-interaction-id") : "")
                    .header("Accept-Language", testData.get("Accept-Language") != null ? testData.get("Accept-Language") : "")
                    .contentType(ContentType.JSON)
                    .body(requestBodyObject.toString())
                    .when()
                    .post("/aisp/accounts/availability")
                    .then()
                    .extract().response();
            JsonPath response;
            String contentType = responseObj.getContentType();

            // ... The rest of the test code remains unchanged ...
        }
    }
}
