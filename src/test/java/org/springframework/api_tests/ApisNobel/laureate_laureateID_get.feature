# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Test Laureate API

  Background:
    * def urlBase = karate.properties['url_base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Get Laureate Information by ID
    Given path '2.1/laureate/<laureateID>'
    When method GET
    Then status 200
    And match response.laureate.id == '#number'
    And match response.laureate.laureateIfPerson.knownName.en == '#string'
    And match response.laureate.laureateIfPerson.gender == '#string'
    And match response.laureate.laureateIfPerson.birth.date == '#string'
    And match response.laureate.laureateIfPerson.birth.place.city.en == '#string'
    And match response.laureate.laureateIfPerson.death.date == '#string'
    And match response.laureate.laureateIfPerson.death.place.city.en == '#string'
    And match response.laureate.laureateIfOrg.orgName.en == '#string'
    And match response.laureate.laureateIfOrg.founded.date == '#string'
    And match response.laureate.nobelPrizes[*].awardYear == '#number'
    And match response.laureate.nobelPrizes[*].category.en == '#string'
    And match response.laureate.nobelPrizes[*].prizeAmount == '#number'
    And match response.laureate.nobelPrizes[*].affiliations[*].name.en == '#string'

    Examples:
      | read('laureate_laureateID_get.csv') |

  Scenario Outline: Invalid Laureate ID
    Given path '2.1/laureate/<laureateID>'
    When method GET
    Then status <status>
    And match response.code == <status>
    And match response.message == '#string'

    Examples:
      | laureateID | status |
      |         -1 |    400 |
      |     999999 |    404 |
      | abc        |    422 |
