# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Azure Open AI and AI Model Inference
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=4d779ed43d
# 
# 

# ********RoostGPT********
Feature: Laureate API

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario Outline: Test GET /2.1/laureate/<laureateID> with valid laureateID
    Given path '/2.1/laureate', <laureateID>
    When method get
    Then status 200
    And match response == { laureateID: '#number', name: '#string', birth: '#object', death: '#object', gender: '#string', bornCountry: '#string', bornCountryCode: '#string', bornCity: '#string', diedCountry: '#string', diedCountryCode: '#string', diedCity: '#string', prize: '#array' }
    And match response.laureateID == <laureateID>

    Examples:
      | read('laureate_laureateID_get.csv') |

  Scenario Outline: Test GET /2.1/laureate/<laureateID> with invalid laureateID
    Given path '/2.1/laureate', <laureateID>
    When method get
    Then status 400
    And match response == { code: '#string', message: '#string' }

    Examples:
      | laureateID |
      |          0 |

  Scenario: Test GET /2.1/laureate/<laureateID> with non-existent laureateID
    Given path '/2.1/laureate', 999999999
    When method get
    Then status 404
    And match response == { code: '#string', message: '#string' }

  Scenario: Test GET /2.1/laureate/<laureateID> with missing laureateID
    Given path '/2.1/laureate'
    When method get
    Then status 422
    And match response == { code: '#string', message: '#string' }
