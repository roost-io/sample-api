
// ********RoostGPT********
/*

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

roost_feedback [02/07/2025, 9:48:05 AM]:-\sAdd\smore\scomments\sto\sthe\stest
*/

// ********RoostGPT********

Feature: Nobel Prize Laureates API Testing

Background:
  # Set up base URL from system properties or default to localhost
  * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
  * url urlBase

Scenario: Get all laureates with default parameters
  # Test the basic GET request to retrieve all laureates
  Given path '/2.1/laureates'
  When method GET
  Then status 200
  # Verify the main response structure contains required top-level objects
  And match response == { laureates: '#array', meta: '#object', links: '#array' }
  And match response.laureates == '#[]'
  # Validate each laureate object has the expected structure
  And match each response.laureates ==
    """
    {
      id: '#number',
      laureateIfPerson: '##object',
      laureateIfOrg: '##object',
      wikipedia: '##object',
      wikidata: '##object',
      sameAs: '##array',
      links: '##array',
      nobelPrizes: '#array'
    }
    """
  # Validate the meta object contains all possible query parameters and metadata
  And match response.meta ==
    """
    {
      offset: '##number',
      limit: '##number',
      sort: '##string',
      ID: '##number',
      name: '##string',
      gender: '##string',
      motivation: '##string',
      affiliation: '##string',
      residence: '##string',
      birthDate: '##string',
      birthDateTo: '##string',
      deathDate: '##string',
      deathDateTo: '##string',
      foundedDate: '##string',
      birthCity: '##string',
      birthCountry: '##string',
      birthContinent: '##string',
      deathCity: '##string',
      deathCountry: '##string',
      deathContinent: '##string',
      foundedCity: '##string',
      foundedCountry: '##string',
      foundedContinent: '##string',
      headquartersCity: '##string',
      headquartersCountry: '##string',
      headquartersContinent: '##string',
      nobelPrizeYear: '##number',
      yearTo: '##number',
      nobelPrizeCategory: '##string',
      count: '##number'
    }
    """

Scenario Outline: Get laureates with pagination parameters
  # Test pagination functionality with different offset and limit values
  Given path '/2.1/laureates'
  And param offset = <offset>
  And param limit = <limit>
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm pagination parameters are reflected in the response metadata
  And match response.meta.offset == <offset>
  And match response.meta.limit == <limit>

  Examples:
    | read('laureates_get.csv') |

Scenario Outline: Get laureates with sort parameter
  # Test sorting functionality with different sort criteria
  Given path '/2.1/laureates'
  And param sort = '<sort>'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm sort parameter is reflected in the response metadata
  And match response.meta.sort == '<sort>'

  Examples:
    | read('laureates_get.csv') |

Scenario: Get laureate by ID
  # Test retrieving a specific laureate by their unique ID
  Given path '/2.1/laureates'
  And param ID = 456
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm the returned laureate has the correct ID
  And match response.laureates[0].id == 456

Scenario Outline: Get laureates by gender
  # Test filtering laureates by gender (male/female)
  Given path '/2.1/laureates'
  And param gender = '<gender>'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm gender filter is reflected in the response metadata
  And match response.meta.gender == '<gender>'

  Examples:
    | read('laureates_get.csv') |

Scenario: Get laureates by name
  # Test searching for laureates by name (partial match)
  Given path '/2.1/laureates'
  And param name = 'Einstein'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm name search parameter is reflected in the response metadata
  And match response.meta.name == 'Einstein'

Scenario: Get laureates by motivation
  # Test filtering laureates by their Nobel Prize motivation/field
  Given path '/2.1/laureates'
  And param motivation = 'physics'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm motivation filter is reflected in the response metadata
  And match response.meta.motivation == 'physics'

Scenario: Get laureates by affiliation
  # Test filtering laureates by their institutional affiliation
  Given path '/2.1/laureates'
  And param affiliation = 'University'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm affiliation filter is reflected in the response metadata
  And match response.meta.affiliation == 'University'

Scenario: Get laureates by residence
  # Test filtering laureates by their place of residence
  Given path '/2.1/laureates'
  And param residence = 'Stockholm'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm residence filter is reflected in the response metadata
  And match response.meta.residence == 'Stockholm'

Scenario Outline: Get laureates by birth date
  # Test filtering laureates by their birth date
  Given path '/2.1/laureates'
  And param birthDate = '<birthDate>'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm birth date filter is reflected in the response metadata
  And match response.meta.birthDate == '<birthDate>'

  Examples:
    | read('laureates_get.csv') |

Scenario: Get laureates by birth date range
  # Test filtering laureates by a range of birth dates
  Given path '/2.1/laureates'
  And param birthDate = '1870'
  And param birthDateTo = '1880'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm both birth date range parameters are reflected in the response metadata
  And match response.meta.birthDate == '1870'
  And match response.meta.birthDateTo == '1880'

Scenario Outline: Get laureates by birth continent
  # Test filtering laureates by their continent of birth
  Given path '/2.1/laureates'
  And param birthContinent = '<continent>'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm birth continent filter is reflected in the response metadata
  And match response.meta.birthContinent == '<continent>'

  Examples:
    | read('laureates_get.csv') |

Scenario Outline: Get laureates by Nobel Prize category
  # Test filtering laureates by Nobel Prize category (physics, chemistry, etc.)
  Given path '/2.1/laureates'
  And param nobelPrizeCategory = '<category>'
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm Nobel Prize category filter is reflected in the response metadata
  And match response.meta.nobelPrizeCategory == '<category>'

  Examples:
    | read('laureates_get.csv') |

Scenario: Get laureates by Nobel Prize year
  # Test filtering laureates by the year they won their Nobel Prize
  Given path '/2.1/laureates'
  And param nobelPrizeYear = 2020
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm Nobel Prize year filter is reflected in the response metadata
  And match response.meta.nobelPrizeYear == 2020

Scenario: Get laureates by Nobel Prize year range
  # Test filtering laureates by a range of Nobel Prize years
  Given path '/2.1/laureates'
  And param nobelPrizeYear = 2010
  And param yearTo = 2020
  When method GET
  Then status 200
  # Verify response contains laureates array
  And match response.laureates == '#array'
  # Confirm both Nobel Prize year range parameters are reflected in the response metadata
  And match response.meta.nobelPrizeYear == 2010
  And match response.meta.yearTo == 2020

Scenario Outline: Get laureates with different output formats
  # Test different output formats (JSON, CSV, etc.)
  Given path '/2.1/laureates'
  And param format = '<format>'
  When method GET
  Then status 200

  Examples:
    | read('laureates_get.csv') |

Scenario Outline: Get laureates with CSV language parameter
  # Test CSV output with different language settings
  Given path '/2.1/laureates'
  And param format = 'csv'
  And param csvLang = '<csvLang>'
  When method GET
  Then status 200

  Examples:
    | read('laureates_get.csv') |

Scenario: Validate detailed laureate person structure
  # Test the detailed structure of a person laureate object
  Given path '/2.1/laureates'
  And param ID = 456
  When method GET
  Then status 200
  # Validate the complete structure of laureateIfPerson object
  And match response.laureates[0].laureateIfPerson ==
    """
    {
      knownName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      givenName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      familyName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      fullName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      filename: '##string',
      penname: '##string',
      gender: '#regex (female|male)',
      birth: {
        date: '##string',
        place: {
          city: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          country: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          cityNow: {
            en: '##string',
            se: '##string',
            false: '##string',
            sameAs: '##array'
          },
          countryNow: {
            en: '##string',
            se: '##string',
            false: '##string',
            sameAs: '##array'
          },
          continent: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          locationString: {
            en: '##string',
            se: '##string',
            false: '##string'
          }
        }
      },
      death: '##object'
    }
    """

Scenario: Validate detailed laureate organization structure
  # Test the detailed structure of an organization laureate object
  Given path '/2.1/laureates'
  And param nobelPrizeCategory = 'pea'
  When method GET
  Then status 200
  # Validate the complete structure of laureateIfOrg object for peace prize organizations
  And match response.laureates[*].laureateIfOrg contains
    """
    {
      orgName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      nativeName: '##string',
      acronym: '##string',
      founded: {
        date: '##string',
        place: {
          city: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          country: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          cityNow: {
            en: '##string',
            se: '##string',
            false: '##string',
            sameAs: '##array'
          },
          countryNow: {
            en: '##string',
            se: '##string',
            false: '##string',
            sameAs: '##array'
          },
          continent: {
            en: '##string',
            se: '##string',
            false: '##string'
          },
          locationString: {
            en: '##string',
            se: '##string',
            false: '##string'
          }
        }
      },
      dissolution: '##object',
      headquarters: {
        city: {
          en: '##string',
          se: '##string',
          false: '##string'
        },
        country: {
          en: '##string',
          se: '##string',
          false: '##string'
        },
        cityNow: {
          en: '##string',
          se: '##string',
          false: '##string',
          sameAs: '##array'
        },
        countryNow: {
          en: '##string',
          se: '##string',
          false: '##string',
          sameAs: '##array'
        },
        continent: {
          en: '##string',
          se: '##string',
          false: '##string'
        },
        locationString: {
          en: '##string',
          se: '##string',
          false: '##string'
        }
      }
    }
    """

Scenario: Validate Nobel Prize details structure
  # Test the detailed structure of Nobel Prize information
  Given path '/2.1/laureates'
  And param limit = 1
  When method GET
  Then status 200
  # Validate the complete structure of nobelPrizes array
  And match response.laureates[0].nobelPrizes ==
    """
    #[{
      awardYear: '#number',
      category: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      categoryFullName: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      sortOrder: '#regex (1|2|3)',
      portion: '#regex (1|1/2|1/3|1/4)',
      dateAwarded: '##string',
      prizeStatus: '#regex (received|declined|restricted)',
      motivation: {
        en: '##string',
        se: '##string',
        false: '##string'
      },
      prizeAmount: '##number',
      prizeAmountAdjusted: '##number',
      affiliations: '#[]',
      residences: '#[]',
      links: '#[]'
    }]
    """

Scenario: Validate affiliations structure in Nobel Prize
  # Test the detailed structure of affiliations within Nobel Prize data
  Given path '/2.1/laureates'
  And param limit = 1
  When method GET
  Then status 200
  # Validate the complete structure of affiliations array within Nobel Prize
  And match response.laureates[0].nobelPrizes[0].affiliations ==
    """
    #[{
      name: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      nameNow: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      nativeName: '##string',
      city: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      country: {
        en: '#string',
        se: '##string',
        false: '##string'
      },
      cityNow: {
        en: '#string',
        se: '##string',
        false: '##string',
        sameAs: '##array'
      },
      countryNow: {
        en: '#string',
        se: '##string',
        false: '##string',
        sameAs: '##array'
      },
      locationString: {
        en: '#string',
        se: '##string',
        false: '##string'
      }
    }]
    """

Scenario: Test invalid offset parameter should return 400
  # Test error handling for invalid offset parameter (offset cannot be 0)
  Given path '/2.1/laureates'
  And param offset = 0
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid limit parameter should return 400
  # Test error handling for invalid limit parameter (limit cannot be 0)
  Given path '/2.1/laureates'
  And param limit = 0
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid sort parameter should return 400
  # Test error handling for invalid sort parameter values
  Given path '/2.1/laureates'
  And param sort = 'invalid'
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid gender parameter should return 400
  # Test error handling for invalid gender parameter values
  Given path '/2.1/laureates'
  And param gender = 'invalid'
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid continent parameter should return 400
  # Test error handling for invalid continent parameter values
  Given path '/2.1/laureates'
  And param birthContinent = 'invalid'
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid Nobel Prize year should return 400
  # Test error handling for invalid Nobel Prize year (before Nobel Prizes existed)
  Given path '/2.1/laureates'
  And param nobelPrizeYear = 1900
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test invalid Nobel Prize category should return 400
  # Test error handling for invalid Nobel Prize category values
  Given path '/2.1/laureates'
  And param nobelPrizeCategory = 'invalid'
  When method GET
  Then status 400
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test not found laureate should return 404
  # Test error handling when searching for a non-existent laureate ID
  Given path '/2.1/laureates'
  And param ID = 999999
  When method GET
  Then status 404
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test unprocessable entity should return 422
  # Test error handling for birthDateTo without birthDate parameter
  Given path '/2.1/laureates'
  And param birthDateTo = '1880'
  When method GET
  Then status 422
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Test yearTo without nobelPrizeYear should return 422
  # Test error handling for yearTo parameter without nobelPrizeYear parameter
  Given path '/2.1/laureates'
  And param yearTo = 2020
  When method GET
  Then status 422
  # Verify error response structure
  And match response == { code: '#string', message: '#string' }
  And match response.code == '404'

Scenario: Validate links structure
  # Test the structure of pagination links in the response
  Given path '/2.1/laureates'
  When method GET
  Then status 200
  # Validate the structure of links array for pagination navigation
  And match response.links ==
    """
    #[{
      first: '##string',
      prev: '##string',
      self: '##string',
      next: '##string',
      last: '##string'
    }]
    """

Scenario: Validate Wikipedia and Wikidata structure
  # Test the structure of external reference links (Wikipedia and Wikidata)
  Given path '/2.1/laureates'
  And param limit = 1
  When method GET
  Then status 200
  # Validate Wikipedia reference structure
  And match response.laureates[0].wikipedia ==
    """
    {
      slug: '##string',
      english: '##string'
    }
    """
  # Validate Wikidata reference structure
  And match response.laureates[0].wikidata ==
    """
    {
      id: '##string',
      url: '##string'
    }
    """
  # Validate sameAs array contains string URIs
  And match response.laureates[0].sameAs == '#[]'
  And match each response.laureates[0].sameAs == '#string'
