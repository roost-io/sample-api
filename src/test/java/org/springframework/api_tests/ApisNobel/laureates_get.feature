# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelGitPath using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prize Laureates API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Validate GET /2.1/laureates with valid query parameters
    Given path '2.1', 'laureates'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    When method GET
    Then status 200
    And match response.laureates == '#[]'
    And match response.meta.offset == <offset>
    And match response.meta.limit == <limit>
    And match response.meta.sort == <sort>

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid query parameters
    Given path '2.1', 'laureates'
    And param offset = <offset>
    And param limit = <limit>
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message == '#string'

    Examples:
      | offset | limit |
      |     -1 |    10 |
      |      0 |    -5 |

  Scenario Outline: Validate GET /2.1/laureates with specific ID
    Given path '2.1', 'laureates'
    And param ID = <ID>
    When method GET
    Then status 200
    And match response.laureates[0].id == <ID>
    And match response.laureates[0].laureateIfPerson.knownName.en == '#string'
    And match response.laureates[0].laureateIfPerson.gender == '#string'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with non-existent ID
    Given path '2.1', 'laureates'
    And param ID = <ID>
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == '#string'

    Examples:
      | ID   |
      | 9999 |

  Scenario Outline: Validate GET /2.1/laureates with valid name
    Given path '2.1', 'laureates'
    And param name = <name>
    When method GET
    Then status 200
    And match response.laureates[0].laureateIfPerson.knownName.en == <name>

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with valid gender
    Given path '2.1', 'laureates'
    And param gender = <gender>
    When method GET
    Then status 200
    And match response.laureates[0].laureateIfPerson.gender == <gender>

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid gender
    Given path '2.1', 'laureates'
    And param gender = <gender>
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message == '#string'

    Examples:
      | gender |
      | xyz    |

  Scenario Outline: Validate GET /2.1/laureates with valid birthDate
    Given path '2.1', 'laureates'
    And param birthDate = <birthDate>
    When method GET
    Then status 200
    And match response.laureates[0].laureateIfPerson.birth.date == '#string'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid birthDate
    Given path '2.1', 'laureates'
    And param birthDate = <birthDate>
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message == '#string'

    Examples:
      | birthDate |
      |  99999999 |

  Scenario Outline: Validate GET /2.1/laureates with valid nobelPrizeYear
    Given path '2.1', 'laureates'
    And param nobelPrizeYear = <nobelPrizeYear>
    When method GET
    Then status 200
    And match response.laureates[0].nobelPrizes[0].awardYear == <nobelPrizeYear>

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid nobelPrizeYear
    Given path '2.1', 'laureates'
    And param nobelPrizeYear = <nobelPrizeYear>
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message == '#string'

    Examples:
      | nobelPrizeYear |
      |           1800 |
