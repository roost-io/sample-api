# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prize Laureates API

  Background:
    * def urlBase = karate.properties['url_base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Test GET Laureates with valid parameters
    Given path '2.1/laureates'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = '<sort>'
    And param ID = <ID>
    And param name = '<name>'
    And param gender = '<gender>'
    And param motivation = '<motivation>'
    And param affiliation = '<affiliation>'
    And param residence = '<residence>'
    And param birthDate = <birthDate>
    And param birthDateTo = '<birthDateTo>'
    And param deathDate = '<deathDate>'
    And param deathDateTo = <deathDateTo>
    And param foundedDate = '<foundedDate>'
    And param birthCity = '<birthCity>'
    And param birthCountry = '<birthCountry>'
    And param birthContinent = '<birthContinent>'
    And param deathCity = '<deathCity>'
    And param deathCountry = '<deathCountry>'
    And param deathContinent = '<deathContinent>'
    And param foundedCity = '<foundedCity>'
    And param foundedCountry = '<foundedCountry>'
    And param foundedContinent = '<foundedContinent>'
    And param HeadquartersCity = '<HeadquartersCity>'
    And param HeadquartersCountry = '<HeadquartersCountry>'
    And param HeadquartersContinent = '<HeadquartersContinent>'
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = '<nobelPrizeCategory>'
    And param format = '<format>'
    And param csvLang = '<csvLang>'
    When method GET
    Then status 200
    And match response.laureates == '#[] object'
    And match response.meta == '#object'
    And match response.links == '#[] object'
    And match response.laureates[*].id == '#number'
    And match response.laureates[*].laureateIfPerson.knownName.en == '#string'
    And match response.laureates[*].laureateIfPerson.gender == '#string'
    And match response.laureates[*].laureateIfPerson.birth.date == '#string'
    And match response.laureates[*].laureateIfPerson.birth.place.city.en == '#string'
    And match response.laureates[*].laureateIfOrg.orgName.en == '#string'
    And match response.laureates[*].nobelPrizes[*].awardYear == '#number'
    And match response.laureates[*].nobelPrizes[*].category.en == '#string'
    And match response.laureates[*].nobelPrizes[*].prizeAmount == '#number'
    And match response.laureates[*].nobelPrizes[*].affiliations[*].name.en == '#string'

    Examples:
      | read('laureates_get.csv') |

  Scenario: Test GET Laureates with invalid parameters
    Given path '2.1/laureates'
    And param offset = -1
    And param limit = 0
    When method GET
    Then status 400
    And match response.code == '404'
    And match response.message == '#string'

  Scenario: Test GET Laureates with non-existent resource
    Given path '2.1/laureates'
    And param ID = 999999
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == '#string'

  Scenario: Test GET Laureates with unprocessable entity
    Given path '2.1/laureates'
    And param birthDate = 2025
    When method GET
    Then status 422
    And match response.code == '404'
    And match response.message == '#string'
