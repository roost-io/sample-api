# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prize Laureates API

  Background:
    * def urlBase = karate.properties['URL1_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["URL1_AUTH_TOKEN"])' }

  Scenario Outline: Validate GET /2.1/laureates with valid query parameters
    Given path '2.1', 'laureates'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    When method GET
    Then status 200
    And match response.laureates == '#[]'
    And match response.meta.offset == <offset>
    And match response.meta.limit == <limit>
    And match response.meta.sort == <sort>
    And match response.meta.count == '#number'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with specific ID
    Given path '2.1', 'laureates'
    And param ID = <ID>
    When method GET
    Then status 200
    And match response.laureates[0].id == <ID>
    And match response.laureates[0].laureateIfPerson.knownName.en == '#string'
    And match response.laureates[0].nobelPrizes == '#[]'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid parameters
    Given path '2.1', 'laureates'
    And param birthDate = <birthDate>
    When method GET
    Then status <status>
    And match response.code == <code>
    And match response.message == '#string'

    Examples:
      | birthDate | status | code |
      | 'invalid' |    400 |  400 |

  Scenario: Validate GET /2.1/laureates with no parameters
    Given path '2.1', 'laureates'
    When method GET
    Then status 200
    And match response.laureates == '#[]'
    And match response.meta.count == '#number'

  Scenario Outline: Validate GET /2.1/laureates with gender filter
    Given path '2.1', 'laureates'
    And param gender = <gender>
    When method GET
    Then status 200
    And match response.laureates == '#[]'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with birthDate range
    Given path '2.1', 'laureates'
    And param birthDate = <birthDate>
    And param birthDateTo = <birthDateTo>
    When method GET
    Then status 200
    And match response.laureates == '#[]'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with nobelPrizeYear range
    Given path '2.1', 'laureates'
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    When method GET
    Then status 200
    And match response.laureates == '#[]'

    Examples:
      | read('laureates_get.csv') |

  Scenario Outline: Validate GET /2.1/laureates with invalid date format
    Given path '2.1', 'laureates'
    And param birthDate = <birthDate>
    When method GET
    Then status 422
    And match response.code == '422'
    And match response.message == '#string'

    Examples:
      | birthDate    |
      | '01-01-1900' |
