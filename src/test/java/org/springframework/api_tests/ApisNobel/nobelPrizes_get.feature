# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Azure Open AI and AI Model Inference
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=977dd819cb
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['AUTH_TOKEN']) }

  Scenario Outline: Test GET /2.1/nobelPrizes with valid query parameters
    Given path '/2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method get
    Then status <status>
    And match response == <response>

    Examples:
      | offset | limit | sort | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang | status | response|
      |      1 |    10 | asc  |           1989 |   1990 | eco                | json   | en      |    200 | { "nobelPrizes": [ { "awardYear": 1989, "category": { "en": "Economics" }, "categoryFullName": { "en": "Nobel Memorial Prize in Economic Sciences" }, "dateAwarded": "1989-10-08", "prizeAmount": 1000000, "prizeAmountAdjusted": 1000000, "topMotivation": { "en": "for his pioneering work in the theory of economic mechanisms and especially concerning the general equilibrium and welfare in purely competitive analysis." }, "laureates": [ { "id": 34, "name": { "en": "Trygve Haavelmo" }, "portion": "1", "sortOrder": "1", "motivation": { "en": "for his pioneering work in the theory of economic mechanisms and especially concerning the general equilibrium and welfare in purely competitive analysis." }, "links": [ { "rel": "self", "href": "/2.1/laureates/34", "action": "GET", "types": "application/json" } ] } ] } ], "meta": { "offset": 1, "limit": 10, "nobelPrizeYear": 1989, "yearTo": 1990, "nobelPrizeCategory": "eco", "count": 1 }, "links": [ { "first": "/2.1/nobelPrizes?offset=1&limit=10&sort=asc&nobelPrizeYear=1989&yearTo=1990&nobelPrizeCategory=eco&format=json&csvLang=en", "self": "/2.1/nobelPrizes?offset=1&limit=10&sort=asc&nobelPrizeYear=1989&yearTo=1990&nobelPrizeCategory=eco&format=json&csvLang=en", "next": "/2.1/nobelPrizes?offset=11&limit=10&sort=asc&nobelPrizeYear=1989&yearTo=1990&nobelPrizeCategory=eco&format=json&csvLang=en" } ] } |
      |      1 |    10 | asc  |           1989 |   1990 | eco                | json   | en      |    400 | { "code": "400", "message": "Bad request" }|
      |      1 |    10 | asc  |           1989 |   1990 | eco                | json   | en      |    404 | { "code": "404", "message": "Not Found" }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
      |      1 |    10 | asc  |           1989 |   1990 | eco                | json   | en      |    422 | { "code": "422", "message": "Unprocessable Entity" }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |

  Scenario Outline: Test GET /2.1/nobelPrizes with invalid query parameters
    Given path '/2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method get
    Then status <status>
    And match response == <response>

    Examples:
      | offset | limit | sort | nobelPrizeYear | yearTo | nobelPrizeCategory | format  | csvLang | status | response                                    |
      |     -1 |    10 | asc  |           1989 |   1990 | eco                | json    | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    -1 | asc  |           1989 |   1990 | eco                | json    | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    10 | asc  |           1800 |   1990 | eco                | json    | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    10 | asc  |           1989 |   1800 | eco                | json    | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    10 | asc  |           1989 |   1990 | invalid            | json    | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    10 | asc  |           1989 |   1990 | eco                | invalid | en      |    400 | { "code": "400", "message": "Bad request" } |
      |      1 |    10 | asc  |           1989 |   1990 | eco                | json    | invalid |    400 | { "code": "400", "message": "Bad request" } |

  Scenario: Test GET /2.1/nobelPrizes without query parameters
    Given path '/2.1/nobelPrizes'
    When method get
    Then status 200
    And match response == { "nobelPrizes": [], "meta": { "offset": 0, "limit": 10, "count": 0 }, "links": [] }

  Scenario: Test GET /2.1/nobelPrizes with invalid endpoint
    Given path '/2.1/invalid'
    When method get
    Then status 404
    And match response == { "code": "404", "message": "Not Found" }
