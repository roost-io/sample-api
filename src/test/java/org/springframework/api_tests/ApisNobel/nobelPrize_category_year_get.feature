# ********RoostGPT********

# Test generated by RoostGPT for test karateNobelSwaggerAPI using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=adfce3f1d2
# 
# 

# ********RoostGPT********
Feature: Verify Nobel Prize API

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Validate Nobel Prize details for a given category and year
    Given path '/2.1/nobelPrize/<category>/<year>'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrize == '#object'
    And match response.nobelPrize.awardYear == '#number'
    And match response.nobelPrize.category == '#object'
    And match response.nobelPrize.category.en == '#string'
    And match response.nobelPrize.category.se == '#string'
    And match response.nobelPrize.categoryFullName == '#object'
    And match response.nobelPrize.categoryFullName.en == '#string'
    And match response.nobelPrize.categoryFullName.se == '#string'
    And match response.nobelPrize.dateAwarded == '#string'
    And match response.nobelPrize.prizeAmount == '#number'
    And match response.nobelPrize.prizeAmountAdjusted == '#number'
    And match response.nobelPrize.topMotivation == '#object'
    And match response.nobelPrize.topMotivation.en == '#string'
    And match response.nobelPrize.topMotivation.se == '#string'
    And match response.nobelPrize.laureates == '#array'
    And match response.nobelPrize.laureates[*].id == '#number'
    And match response.nobelPrize.laureates[*].name == '#object'
    And match response.nobelPrize.laureates[*].name.en == '#string'
    And match response.nobelPrize.laureates[*].name.se == '#string'
    And match response.nobelPrize.laureates[*].portion == '#string'
    And match response.nobelPrize.laureates[*].sortOrder == '#string'
    And match response.nobelPrize.laureates[*].motivation == '#object'
    And match response.nobelPrize.laureates[*].motivation.en == '#string'
    And match response.nobelPrize.laureates[*].motivation.se == '#string'
    And match response.nobelPrize.laureates[*].links == '#array'
    And match response.nobelPrize.laureates[*].links[*].rel == '#string'
    And match response.nobelPrize.laureates[*].links[*].href == '#string'
    And match response.nobelPrize.laureates[*].links[*].action == '#string'
    And match response.nobelPrize.laureates[*].links[*].types == '#string'

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Validate error responses for invalid category or year
    Given path '/2.1/nobelPrize/<category>/<year>'
    When method GET
    Then status <statusCode>
    And match response == '#object'
    And match response.code == '#string'
    And match response.message == '#string'

    Examples:
      | category | year   | statusCode |
      | 'xyz'    |   2000 |        400 |
      | 'che'    |   1899 |        400 |
      | 'eco'    |   2100 |        404 |
      | 'lit'    | 'abcd' |        422 |
