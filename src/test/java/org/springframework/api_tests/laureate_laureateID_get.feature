# ********RoostGPT********

# Test generated by RoostGPT for test azure-karate-apitest using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=e702c0f931
# 
# 

# ********RoostGPT********
Feature: Testing RESTful API for Laureate Information

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase

  Scenario Outline: Verify the GET operation for getting laureate's information
  
    Given path '2.1', 'laureate', '<laureateID>'
    And header Authorization = 'Bearer '+ karate.properties['AUTH_TOKEN']
    When method get
    Then status 200
    And match response.code == '200'
    And assert response.message == 'Successful call of Laureate given the ID'
    And assert response.properties.laureate.id.type  == 'integer'
    And assert response.properties.laureate.id.minimum  == 1
    And assert response.properties.laureate.object.properties.knownName.type  == 'object'
    And assert response.properties.laureate.object.properties.knownName.en.type  == 'string'
    And assert response.properties.laureate.object.properties.knownName.se.type  == 'string'
    And assert response.properties.laureate.object.properties.knownName.false.type  == 'string'
    And assert response.properties.laureate.properties.gender.type  == 'string'
    And assert response.properties.laureate.properties.gender.example  == 'female'
    And assert response.properties.laureate.properties.birth.type  == 'object'
    And assert response.properties.laureate.properties.birth.properties.date.type  == 'string'
    And assert response.properties.laureate.properties.birth.properties.place.object.properties.city.object.properties.en.type  == 'string'
    And assert response.properties.laureate.properties.birth.properties.place.object.properties.country.city.en.type  == 'string'
    And assert response.properties.laureate.properties.birth.properties.place.object.properties.cityNow.object.properties.en.type  == 'string'
    And assert response.properties.laureate.properties.birth.properties.place.object.properties.cityNow.object.properties.false.type  == 'string'
    And assert response.properties.laureate.properties.birth.properties.place.object.properties.cityNow.object.properties.sameAs.items.example  == 'https://'

    Examples: 
      | laureateID |
      | 456        |
      | 123        |
      | 789        |
      | 321        |

  Scenario Outline: Check for invalid laureate ID

    Given path '2.1', 'laureate', '<laureateID>'
    When method get
    Then status 400
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'
  
    Examples:
      | laureateID |
      | 0          | 
      | abc        |  
      | 9999       |
