# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-haiku-20240307
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Laureate API

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase

Scenario: Retrieve Laureate information by ID
    Given path '/2.1/laureate/{laureateID}'
    And param laureateID = 456
    When method GET
    Then status 200
    And match response.laureate.id == 456
    And match response.laureate.laureateIfPerson.knownName.en == 'English'
    And match response.laureate.laureateIfPerson.knownName.se == 'Svenska'
    And match response.laureate.laureateIfPerson.knownName.false == 'Norsk'
    And match response.laureate.laureateIfPerson.givenName.en == 'English'
    And match response.laureate.laureateIfPerson.givenName.se == 'Svenska'
    And match response.laureate.laureateIfPerson.givenName.false == 'Norsk'
    And match response.laureate.laureateIfPerson.familyName.en == 'English'
    And match response.laureate.laureateIfPerson.familyName.se == 'Svenska'
    And match response.laureate.laureateIfPerson.familyName.false == 'Norsk'
    And match response.laureate.laureateIfPerson.fullName.en == 'English'
    And match response.laureate.laureateIfPerson.fullName.se == 'Svenska'
    And match response.laureate.laureateIfPerson.fullName.false == 'Norsk'
    And match response.laureate.laureateIfPerson.filename == 'filename'
    And match response.laureate.laureateIfPerson.penname == 'Penname'
    And match response.laureate.laureateIfPerson.gender == 'female'
    And match response.laureate.laureateIfPerson.birth.date == '1989-04-25'
    And match response.laureate.laureateIfPerson.birth.place.city.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.city.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.city.false == 'Norsk'
    And match response.laureate.laureateIfPerson.birth.place.country.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.country.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.country.false == 'Norsk'
    And match response.laureate.laureateIfPerson.birth.place.cityNow.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.cityNow.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.cityNow.false == 'Norsk'
    And match response.laureate.laureateIfPerson.birth.place.cityNow.sameAs[0] == 'https://'
    And match response.laureate.laureateIfPerson.birth.place.countryNow.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.countryNow.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.countryNow.false == 'Norsk'
    And match response.laureate.laureateIfPerson.birth.place.countryNow.sameAs[0] == 'https://'
    And match response.laureate.laureateIfPerson.birth.place.continent.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.continent.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.continent.false == 'Norsk'
    And match response.laureate.laureateIfPerson.birth.place.locationString.en == 'English'
    And match response.laureate.laureateIfPerson.birth.place.locationString.se == 'Svenska'
    And match response.laureate.laureateIfPerson.birth.place.locationString.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.date == '1989-04-25'
    And match response.laureate.laureateIfPerson.death.place.city.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.city.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.city.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.place.country.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.country.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.country.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.place.cityNow.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.cityNow.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.cityNow.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.place.cityNow.sameAs[0] == 'https://'
    And match response.laureate.laureateIfPerson.death.place.countryNow.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.countryNow.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.countryNow.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.place.countryNow.sameAs[0] == 'https://'
    And match response.laureate.laureateIfPerson.death.place.continent.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.continent.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.continent.false == 'Norsk'
    And match response.laureate.laureateIfPerson.death.place.locationString.en == 'English'
    And match response.laureate.laureateIfPerson.death.place.locationString.se == 'Svenska'
    And match response.laureate.laureateIfPerson.death.place.locationString.false == 'Norsk'
    And match response.laureate.wikipedia.slug == 'slug'
    And match response.laureate.wikipedia.english == 'https://en.wikipedia.org/wiki/'
    And match response.laureate.wikidata.id == 'id'
    And match response.laureate.wikidata.url == 'https://www.wikidata.org/wiki/'
    And match response.laureate.sameAs[0] == 'https://'
    And match response.laureate.links[0].rel == '#'
    And match response.laureate.links[0].href == '#'
    And match response.laureate.links[0].action == '#'
    And match response.laureate.links[0].types == '#'
    And match response.laureate.nobelPrizes[0].awardYear == 1989
    And match response.laureate.nobelPrizes[0].category.en == 'English'
    And match response.laureate.nobelPrizes[0].category.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].category.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].categoryFullName.en == 'English'
    And match response.laureate.nobelPrizes[0].categoryFullName.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].categoryFullName.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].sortOrder == '1'
    And match response.laureate.nobelPrizes[0].portion == '1'
    And match response.laureate.nobelPrizes[0].dateAwarded == '1989-04-25'
    And match response.laureate.nobelPrizes[0].prizeStatus == 'received'
    And match response.laureate.nobelPrizes[0].motivation.en == 'English'
    And match response.laureate.nobelPrizes[0].motivation.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].motivation.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].prizeAmount == 1000000
    And match response.laureate.nobelPrizes[0].prizeAmountAdjusted == 1000000
    And match response.laureate.nobelPrizes[0].affiliations[0].name.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].name.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].name.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].nameNow.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].nameNow.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].nameNow.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].nativeName == 'Le romenic universitet'
    And match response.laureate.nobelPrizes[0].affiliations[0].city.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].city.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].city.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].country.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].country.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].country.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].cityNow.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].cityNow.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].cityNow.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].cityNow.sameAs[0] == 'https://'
    And match response.laureate.nobelPrizes[0].affiliations[0].countryNow.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].countryNow.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].countryNow.false == 'Norsk'
    And match response.laureate.nobelPrizes[0].affiliations[0].countryNow.sameAs[0] == 'https://'
    And match response.laureate.nobelPrizes[0].affiliations[0].locationString.en == 'English'
    And match response.laureate.nobelPrizes[0].affiliations[0].locationString.se == 'Svenska'
    And match response.laureate.nobelPrizes[0].affiliations[0].locationString.false == 'Norsk'
    And match response.laureate.residences[0].city.en == 'English'
    And match response.laureate.residences[0].city.se == 'Svenska'
    And match response.laureate.residences[0].city.false == 'Norsk'
    And match response.laureate.residences[0].country.en == 'English'
    And match response.laureate.residences[0].country.se == 'Svenska'
    And match response.laureate.residences[0].country.false == 'Norsk'
    And match response.laureate.residences[0].cityNow.en == 'English'
    And match response.laureate.residences[0].cityNow.se == 'Svenska'
    And match response.laureate.residences[0].cityNow.false == 'Norsk'
    And match response.laureate.residences[0].cityNow.sameAs[0] == 'https://'
    And match response.laureate.residences[0].countryNow.en == 'English'
    And match response.laureate.residences[0].countryNow.se == 'Svenska'
    And match response.laureate.residences[0].countryNow.false == 'Norsk'
    And match response.laureate.residences[0].countryNow.sameAs[0] == 'https://'
    And match response.laureate.residences[0].locationString.en == 'English'
    And match response.laureate.residences[0].locationString.se == 'Svenska'
    And match response.laureate.residences[0].locationString.false == 'Norsk'
    And match response.laureate.links[0].rel == '#'
    And match response.laureate.links[0].href == '#'
    And match response.laureate.links[0].action == '#'
    And match response.laureate.links[0].types == '#'

Scenario: Retrieve Laureate information with invalid ID
    Given path '/2.1/laureate/{laureateID}'
    And param laureateID = 0
    When method GET
    Then status 400
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'

Scenario: Retrieve Laureate information with non-existent ID
    Given path '/2.1/laureate/{laureateID}'
    And param laureateID = 999999
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'

Scenario: Retrieve Laureate information with invalid request
    Given path '/2.1/laureate/{laureateID}'
    And param laureateID = 'abc'
    When method GET
    Then status 422
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'
