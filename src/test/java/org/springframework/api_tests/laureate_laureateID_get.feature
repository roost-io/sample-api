# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { 'Authorization': '#(authToken)' }

  Scenario Outline: Get Laureate by ID - Successful Response
    Given path '/2.1/laureate/<laureateID>'
    When method GET
    Then status 200
    And match response ==
      """
      {
        "laureate": {
          "id": "#number",
          "laureateIfPerson": {
            "knownName": {
              "en": "#string",
              "se": "#string",
              "false": "##string"  
            },
            "givenName": {
              "en": "#string", 
              "se": "#string",
              "false": "##string"
            },
            "familyName": {
              "en": "#string",
              "se": "#string", 
              "false": "##string"
            },
            "fullName": {
              "en": "#string",
              "se": "#string",
              "false": "##string"  
            },
            "filename": "#string",
            "penname": "##string",
            "gender": "##string",
            "birth": {
              "date": "#string",
              "place": {
                "city": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string"
                },
                "country": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string"
                },
                "cityNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string",
                  "sameAs": "##array"
                },
                "countryNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string",
                  "sameAs": "##array"
                },
                "continent": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string"
                },
                "locationString": {
                  "en": "#string",
                  "se": "#string",
                  "false": "##string"
                }
              }
            },
            "death": "##object"
          },
          "laureateIfOrg": "##object",
          "nobelPrizes": "#array"
        }
      }
      """
    And match response.laureate.id == <laureateID>
    And match response.laureate.nobelPrizes[*].awardYear contains <awardYear>
    And match response.laureate.nobelPrizes[*].category.en contains <category>

    Examples:
      | laureateID | awardYear | category     |
      | 1          | 1901      | "Peace"      |
      | 100        | 1970      | "Physics"    |
      | 500        | 2000      | "Literature" |

  Scenario: Get Laureate by ID - Invalid ID
    Given path '/2.1/laureate/0'
    When method GET
    Then status 400
    And match response == 
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """
    And match response.code == "400"
    And match response.message contains "malformed syntax"

  Scenario: Get Laureate by ID - Non-existent ID  
    Given path '/2.1/laureate/9999'
    When method GET 
    Then status 404
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """ 
    And match response.code == "404"
    And match response.message contains "could not be found"
