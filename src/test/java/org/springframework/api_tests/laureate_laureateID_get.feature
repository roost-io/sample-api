# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

  Background:
    * url urlBase
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Get information about a specific Nobel Prize Laureate
    Given path '/2.1/laureate/456'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 200
    And match response ==
      """
      {
        "laureate": {
          "id": 456,
          "laureateIfPerson": {
            "knownName": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "givenName": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "familyName": {
              "en": "#string", 
              "se": "#string",
              "false": "#string"
            },
            "fullName": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "filename": "#string",
            "penname": "##string",
            "gender": "#string",
            "birth": {
              "date": "#date",
              "place": {
                "city": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "country": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "cityNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string",
                  "sameAs": "#array"
                },
                "countryNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string",
                  "sameAs": "#array"
                },
                "continent": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "locationString": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                }
              }
            },
            "death": {
              "date": "##date",
              "place": {
                "city": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "country": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "cityNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string",
                  "sameAs": "#array"
                },
                "countryNow": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string",
                  "sameAs": "#array"
                },
                "continent": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                },
                "locationString": {
                  "en": "#string",
                  "se": "#string",
                  "false": "#string"
                }
              }
            }
          },
          "nobelPrizes": "#array"
        }
      }
      """
    And match response.laureate.id == 456
    And match response.laureate.laureateIfPerson.gender == '#string'
    And match response.laureate.nobelPrizes == '#array'

  Scenario: Get information about a non-existent Nobel Prize Laureate
    Given path '/2.1/laureate/999999'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 404
    And match response ==
      """
      {
        "code": "404",
        "message": "There is not Laureate born that date"
      }
      """

  Scenario: Get information about a Nobel Prize Laureate with invalid ID
    Given path '/2.1/laureate/invalid'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 400
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """
