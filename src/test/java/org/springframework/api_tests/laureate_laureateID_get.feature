# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario Outline: Get Nobel Prize Laureate by ID
  Given path '/2.1/laureate/<laureateID>'
  When method GET
  Then status 200
  And match header Content-Type contains 'application/json'
  And match response.laureate.id == <laureateID>
  And match response.laureate.laureateIfPerson.knownName.en == '#string'
  And match response.laureate.laureateIfPerson.givenName.en == '#string'
  And match response.laureate.laureateIfPerson.familyName.en == '#string'  
  And match response.laureate.laureateIfPerson.fullName.en == '#string'
  And match response.laureate.laureateIfPerson.filename == '#string'
  And match response.laureate.laureateIfPerson.gender == '#string'
  And match response.laureate.laureateIfPerson.birth.date == '#regex ^\\d{4}-\\d{2}-\\d{2}$'
  And match response.laureate.laureateIfPerson.birth.place.city.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.country.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.cityNow.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.countryNow.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.continent.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.locationString.en == '#string'
  And match response.laureate.nobelPrizes[*].awardYear contains <awardYear>
  And match response.laureate.nobelPrizes[*].category.en contains <category>
  And match response.laureate.nobelPrizes[*].categoryFullName.en contains <categoryFullName>
  And match response.laureate.nobelPrizes[*].dateAwarded == '#regex ^\\d{4}-\\d{2}-\\d{2}$'
  And match response.laureate.nobelPrizes[*].prizeStatus == <prizeStatus>
  And match response.laureate.nobelPrizes[*].motivation.en == '#string'
  And match response.laureate.nobelPrizes[*].prizeAmount == '#number'
  And match response.laureate.nobelPrizes[*].prizeAmountAdjusted == '#number'
  And match response.laureate.nobelPrizes[*].affiliations[*].name.en == '#string'
  And match response.laureate.nobelPrizes[*].affiliations[*].city.en == '#string'
  And match response.laureate.nobelPrizes[*].affiliations[*].country.en == '#string'

  Examples:
    | laureateID | awardYear | category | categoryFullName      | prizeStatus |
    | 456        | 1989      | physics  | Nobel Prize in Physics| received    |

Scenario: Get non-existent Nobel Prize Laureate
  Given path '/2.1/laureate/999999'
  When method GET
  Then status 404
  And match header Content-Type contains 'application/json'
  And match response.code == '404'
  And match response.message == 'There is not Laureate born that date'

Scenario: Get Nobel Prize Laureate with invalid ID
  Given path '/2.1/laureate/abc'
  When method GET
  Then status 400 
  And match header Content-Type contains 'application/json'
  And match response.code == '400'
  And match response.message == 'Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.'
