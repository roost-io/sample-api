# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Test /2.1/laureate/{laureateID} endpoint

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Test GET /2.1/laureate/{laureateID} with valid laureate ID
  * def laureateID = 456
  Given path '/2.1/laureate/', laureateID
  When method GET
  Then status 200
  And match response == 
  """
  {
    "laureate": {
      "id": "#number",
      "laureateIfPerson": {
        "knownName": {
          "en": "#string",
          "se": "#string",
          "false": "#string"  
        },
        "givenName": {
          "en": "#string",
          "se": "#string",
          "false": "#string"
        },
        "familyName": {
          "en": "#string",
          "se": "#string", 
          "false": "#string"
        },
        "fullName": {
          "en": "#string",
          "se": "#string",
          "false": "#string"  
        },
        "filename": "#string",
        "penname": "##string",
        "gender": "#string",
        "birth": {
          "date": "#ignore",
          "place": {
            "city": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "country": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "cityNow": {
              "en": "#string",
              "se": "#string",
              "false": "#string",
              "sameAs": "#array"
            },
            "countryNow": {
              "en": "#string",
              "se": "#string",
              "false": "#string",
              "sameAs": "#array"  
            },
            "continent": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "locationString": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            }
          }
        },
        "death": {
          "date": "#ignore",
          "place": {
            "city": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "country": {
              "en": "#string", 
              "se": "#string",
              "false": "#string"
            },
            "cityNow": {
              "en": "#string",
              "se": "#string",
              "false": "#string",
              "sameAs": "#array"
            },
            "countryNow": {
              "en": "#string",
              "se": "#string",
              "false": "#string",
              "sameAs": "#array"
            },
            "continent": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            },
            "locationString": {
              "en": "#string",
              "se": "#string",
              "false": "#string"
            }
          }
        }
      }
    },
    "nobelPrizes": "#array",
    "wikipedia": {
      "slug": "#string",
      "english": "#string"
    },
    "wikidata": {
      "id": "#string",
      "url": "#string"  
    },
    "sameAs": "#array",
    "links": "#array"
  }
  """
  And match response.laureate.id == laureateID
  And match response.laureate.laureateIfPerson.knownName.en == '#string'
  And match response.laureate.laureateIfPerson.gender == '#string'
  And match response.laureate.laureateIfPerson.birth.date == '#ignore'
  And match response.laureate.nobelPrizes == '#array'
  And match each response.laureate.nobelPrizes contains { awardYear: '#number', category: '#object', categoryFullName: '#object', sortOrder: '#string', portion: '#string', dateAwarded: '#ignore', prizeStatus: '#string', motivation: '#object', prizeAmount: '#number', prizeAmountAdjusted: '#number', affiliations: '#array', residences: '##array' }
  And match response.wikipedia.slug == '#string'
  And match response.wikidata.id == '#string'
  And match response.sameAs == '#array'
  And match response.links == '#array'

Scenario: Test GET /2.1/laureate/{laureateID} with invalid laureate ID
  Given path '/2.1/laureate/invalidID'
  When method GET
  Then status 404
  And match response == 
  """
  {
    "code": "#string",
    "message": "#string"
  }
  """ 
  And match response.code == '404'
  And match response.message contains 'There is not Laureate'

Scenario: Test GET /2.1/laureate/{laureateID} with non-existent laureate ID
  * def nonExistentID = 999999
  Given path '/2.1/laureate/', nonExistentID
  When method GET
  Then status 404
  And match response == 
  """
  {
    "code": "#string",
    "message": "#string"
  }
  """
  And match response.code == '404'
  And match response.message contains 'There is not Laureate'
