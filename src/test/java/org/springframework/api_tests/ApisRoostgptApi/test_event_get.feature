# ********RoostGPT********

# Test generated by RoostGPT for test roostgpt-apispec using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /test/event_get for http method type GET 
# RoostTestHash=12bcbb0857
# 
# 

# ********RoostGPT********
Feature: Test Event API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = 'Bearer ' + karate.properties['BEARER_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Get all events with various query parameters
    Given path '/test/event'
    And param searchTerm = '<searchTerm>'
    And param isCaseSensitive = '<isCaseSensitive>'
    And param isWholeWord = '<isWholeWord>'
    And param take = '<take>'
    And param skip = '<skip>'
    And param test_id = '<test_id>'
    And param status_filter = <status_filter>
    And param test_type_filter = <test_type_filter>
    And param event_type_filter = <event_type_filter>
    And param order_by = '<order_by>'
    And param time_filter = '<time_filter>'
    And param label_filter = <label_filter>
    And param show_my_events = '<show_my_events>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario: Get all events with minimal parameters
    Given path '/test/event'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with searchTerm minimum length validation
    Given path '/test/event'
    And param searchTerm = 'ab'
    When method GET
    Then status <400
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'GET'
    And match response.path == '#string'
    And match response.timestamp == '#string'

  Scenario Outline: Get all events with single status filter
    Given path '/test/event'
    And param status_filter = <status_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with single test type filter
    Given path '/test/event'
    And param test_type_filter = <test_type_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with order by parameter
    Given path '/test/event'
    And param order_by = '<order_by>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with time filter
    Given path '/test/event'
    And param time_filter = '<time_filter>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with case sensitivity and whole word options
    Given path '/test/event'
    And param searchTerm = 'test'
    And param isCaseSensitive = '<isCaseSensitive>'
    And param isWholeWord = '<isWholeWord>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with show my events filter
    Given path '/test/event'
    And param show_my_events = '<show_my_events>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario: Get all events with multiple filters combined
    Given path '/test/event'
    And param searchTerm = 'integration'
    And param isCaseSensitive = 'false'
    And param isWholeWord = 'true'
    And param take = '15'
    And param skip = '10'
    And param test_id = 'integration_test_001'
    And param status_filter = ['in_progress', 'completed', 'failed']
    And param test_type_filter = ['integration', 'functional']
    And param event_type_filter = ['test_event', 'build_event']
    And param order_by = 'modification_time'
    And param time_filter = 'Last-14Days'
    And param label_filter = ['critical', 'regression']
    And param show_my_events = 'true'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Handle default error response
    Given path '/test/event'
    And param searchTerm = 'x'
    When method GET
    Then status != 200
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == '#string'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.method == '#? _ == "GET" || _ == "DELETE" || _ == "HEAD" || _ == "OPTIONS" || _ == "POST" || _ == "PUT" || _ == "PATCH" || _ == "PURGE" || _ == "LINK" || _ == "UNLINK"'
