# ********RoostGPT********

# Test generated by RoostGPT for test roostgpt-apispec using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /test/event_get for http method type GET 
# RoostTestHash=12bcbb0857
# 
# 

# ********RoostGPT********
Feature: Test Event API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['BEARER_TOKEN']
    * configure headers = { Authorization: '#(authToken)' }

  Scenario: Get all events without any parameters
    Given path '/test/event'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario Outline: Get all events with search parameters
    Given path '/test/event'
    And param searchTerm = '<searchTerm>'
    And param isCaseSensitive = '<isCaseSensitive>'
    And param isWholeWord = '<isWholeWord>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with pagination parameters
    Given path '/test/event'
    And param take = '<take>'
    And param skip = '<skip>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with test_id parameter
    Given path '/test/event'
    And param test_id = '<test_id>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with status filter
    Given path '/test/event'
    And param status_filter = <status_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with test type filter
    Given path '/test/event'
    And param test_type_filter = <test_type_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with event type filter
    Given path '/test/event'
    And param event_type_filter = <event_type_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with order by parameter
    Given path '/test/event'
    And param order_by = '<order_by>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with time filter
    Given path '/test/event'
    And param time_filter = '<time_filter>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with label filter
    Given path '/test/event'
    And param label_filter = <label_filter>
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with show my events parameter
    Given path '/test/event'
    And param show_my_events = '<show_my_events>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario Outline: Get all events with combined parameters
    Given path '/test/event'
    And param searchTerm = '<searchTerm>'
    And param take = '<take>'
    And param skip = '<skip>'
    And param status_filter = <status_filter>
    And param order_by = '<order_by>'
    And param time_filter = '<time_filter>'
    And param show_my_events = '<show_my_events>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario: Get all events with invalid searchTerm (less than 3 characters)
    Given path '/test/event'
    And param searchTerm = 'ab'
    When method GET
    Then status != 200

  Scenario: Get all events with invalid isCaseSensitive value
    Given path '/test/event'
    And param isCaseSensitive = 'invalid'
    When method GET
    Then status != 200

  Scenario: Get all events with invalid isWholeWord value
    Given path '/test/event'
    And param isWholeWord = 'invalid'
    When method GET
    Then status != 200

  Scenario: Get all events with invalid status_filter value
    Given path '/test/event'
    And param status_filter = ['invalid_status']
    When method GET
    Then status != 200

  Scenario: Get all events with invalid test_type_filter value
    Given path '/test/event'
    And param test_type_filter = ['invalid_type']
    When method GET
    Then status != 200

  Scenario: Get all events with invalid order_by value
    Given path '/test/event'
    And param order_by = 'invalid_order'
    When method GET
    Then status != 200

  Scenario: Get all events with invalid time_filter value
    Given path '/test/event'
    And param time_filter = 'invalid_time'
    When method GET
    Then status != 200

  Scenario: Get all events with invalid show_my_events value
    Given path '/test/event'
    And param show_my_events = 'invalid'
    When method GET
    Then status != 200

  Scenario: Handle default error response
    Given path '/test/event'
    And param searchTerm = 'ab'
    When method GET
    Then status != 200
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == '#? _ == "GET" || _ == "DELETE" || _ == "HEAD" || _ == "OPTIONS" || _ == "POST" || _ == "PUT" || _ == "PATCH" || _ == "PURGE" || _ == "LINK" || _ == "UNLINK"'
    And match response.path == '#string'
    And match response.timestamp == '#string'
