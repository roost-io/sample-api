# ********RoostGPT********

# Test generated by RoostGPT for test roostgpt-apispec using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /test/{test_id}_get for http method type GET 
# RoostTestHash=fa46d4d478
# 
# 

# ********RoostGPT********
Feature: Test GPT Controller - Get One Test

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: #('Bearer ' + karate.properties['bearer']) }

  Scenario Outline: Get one test with valid parameters
    Given path '/test/<test_id>'
    And param clone_test = '<clone_test>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_test_id_get.csv') |

  Scenario Outline: Get one test with invalid test_id - default error response
    Given path '/test/<test_id>'
    And param clone_test = '<clone_test>'
    When method GET
    Then status <status_code>
    And match response == '#object'
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == '#string'
    And match response.method == '#regex (GET|DELETE|HEAD|OPTIONS|POST|PUT|PATCH|PURGE|LINK|UNLINK)'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.timestamp == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*'

    Examples:
      | test_id     | clone_test | status_code |
      | invalid123  | true       |         404 |
      | nonexistent | false      |         404 |
      |             | true       |         400 |
      | null        | false      |         400 |

  Scenario Outline: Get one test with missing required query parameter
    Given path '/test/<test_id>'
    When method GET
    Then status <status_code>
    And match response == '#object'
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'GET'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.timestamp == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*'

    Examples:
      | test_id | status_code |
      | test123 |         400 |
      | test456 |         400 |

  Scenario Outline: Get one test with invalid clone_test parameter values
    Given path '/test/<test_id>'
    And param clone_test = '<clone_test>'
    When method GET
    Then status <status_code>
    And match response == '#object'
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'GET'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.timestamp == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*'

    Examples:
      | test_id | clone_test | status_code |
      | test123 | invalid    |         400 |
      | test456 |        123 |         400 |
      | test789 | null       |         400 |

  Scenario: Get one test without authorization
    * configure headers = null
    Given path '/test/test123'
    And param clone_test = 'true'
    When method GET
    Then status 401
    And match response == '#object'
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'GET'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.timestamp == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*'

  Scenario: Get one test with invalid authorization
    * configure headers = { Authorization: 'Bearer invalid_token' }
    Given path '/test/test123'
    And param clone_test = 'true'
    When method GET
    Then status 401
    And match response == '#object'
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'GET'
    And match response.path == '#string'
    And match response.timestamp == '#string'
    And match response.timestamp == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*'
