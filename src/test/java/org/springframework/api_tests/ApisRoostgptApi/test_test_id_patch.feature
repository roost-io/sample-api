# ********RoostGPT********

# Test generated by RoostGPT for test roostgpt-apispec using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /test/{test_id}_patch for http method type PATCH 
# RoostTestHash=fe454b9d45
# 
# 

# ********RoostGPT********
Feature: Test GPT Controller - Edit Test

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: #('Bearer ' + karate.properties['bearer']) }

  Scenario Outline: Edit test with valid request body
    Given path '/test/<test_id>'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "<selected_model>",
          "model": {},
          "access_token": "test_token",
          "ai_temperature": 0.7,
          "connector_id": "conn_123"
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/src/main",
          "host_type": {},
          "source": {
            "access_token": "source_token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "repo_key",
              "title": "test-repo",
              "id": "repo_123",
              "owner": "test_owner",
              "default_branch": "main",
              "project_id": "proj_123",
              "project_name": "Test Project"
            },
            "application_entrypoint": "/app/main.js",
            "connector_id": "git_conn_123",
            "org_name": "test_org",
            "public_repo_url": "https://github.com/test/repo",
            "username": "test_user"
          },
          "target": {
            "access_token": "target_token",
            "selected_branch": "develop",
            "selected_repo": {
              "key": "target_repo_key",
              "title": "target-repo",
              "id": "target_123",
              "owner": "target_owner",
              "default_branch": "main",
              "project_id": "target_proj_123",
              "project_name": "Target Project"
            },
            "connector_id": "target_conn_123",
            "org_name": "target_org",
            "username": "target_user"
          },
          "max_depth": 5,
          "user_ip": "192.168.1.1"
        },
        "integration_info": {
          "type": "<integration_type>",
          "azure_org": "test_org",
          "azure_project": "test_project",
          "azure_project_id": "azure_123",
          "azure_token": "azure_token",
          "azure_work_item_id": "work_123",
          "connector_id": "integration_conn_123",
          "jira_email": "test@example.com",
          "jira_host_name": "test.atlassian.net",
          "jira_id": "jira_123",
          "jira_password": "jira_pass",
          "ticket_files": [
            {
              "file_content": "ticket content",
              "file_name": "ticket.txt",
              "file_path": "/tickets/ticket.txt"
            }
          ],
          "ticket_input_type": "file"
        },
        "additional_info": {
          "language": "javascript",
          "iterations": "10",
          "test_type": "<test_type>",
          "user_language": "english",
          "log_type": "console",
          "log_file": {
            "file_content": "log content",
            "file_name": "app.log",
            "file_path": "/logs/app.log"
          },
          "dependency_versions": {
            "node_version": {
              "key": "node_16",
              "title": "Node.js 16"
            },
            "java_version": {
              "key": "java_11",
              "title": "Java 11"
            },
            "python_version": {
              "key": "python_39",
              "title": "Python 3.9"
            },
            "maven_version": {
              "key": "maven_38",
              "title": "Maven 3.8"
            },
            "gradle_version": {
              "key": "gradle_7",
              "title": "Gradle 7"
            },
            "go_version": {
              "key": "go_118",
              "title": "Go 1.18"
            },
            "dotnet_version": {
              "key": "dotnet_6",
              "title": ".NET 6"
            },
            "cpp_version": {
              "key": "cpp_17",
              "title": "C++ 17"
            }
          },
          "apiSpec": {
            "type": "openapi",
            "sourceType": "git",
            "url": ["https://api.example.com/spec"],
            "gitpath": ["/api/spec.yaml"],
            "fileContent": [
              {
                "file_content": "openapi spec content",
                "file_name": "spec.yaml",
                "file_path": "/api/spec.yaml"
              }
            ],
            "api_repo_info": {
              "repo_name": {
                "key": "api_repo_key",
                "title": "api-repo",
                "id": "api_123",
                "owner": "api_owner",
                "default_branch": "main",
                "project_id": "api_proj_123",
                "project_name": "API Project"
              },
              "repo_branch": "main",
              "git_path": ["/api/specs"]
            }
          },
          "screenshot": {
            "screenshotSourceType": "git",
            "screenshotUrl": ["https://example.com/screenshot.png"],
            "screenshotGitpath": ["/screenshots/test.png"]
          },
          "behaviouralTest": {
            "type": "behavioral",
            "sourceType": "git",
            "url": ["https://example.com/behavioral"],
            "gitpath": ["/tests/behavioral"],
            "fileContent": [
              {
                "file_content": "behavioral test content",
                "file_name": "behavioral.js",
                "file_path": "/tests/behavioral.js"
              }
            ],
            "api_repo_info": {
              "repo_name": {
                "key": "behavioral_repo_key",
                "title": "behavioral-repo",
                "id": "behavioral_123",
                "owner": "behavioral_owner",
                "default_branch": "main",
                "project_id": "behavioral_proj_123",
                "project_name": "Behavioral Project"
              },
              "repo_branch": "main",
              "git_path": ["/tests/behavioral"]
            }
          },
          "env_config": [
            {
              "key": "API_KEY",
              "value": "test_api_key",
              "type": "string",
              "secret": true,
              "file": false,
              "file_details": {
                "file_content": "config content",
                "file_name": "config.env"
              }
            }
          ],
          "api_filter": "GET /api/users",
          "consider_existing_test": true,
          "create_api_spec": false,
          "custom_prompt": "Generate comprehensive tests",
          "custom_tags": ["smoke", "regression"],
          "elastic_search_connector_id": "es_conn_123",
          "emailConfig": {
            "inviteAll": true,
            "inviteRoosterEmails": ["test@example.com", "admin@example.com"]
          },
          "functions_to_test": "getAllUsers, createUser",
          "http_filters": ["GET", "POST"],
          "java_project_type": "maven",
          "log_stash_api_key": "logstash_key",
          "log_stash_token": "logstash_token",
          "log_stash_type": {},
          "log_stash_url": "https://logstash.example.com",
          "log_stash_username": "logstash_user",
          "msTeamsConfig": {
            "ms_teams_name": {
              "key": "team_key",
              "title": "Test Team"
            },
            "ms_teams_channel": {
              "key": "channel_key",
              "title": "Test Channel"
            },
            "ms_teams_access_token": "teams_token",
            "ms_teams_tenant_id": "tenant_123"
          },
          "notificationTypeArray": [{}],
          "packages": "express, jest",
          "roost_user_input": "Test all endpoints",
          "roost_user_input_file": [
            {
              "file_content": "user input content",
              "file_name": "input.txt",
              "file_path": "/input/input.txt"
            }
          ],
          "roost_user_input_type": "text",
          "single_test_file": true,
          "slackConfig": {
            "slackChannel": {
              "key": "slack_channel_key",
              "title": "Test Channel"
            },
            "slackChannelId": "C123456789",
            "slackToken": "slack_token"
          },
          "slack_connector_id": "slack_conn_123",
          "teams_connector_id": "teams_conn_123",
          "test_framework": "jest",
          "use_assistant": true,
          "user_scenarios": "Login and logout scenarios",
          "verify_test": true,
          "vulnerability_gen": false,
          "cloudWatchConfig": {
            "enabled": true,
            "cw_credentials": {
              "enabled": true,
              "credentials_input_type": "input",
              "access_key_id": "aws_access_key",
              "secret_access_key": "aws_secret_key",
              "session_token": "aws_session_token",
              "region": "us-east-1",
              "use_admin_creds": false,
              "credentials_file": {
                "file_content": "aws credentials",
                "file_name": "credentials"
              }
            },
            "cw_log_group_name": "test-log-group",
            "cw_region": "us-east-1"
          }
        },
        "test_timeout": 300,
        "trigger_events": ["push", "pull_request"],
        "test_framework": "jest",
        "git_type": "github",
        "source_repo": "test-repo",
        "source_branch": "main",
        "git_ops": true,
        "test_scope": {}
      }
      """
    When method PUT
    Then status 200

    Examples:
      | read('test_test_id_patch.csv') |

  Scenario: Edit test with missing required fields
    Given path '/test/test123'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai"
        }
      }
      """
    When method PUT
    Then status 400
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'PUT'
    And match response.path == '#string'
    And match response.timestamp == '#string'

  Scenario: Edit test with invalid test_id format
    Given path '/test/invalid-id-with-special-chars!'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai",
          "model": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/src",
          "host_type": {},
          "source": {
            "access_token": "token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "max_depth": 1
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "javascript",
          "iterations": "5",
          "test_type": "unit",
          "user_language": "english",
          "log_type": "file",
          "log_file": {
            "file_content": "log",
            "file_name": "test.log",
            "file_path": "/logs/test.log"
          },
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "git",
            "url": ["https://api.example.com"],
            "gitpath": ["/api"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/api"]
            }
          },
          "screenshot": {
            "screenshotSourceType": "git",
            "screenshotUrl": ["https://example.com"],
            "screenshotGitpath": ["/screenshots"]
          },
          "behaviouralTest": {
            "type": "behavioral",
            "sourceType": "git",
            "url": ["https://example.com"],
            "gitpath": ["/tests"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/tests"]
            }
          },
          "env_config": []
        },
        "test_timeout": 300,
        "trigger_events": ["push"],
        "test_framework": "jest",
        "git_type": "github",
        "source_repo": "test-repo",
        "source_branch": "main",
        "git_ops": false,
        "test_scope": {}
      }
      """
    When method PUT
    Then status 400
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'PUT'
    And match response.path == '#string'
    And match response.timestamp == '#string'

  Scenario: Edit test with invalid enum values
    Given path '/test/test123'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "invalid_model",
          "model": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/src",
          "host_type": {},
          "source": {
            "access_token": "token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "max_depth": 1
        },
        "integration_info": {
          "type": "invalid_type"
        },
        "additional_info": {
          "language": "javascript",
          "iterations": "5",
          "test_type": "invalid_test_type",
          "user_language": "invalid_language",
          "log_type": "file",
          "log_file": {
            "file_content": "log",
            "file_name": "test.log",
            "file_path": "/logs/test.log"
          },
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "git",
            "url": ["https://api.example.com"],
            "gitpath": ["/api"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/api"]
            }
          },
          "screenshot": {
            "screenshotSourceType": "git",
            "screenshotUrl": ["https://example.com"],
            "screenshotGitpath": ["/screenshots"]
          },
          "behaviouralTest": {
            "type": "behavioral",
            "sourceType": "git",
            "url": ["https://example.com"],
            "gitpath": ["/tests"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/tests"]
            }
          },
          "env_config": [],
          "java_project_type": "invalid_project_type"
        },
        "test_timeout": 300,
        "trigger_events": ["push"],
        "test_framework": "jest",
        "git_type": "github",
        "source_repo": "test-repo",
        "source_branch": "main",
        "git_ops": false,
        "test_scope": {}
      }
      """
    When method PUT
    Then status 400
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'PUT'
    And match response.path == '#string'
    And match response.timestamp == '#string'

  Scenario: Edit test without authorization header
    * configure headers = {}
    Given path '/test/test123'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai",
          "model": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/src",
          "host_type": {},
          "source": {
            "access_token": "token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "max_depth": 1
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "javascript",
          "iterations": "5",
          "test_type": "unit",
          "user_language": "english",
          "log_type": "file",
          "log_file": {
            "file_content": "log",
            "file_name": "test.log",
            "file_path": "/logs/test.log"
          },
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "git",
            "url": ["https://api.example.com"],
            "gitpath": ["/api"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/api"]
            }
          },
          "screenshot": {
            "screenshotSourceType": "git",
            "screenshotUrl": ["https://example.com"],
            "screenshotGitpath": ["/screenshots"]
          },
          "behaviouralTest": {
            "type": "behavioral",
            "sourceType": "git",
            "url": ["https://example.com"],
            "gitpath": ["/tests"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/tests"]
            }
          },
          "env_config": []
        },
        "test_timeout": 300,
        "trigger_events": ["push"],
        "test_framework": "jest",
        "git_type": "github",
        "source_repo": "test-repo",
        "source_branch": "main",
        "git_ops": false,
        "test_scope": {}
      }
      """
    When method PUT
    Then status 401
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'PUT'
    And match response.path == '#string'
    And match response.timestamp == '#string'

  Scenario: Edit test with empty test_id
    Given path '/test/'
    And request
      """
      {
        "ai_model_info": {
          "selected_model": "openai",
          "model": {}
        },
        "git_info": {
          "type": {},
          "source_repo_pr": true,
          "selected_path": "/src",
          "host_type": {},
          "source": {
            "access_token": "token",
            "selected_branch": "main",
            "repository_type": {},
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "target": {
            "access_token": "token",
            "selected_branch": "main",
            "selected_repo": {
              "key": "key",
              "title": "title",
              "id": "id",
              "owner": "owner",
              "default_branch": "main"
            }
          },
          "max_depth": 1
        },
        "integration_info": {
          "type": "none"
        },
        "additional_info": {
          "language": "javascript",
          "iterations": "5",
          "test_type": "unit",
          "user_language": "english",
          "log_type": "file",
          "log_file": {
            "file_content": "log",
            "file_name": "test.log",
            "file_path": "/logs/test.log"
          },
          "dependency_versions": {},
          "apiSpec": {
            "type": "openapi",
            "sourceType": "git",
            "url": ["https://api.example.com"],
            "gitpath": ["/api"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/api"]
            }
          },
          "screenshot": {
            "screenshotSourceType": "git",
            "screenshotUrl": ["https://example.com"],
            "screenshotGitpath": ["/screenshots"]
          },
          "behaviouralTest": {
            "type": "behavioral",
            "sourceType": "git",
            "url": ["https://example.com"],
            "gitpath": ["/tests"],
            "fileContent": [],
            "api_repo_info": {
              "repo_name": {
                "key": "key",
                "title": "title",
                "id": "id",
                "owner": "owner",
                "default_branch": "main"
              },
              "repo_branch": "main",
              "git_path": ["/tests"]
            }
          },
          "env_config": []
        },
        "test_timeout": 300,
        "trigger_events": ["push"],
        "test_framework": "jest",
        "git_type": "github",
        "source_repo": "test-repo",
        "source_branch": "main",
        "git_ops": false,
        "test_scope": {}
      }
      """
    When method PUT
    Then status 404
    And match response.code == '#number'
    And match response.message == '#string'
    And match response.method == 'PUT'
    And match response.path == '#string'
    And match response.timestamp == '#string'
