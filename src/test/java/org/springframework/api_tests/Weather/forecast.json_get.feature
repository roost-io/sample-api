# ********RoostGPT********

# Test generated by RoostGPT for test weatherTest using AI Type Claude AI and AI Model claude-3-5-sonnet-20241022
# 
# Feature file generated for /forecast.json_get for http method type GET 
# RoostTestHash=462421f697
# 
# 

# ********RoostGPT********
Feature: Weather Forecast API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * def authToken = karate.properties['key']
    * url urlBase
    * header Accept = 'application/json'

  Scenario Outline: Get weather forecast with valid parameters
    Given path '/v1/forecast.json'
    And param key = authToken
    And param q = '<location>'
    And param days = <days>
    When method GET
    Then status 200
    And match response.location == '#object'
    And match response.location.name == '#string'
    And match response.location.region == '#string'
    And match response.location.country == '#string'
    And match response.location.lat == '#number'
    And match response.location.lon == '#number'
    And match response.location.tz_id == '#string'
    And match response.location.localtime_epoch == '#number'
    And match response.location.localtime == '#string'
    And match response.current == '#object'
    And match response.current.last_updated_epoch == '#number'
    And match response.current.last_updated == '#string'
    And match response.current.temp_c == '#number'
    And match response.current.temp_f == '#number'
    And match response.current.is_day == '#number'
    And match response.current.condition == '#object'
    And match response.current.condition.text == '#string'
    And match response.current.condition.icon == '#string'
    And match response.current.condition.code == '#number'
    And match response.forecast == '#object'
    And match response.forecast.forecastday == '#[]'
    And match each response.forecast.forecastday[*].date == '#string'
    And match each response.forecast.forecastday[*].date_epoch == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_c == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_f == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_c == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_f == '#number'
    And match each response.forecast.forecastday[*].astro == '#object'
    And match each response.forecast.forecastday[*].hour == '#[]'

    Examples:
      | read('forecast.json_get.csv') |

  Scenario Outline: Get forecast with optional parameters
    Given path '/v1/forecast.json'
    And param key = authToken
    And param q = 'London'
    And param days = 3
    And param dt = '<date>'
    And param hour = <hour>
    And param alerts = '<alerts>'
    And param aqi = '<aqi>'
    When method GET
    Then status 200
    And match response.forecast.forecastday == '#[]'
    And match response.alerts == '##object'

    Examples:
      | read('forecast.json_get.csv') |

  Scenario: Invalid API key authentication
    Given path '/v1/forecast.json'
    And param key = 'invalid_key'
    And param q = 'London'
    And param days = 3
    When method GET
    Then status 401
    And match response.code == 2006
    And match response.message == '#string'

  Scenario: Missing required parameters
    Given path '/v1/forecast.json'
    And param key = authToken
    When method GET
    Then status 400
    And match response.code == 1003
    And match response.message == '#string'

  Scenario: Invalid location parameter
    Given path '/v1/forecast.json'
    And param key = authToken
    And param q = 'InvalidLocation123'
    And param days = 3
    When method GET
    Then status 400
    And match response.code == 1006
    And match response.message == '#string'
