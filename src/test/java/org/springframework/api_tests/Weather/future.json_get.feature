# ********RoostGPT********

# Test generated by RoostGPT for test weatherTest using AI Type Claude AI and AI Model claude-3-5-sonnet-20241022
# 
# Feature file generated for /future.json_get for http method type GET 
# RoostTestHash=f812784c59
# 
# 

# ********RoostGPT********
Feature: Future Weather API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * def authToken = karate.properties['key']
    * url urlBase
    * header Accept = 'application/json'

  Scenario Outline: Get future weather forecast with valid parameters
    Given path '/v1/future.json'
    And param key = authToken
    And param q = '<location>'
    And param dt = '<date>'
    And param lang = '<language>'
    When method GET
    Then status 200
    And match response.location == '#object'
    And match response.location.name == '#string'
    And match response.location.region == '#string'
    And match response.location.country == '#string'
    And match response.location.lat == '#number'
    And match response.location.lon == '#number'
    And match response.location.tz_id == '#string'
    And match response.location.localtime_epoch == '#number'
    And match response.location.localtime == '#string'
    And match response.forecast == '#object'
    And match response.forecast.forecastday == '#[1]'
    And match each response.forecast.forecastday[*].date == '#string'
    And match each response.forecast.forecastday[*].date_epoch == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_c == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_f == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_c == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_f == '#number'
    And match each response.forecast.forecastday[*].day.avgtemp_c == '#number'
    And match each response.forecast.forecastday[*].day.avgtemp_f == '#number'
    And match each response.forecast.forecastday[*].day.maxwind_mph == '#number'
    And match each response.forecast.forecastday[*].day.maxwind_kph == '#number'
    And match each response.forecast.forecastday[*].day.totalprecip_mm == '#number'
    And match each response.forecast.forecastday[*].day.totalprecip_in == '#number'
    And match each response.forecast.forecastday[*].day.avgvis_km == '#number'
    And match each response.forecast.forecastday[*].day.avgvis_miles == '#number'
    And match each response.forecast.forecastday[*].day.avghumidity == '#number'
    And match each response.forecast.forecastday[*].day.daily_will_it_rain == '#number'
    And match each response.forecast.forecastday[*].day.daily_chance_of_rain == '#number'
    And match each response.forecast.forecastday[*].day.daily_will_it_snow == '#number'
    And match each response.forecast.forecastday[*].day.daily_chance_of_snow == '#number'
    And match each response.forecast.forecastday[*].day.condition.text == '#string'
    And match each response.forecast.forecastday[*].day.condition.icon == '#string'
    And match each response.forecast.forecastday[*].day.condition.code == '#number'
    And match each response.forecast.forecastday[*].day.uv == '#number'
    And match each response.forecast.forecastday[*].astro.sunrise == '#string'
    And match each response.forecast.forecastday[*].astro.sunset == '#string'
    And match each response.forecast.forecastday[*].astro.moonrise == '#string'
    And match each response.forecast.forecastday[*].astro.moonset == '#string'
    And match each response.forecast.forecastday[*].astro.moon_phase == '#string'
    And match each response.forecast.forecastday[*].astro.moon_illumination == '#string'
    And match each response.forecast.forecastday[*].hour[*].time_epoch == '#number'
    And match each response.forecast.forecastday[*].hour[*].time == '#string'
    And match each response.forecast.forecastday[*].hour[*].temp_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].temp_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].is_day == '#number'
    And match each response.forecast.forecastday[*].hour[*].condition.text == '#string'
    And match each response.forecast.forecastday[*].hour[*].condition.icon == '#string'
    And match each response.forecast.forecastday[*].hour[*].condition.code == '#number'

    Examples:
      | read('future.json_get.csv') |

  Scenario: Get future weather forecast without location parameter
    Given path '/v1/future.json'
    And param key = authToken
    When method GET
    Then status 400
    And match response.code == 1003
    And match response.message == 'Parameter \'q\' not provided.'

  Scenario: Get future weather forecast with invalid API key
    Given path '/v1/future.json'
    And param key = 'invalid_key'
    And param q = 'London'
    When method GET
    Then status 401
    And match response.code == 2006
    And match response.message == 'API key provided is invalid'

  Scenario: Get future weather forecast with invalid location
    Given path '/v1/future.json'
    And param key = authToken
    And param q = 'InvalidLocation123'
    When method GET
    Then status 400
    And match response.code == 1006
    And match response.message == 'No location found matching parameter \'q\''
