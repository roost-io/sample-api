# ********RoostGPT********

# Test generated by RoostGPT for test circle-ci-akshat-1 using AI Type Azure Open AI and AI Model Inference
# 
# Feature file generated for /context/{context-id}/environment-variable/{env-var-name}_put for http method type PUT 
# RoostTestHash=a071a14843
# 
# 

# ********RoostGPT********
Feature: Add or update an environment variable within a context

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Accept: 'application/json', Authorization: 'Basic ' + karate.properties['AUTH_USERNAME'] + ':' + karate.properties['AUTH_PASSWORD'] }

  Scenario Outline: Add or update an environment variable
    * def contextId = <contextId>
    * def envVarName = <envVarName>
    * def requestBody = { value: <value> }
    * put '/context/{contextId}/environment-variable/{envVarName}' requestBody
    * status <expectedStatus>
    * def response = response
    * match response == <expectedResponse>

    Examples:
      | contextId                              | envVarName      | value               | expectedStatus | expectedResponse                                                                                                                |
      | '123e4567-e89b-12d3-a456-426614174000' | 'POSTGRES_USER' | 'some-secret-value' |            200 | { variable: 'POSTGRES_USER', created_at: '#string', updated_at: '#string', context_id: '123e4567-e89b-12d3-a456-426614174000' } |
      | '123e4567-e89b-12d3-a456-426614174000' | 'POSTGRES_USER' | 'some-secret-value' |            400 | { message: '#string' }                                                                                                          |

  Scenario Outline: Add or update an environment variable with invalid contextId
    * def contextId = <contextId>
    * def envVarName = <envVarName>
    * def requestBody = { value: <value> }
    * put '/context/{contextId}/environment-variable/{envVarName}' requestBody
    * status <expectedStatus>
    * def response = response
    * match response == <expectedResponse>

    Examples:
      | contextId      | envVarName      | value               | expectedStatus | expectedResponse       |
      | 'invalid-uuid' | 'POSTGRES_USER' | 'some-secret-value' |            400 | { message: '#string' } |

  Scenario Outline: Add or update an environment variable with invalid envVarName
    * def contextId = <contextId>
    * def envVarName = <envVarName>
    * def requestBody = { value: <value> }
    * put '/context/{contextId}/environment-variable/{envVarName}' requestBody
    * status <expectedStatus>
    * def response = response
    * match response == <expectedResponse>

    Examples:
      | contextId                              | envVarName    | value               | expectedStatus | expectedResponse       |
      | '123e4567-e89b-12d3-a456-426614174000' | 'INVALID_VAR' | 'some-secret-value' |            400 | { message: '#string' } |

  Scenario Outline: Add or update an environment variable with invalid value
    * def contextId = <contextId>
    * def envVarName = <envVarName>
    * def requestBody = { value: <value> }
    * put '/context/{contextId}/environment-variable/{envVarName}' requestBody
    * status <expectedStatus>
    * def response = response
    * match response == <expectedResponse>

    Examples:
      | contextId                              | envVarName      | value | expectedStatus | expectedResponse       |
      | '123e4567-e89b-12d3-a456-426614174000' | 'POSTGRES_USER' | null  |            400 | { message: '#string' } |
