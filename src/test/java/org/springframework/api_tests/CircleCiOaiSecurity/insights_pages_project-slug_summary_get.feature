# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-karate-circleci-OAI-security using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /insights/pages/{project-slug}/summary_get for http method type GET 
# RoostTestHash=d36b00fabb
# 
# 

# ********RoostGPT********
Feature: Insights API - Get Project Summary Metrics and Trends

  Background:
    * def urlBase = karate.properties['API_HOST_URL']
    * url urlBase
    * def authToken = karate.properties['circle-token']

  Scenario Outline: Validate Get Project Summary API with Different Reporting Windows
    Given path 'insights/pages/<project-slug>/summary'
    And param circle-token = authToken
    And param 'reporting-window' = '<reporting-window>'
    When method GET
    Then status '<expected_status>'
    And match response.org_id == '#string'
    And match response.project_id == '#string'
    And match response.project_data.metrics.total_runs == '#number'
    And match response.project_data.metrics.total_duration_secs == '#number'
    And match response.project_data.metrics.total_credits_used == '#number'
    And match response.project_data.metrics.success_rate == '#number'
    And match response.project_data.metrics.throughput == '#number'
    And match response.project_data.trends.total_runs == '#number'
    And match response.project_data.trends.total_duration_secs == '#number'
    And match response.project_data.trends.total_credits_used == '#number'
    And match response.project_data.trends.success_rate == '#number'
    And match response.project_data.trends.throughput == '#number'
    And match each response.project_workflow_data[*].workflow_name == '#string'
    And match each response.project_workflow_data[*].metrics.total_credits_used == '#number'
    And match each response.project_workflow_data[*].metrics.p95_duration_secs == '#number'
    And match each response.project_workflow_data[*].metrics.total_runs == '#number'
    And match each response.project_workflow_data[*].metrics.success_rate == '#number'
    And match each response.project_workflow_data[*].trends.total_credits_used == '#number'
    And match each response.project_workflow_data[*].trends.p95_duration_secs == '#number'
    And match each response.project_workflow_data[*].trends.total_runs == '#number'
    And match each response.project_workflow_data[*].trends.success_rate == '#number'
    And match each response.project_workflow_branch_data[*].workflow_name == '#string'
    And match each response.project_workflow_branch_data[*].branch == '#string'
    And match each response.project_workflow_branch_data[*].metrics.total_credits_used == '#number'
    And match each response.project_workflow_branch_data[*].metrics.p95_duration_secs == '#number'
    And match each response.project_workflow_branch_data[*].metrics.total_runs == '#number'
    And match each response.project_workflow_branch_data[*].metrics.success_rate == '#number'
    And match each response.project_workflow_branch_data[*].trends.total_credits_used == '#number'
    And match each response.project_workflow_branch_data[*].trends.p95_duration_secs == '#number'
    And match each response.project_workflow_branch_data[*].trends.total_runs == '#number'
    And match each response.project_workflow_branch_data[*].trends.success_rate == '#number'
    And match response.all_branches == '#[]string'
    And match response.all_workflows == '#[]string'

    Examples:
      | project-slug                          | reporting-window | expected_status |
      | 'gh/CircleCI-Public/api-preview-docs' | 'last-90-days'   |             200 |
      | 'gh/CircleCI-Public/api-preview-docs' | 'last-30-days'   |             200 |
      | 'gh/CircleCI-Public/api-preview-docs' | ''               |             200 |

  Scenario Outline: Validate Get Project Summary API with Branch Filters
    Given path 'insights/pages/<project-slug>/summary'
    And param circle-token = authToken
    And param branches = <branches>
    When method GET
    Then status '<expected_status>'
    And match response.project_workflow_branch_data CONTAINS { branch: '<branch>' }

    Examples:
      | project-slug                          | branches                   | branch    | expected_status |
      | 'gh/CircleCI-Public/api-preview-docs' | ['main', 'feature', 'dev'] | 'main'    |             200 |
      | 'gh/CircleCI-Public/api-preview-docs' | ['feature']                | 'feature' |             200 |

  Scenario Outline: Validate Get Project Summary API with Workflow Filters
    Given path 'insights/pages/<project-slug>/summary'
    And param circle-token = authToken
    And param 'workflow-names' = <workflow-names>
    When method GET
    Then status '<expected_status>'
    And match response.project_workflow_data CONTAINS { workflow_name: '<workflow_name>' }

    Examples:
      | project-slug                          | workflow-names      | workflow_name     | expected_status |
      | 'gh/CircleCI-Public/api-preview-docs' | ['build', 'deploy'] | 'build'           |             200 |
      | 'gh/CircleCI-Public/api-preview-docs' | ['test-and-deploy'] | 'test-and-deploy' |             200 |

  Scenario: Validate Default Error Response for Invalid Project Slug
    Given path 'insights/pages/gh/CircleCI-Public/non-existent-slug/summary'
    And param circle-token = authToken
    When method GET
    Then status 404
    And match response.message == '#string'
