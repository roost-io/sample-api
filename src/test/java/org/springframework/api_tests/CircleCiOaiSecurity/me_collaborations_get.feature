# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-karate-circleci-OAI-security using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /me/collaborations_get for http method type GET 
# RoostTestHash=ff854080c5
# 
# 

# ********RoostGPT********
Feature: Test Collaborations API Endpoints

  Background:
    * def urlBase = karate.properties['API_HOST']

  Scenario: Test Collaborations API with Basic Auth Authorization
    * def username = karate.properties['AUTH_USERNAME']
    * def password = karate.properties['AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Accept: 'application/json', Authorization: '#(authHeader)' }
    Given url urlBase
    And path 'me/collaborations'
    When method GET
    Then match response.status == 200
    And match response == '#[] Collaboration'
    And match each response[*].id == '#? _ == null || _ matches "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})$"'
    And match each response[*].vcs-type == '#string'
    And match each response[*].name == '#string'
    And match each response[*].avatar_url == '#string'
    And match each response[*].slug == '#string'

  Scenario Outline: Test Collaborations API with Circle-Token in Header
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Accept: 'application/json', Circle-Token: '#(authToken)' }
    Given url urlBase
    And path 'me/collaborations'
    When method GET
    Then match response.status == 200
    And match response == '#[] Collaboration'
    And match each response[*].id == '#? _ == null || _ matches "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})$"'
    And match each response[*].vcs-type == '#string'
    And match each response[*].name == '#string'
    And match each response[*].avatar_url == '#string'
    And match each response[*].slug == '#string'

  Scenario Outline: Test Collaborations API with Circle-Token in Query Parameters
    * def authToken = karate.properties['circle-token']
    Given url urlBase
    And path 'me/collaborations'
    And param circle-token = authToken
    When method GET
    Then match response.status == 200
    And match response == '#[] Collaboration'
    And match each response[*].id == '#? _ == null || _ matches "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})$"'
    And match each response[*].vcs-type == '#string'
    And match each response[*].name == '#string'
    And match each response[*].avatar_url == '#string'
    And match each response[*].slug == '#string'

  Scenario: Test Collaborations API with Error Response
    * def username = karate.properties['AUTH_USERNAME']
    * def password = karate.properties['AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Accept: 'application/json', Authorization: '#(authHeader)' }
    Given url urlBase
    And path 'me/collaborations'
    And param invalid_param = 'invalid_value'
    When method GET
    Then assert responseStatus != 200
    And match response.message == '#string'
