
// ********RoostGPT********
/*

# Test generated by RoostGPT for test api-testing-karate-circleci-OAI-security using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /context_get for http method type GET 
# RoostTestHash=69c32ff4fa
# 
# 

roost_feedback [09/07/2025, 6:35:17 AM]:-\sFormat\sthe\stest\n-\sImprove\sassertions\n-\sAdd\smore\scomments\sto\sthe\stest
*/

// ********RoostGPT********

Feature: CircleCI API Testing - /context Endpoint

Background:
    * def urlBase = karate.properties['api_base_url']
    * url urlBase
    * configure headers = { Authorization: karate.properties['Circle-Token'] }

Scenario Outline: List contexts with valid combinations of query parameters and verify response
    Given path '/context'
    And param owner-id = '<ownerId>'
    And param owner-slug = '<ownerSlug>'
    And param owner-type = '<ownerType>'
    And param page-token = '<pageToken>'
    When method GET
    Then status 200
    And match response.items == '#array'
    And match response.items.length > 0
    And match each response.items[*].id == '#string'
    And match each response.items[*].name != null
    And match each response.items[*].created_at == '#string'
    And match response.next_page_token == '#? _ == null || typeof _ == "string"'

    Examples:
      | read('context_get.csv') |

Scenario Outline: Handle invalid combinations of query parameters
    Given path '/context'
    And param owner-id = '<ownerId>'
    And param owner-slug = '<ownerSlug>'
    And param owner-type = '<ownerType>'
    And param page-token = '<pageToken>'
    When method GET
    Then status <statusCode>
    And match response.message == '#string'
    And match response.message.length > 0

    Examples:
      | ownerId        | ownerSlug      | ownerType | pageToken | statusCode |
      | 'invalid-uuid' | null           | null      | null      |        400 |
      | null           | 'unknown-slug' | null      | null      |        404 |

Scenario: Validate error responses with missing authorization
    Given path '/context'
    And param owner-id = 'c65b68ef-e73b-4bf2-be9a-7a322a9df150'
    When method GET
    Then status 401
    And match response.error == '#string'
    And match response.error.length > 0

Scenario Outline: Test paginated responses
    Given path '/context'
    And param owner-id = 'c65b68ef-e73b-4bf2-be9a-7a322a9df150'
    And param page-token = '<pageToken>'
    When method GET
    Then status 200
    And match response.items == '#array'
    And match response.items.length > 0
    And match each response.items[*].id == '#string'
    And match each response.items[*].name != null
    And match each response.items[*].created_at == '#string'
    And match response.next_page_token == '#? _ == null || typeof _ == "string"'

    Examples:
      | read('context_get.csv') |

Scenario: Verify unexpected server error response
    Given path '/context'
    And param owner-id = 'invalid-data-to-trigger-error'
    When method GET
    Then status 500
    And match response.error == '#string'
    And match response.error.length > 0
