# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-karate-circleci-OAI-security using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: User Information Endpoint Testing

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Accept: 'application/json' }

  Scenario: Validate User Information with API Key authorization
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)' }
    Given path 'me'
    When method GET
    Then status 200
    And assert karate.sizeOf(response) >= 3
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario: Validate User Information with HTTP Basic authentication
    * def username = karate.properties['AUTH_USERNAME']
    * def password = karate.properties['AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)' }
    Given path 'me'
    When method GET
    Then status 200
    And assert karate.sizeOf(response) >= 3
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario Outline: Validate User Information with API Key in query parameter
    * def authToken = karate.properties['circle-token']
    Given path 'me'
    And param circle-token = authToken
    When method GET
    Then status 200
    And assert karate.sizeOf(response) >= 3
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario: Validate Error Response
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)' }
    Given path 'invalid_path'
    When method GET
    Then assert responseStatus != 200
    And match response.message == '#string'
