# ********RoostGPT********

# Test generated by RoostGPT for test api-testing-karate-circleci-OAI-security using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /context/{context-id}_get for http method type GET 
# RoostTestHash=d311758cf3
# 
# 

# ********RoostGPT********
Feature: Validations for the Context API endpoint

  Background:
    * def urlBase = karate.properties['API_HOST_URL']
    * url urlBase

  Scenario Outline: Validate GET /context/{context-id} endpoint with valid inputs
    Given path 'context', <context-id>
    And param circle-token = karate.properties['circle-token']
    When method GET
    Then status <expectedStatusCode>
    And match response.id == '##string'
    And match response.name == '##string'
    And match response.created_at == '##string'
    And match response.created_at == '#regex ^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$'

    Examples:
      | context-id                             | expectedStatusCode |
      | '123e4567-e89b-12d3-a456-426614174000' |                200 |
      | 'not-valid-context-id'                 |                404 |

  Scenario Outline: Validate GET /context/{context-id} with invalid inputs
    Given path 'context', <context-id>
    And param circle-token = karate.properties['circle-token']
    When method GET
    Then status <expectedStatusCode>
    And match response.message == '##string'

    Examples:
      | context-id                         | expectedStatusCode |
      | '123e4567-e89b-12d3-a456-notvalid' |                404 |
      | 'nonexistent-context-id'           |                404 |

  Scenario: Validate response headers for GET /context/{context-id}
    Given path 'context', '123e4567-e89b-12d3-a456-426614174000'
    And param circle-token = karate.properties['circle-token']
    When method GET
    Then status 200
    And match responseHeaders['Content-Type'] == '#string'
    And match responseHeaders['Content-Type'] contains 'application/json'
