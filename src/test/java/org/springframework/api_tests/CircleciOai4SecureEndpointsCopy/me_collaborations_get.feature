# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-circleci using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /me/collaborations_get for http method type GET 
# RoostTestHash=ff854080c5
# 
# 

# ********RoostGPT********
Feature: Collaborations API Tests

  Background:
    * def urlBase = karate.properties['API_HOST_URL']
    * url urlBase

  Scenario: Get Collaborations using API Key Authorization
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)' }
    Given path '/me/collaborations'
    When method GET
    Then status 200
    And match response == '#[]'  # Assert response is an array
    And match each response[*].id == '#string'
    And match each response[*].id == '#regex [0-9a-fA-F\-]{36}'  # Check UUID format
    And match each response[*].vcs-type == '#string'
    And match each response[*].name == '#string'
    And match each response[*].avatar_url == '#string'
    And match each response[*].avatar_url contains 'http'
    And match each response[*].slug == '#string'

  Scenario: Get Collaborations using Basic Authorization
    * def username = karate.properties['API_AUTH_USERNAME']
    * def password = karate.properties['API_AUTH_PASSWORD']
    * def credentials = username + ':' + password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)' }
    Given path '/me/collaborations'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '#string'
    And match each response[*].id == '#regex [0-9a-fA-F\-]{36}'
    And match each response[*].vcs-type == '#string'
    And match each response[*].name == '#string'
    And match each response[*].avatar_url == '#string'
    And match each response[*].avatar_url contains 'http'
    And match each response[*].slug == '#string'

  Scenario Outline: Get Collaborations using Query Parameter Authorization
    * def authToken = karate.properties['circle-token']
    Given path '/me/collaborations'
    And param circle-token = authToken
    When method GET
    Then status <status_code>
    And match response <response_validation>

    Examples:
      | status_code | response_validation      |
      |         200 | '#[]'                    |
      | default     | '{"message": "#string"}' |

  Scenario: Get Collaborations Unauthorized Access
    Given path '/me/collaborations'
    When method GET
    Then assert responseStatus != 200
    And match response.message == '#string'
