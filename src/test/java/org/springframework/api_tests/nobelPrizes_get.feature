# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Nobel Prize API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario Outline: Get Nobel Prizes with various parameters
    Given path '/2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>  
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 200
    And match response == 
    """
    {
      "nobelPrizes": "#array",
      "meta": {
        "offset": "#number",
        "limit": "#number",
        "nobelPrizeYear": "#number",
        "yearTo": "#number", 
        "nobelPrizeCategory": "#string",
        "count": "#number"
      },
      "links": "#array"
    }
    """
    And match each response.nobelPrizes contains
    """
      {
        "awardYear": "#number",
        "category": {
          "en": "#string",
          "se": "#string",
          "false": "#string"  
        },
        "categoryFullName": {
          "en": "#string",
          "se": "#string",
          "false": "#string"
        },
        "dateAwarded": "#? _ == null || /\\d{4}-\\d{2}-\\d{2}/.test(_)",
        "prizeAmount": "#number",
        "prizeAmountAdjusted": "#number",
        "topMotivation": {
          "en": "##string",
          "se": "##string",
          "false": "##string"
        },
        "laureates": "#array"
      }
    """
    And match each response.nobelPrizes[*].laureates contains
    """
      {
        "id": "#number",
        "name": {
          "en": "#string",
          "se": "#string",
          "false": "#string"
        },
        "portion": "#string",
        "sortOrder": "#string",
        "motivation": {
          "en": "#string",
          "se": "#string",
          "false": "#string"  
        },
        "links": "#array"
      }
    """

    Examples:
      | offset | limit | sort | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
      | 1      | 10    | asc  | 1901           | 1910   | che                | json   | en      |
      | 5      | 20    | desc | 1950           | 1960   | phy                | csv    | se      |

Scenario: Get Nobel Prizes with invalid parameters
    Given path '/2.1/nobelPrizes'
    And param offset = 0
    And param limit = 500
    When method GET
    Then status 400
    And match response == 
    """
    {
      "code": "#string",
      "message": "#string"
    }
    """ 

Scenario: Get Nobel Prizes with non-existent year
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 1800
    When method GET
    Then status 404
    And match response ==
    """
    {
      "code": "#string",
      "message": "#string"
    }
    """

Scenario: Get Nobel Prizes with invalid category
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeCategory = 'invalid'
    When method GET 
    Then status 422
    And match response ==
    """
    {
      "code": "#string",
      "message": "#string"  
    }
    """
