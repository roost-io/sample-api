# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { 'Authorization': '#(authToken)' }

  Scenario: Get all Nobel Prizes
    Given path '/2.1/nobelPrizes'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[_ >= 0]'
    And match each response.nobelPrizes contains
      """
      {
        awardYear: '#number',
        category: '#object',
        categoryFullName: '#object',
        dateAwarded: '#string',
        prizeAmount: '#number',
        prizeAmountAdjusted: '#number',
        topMotivation: '#object',
        laureates: '#array'
      }
      """
    And match response.meta contains
      """
      {
        offset: '#number',
        limit: '#number',
        count: '#number'
      }
      """
    And match response.links == '#array'

  Scenario: Get Nobel Prizes with pagination
    Given path '/2.1/nobelPrizes'
    And param offset = 10
    And param limit = 5
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[5]'
    And match response.meta contains
      """
      {
        offset: 10,
        limit: 5,
        count: '#number'
      }
      """

  Scenario: Get Nobel Prizes sorted in descending order
    Given path '/2.1/nobelPrizes'
    And param sort = 'desc'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[_ >= 0]'
    And match response.nobelPrizes[0].awardYear > response.nobelPrizes[1].awardYear

  Scenario: Get Nobel Prizes for a specific year
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 2020
    When method GET
    Then status 200
    And match each response.nobelPrizes contains { awardYear: 2020 }

  Scenario: Get Nobel Prizes for a range of years
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 2015
    And param yearTo = 2020
    When method GET
    Then status 200
    And match each response.nobelPrizes contains
      """
      {
        awardYear: '#? _ >= 2015 && _ <= 2020'
      }
      """

  Scenario: Get Nobel Prizes for a specific category
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeCategory = 'phy'
    When method GET
    Then status 200
    And match each response.nobelPrizes contains
      """
      {
        category: { en: 'Physics' }
      }
      """

  Scenario: Get Nobel Prizes in CSV format
    Given path '/2.1/nobelPrizes'
    And param format = 'csv'
    When method GET
    Then status 200
    And match responseType == 'text/csv'

  Scenario: Get Nobel Prizes in CSV format with specified language
    Given path '/2.1/nobelPrizes'
    And param format = 'csv'
    And param csvLang = 'se'
    When method GET
    Then status 200
    And match responseType == 'text/csv'

  Scenario: Get Nobel Prizes with invalid year
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 1800
    When method GET
    Then status 400
    And match response contains
      """
      {
        code: '#string',
        message: '#string'
      }
      """

  Scenario: Get Nobel Prizes with invalid category
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeCategory = 'invalid'
    When method GET
    Then status 400
    And match response contains
      """
      {
        code: '#string',
        message: '#string'
      }
      """
