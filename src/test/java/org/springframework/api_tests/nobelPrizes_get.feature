# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Nobel Prize API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Get all Nobel Prizes
  Given path '/2.1/nobelPrizes'
  When method GET
  Then status 200
  And match header Content-Type == 'application/json'
  And match response.nobelPrizes == '#array'
  And match each response.nobelPrizes contains {awardYear: '#number', category: '#object', categoryFullName: '#object', dateAwarded: '#string', prizeAmount: '#number', prizeAmountAdjusted: '#number', topMotivation: '#object', laureates: '#array'}
  And match response.meta == '#object'
  And match response.links == '#array'

Scenario: Get Nobel Prizes with query parameters
  Given path '/2.1/nobelPrizes'
  And param offset = 1
  And param limit = 10  
  And param sort = 'desc'
  And param nobelPrizeYear = 2020
  And param yearTo = 2022
  And param nobelPrizeCategory = 'phy'
  And param format = 'json'
  And param csvLang = 'en'
  When method GET
  Then status 200
  And match header Content-Type == 'application/json'
  And match response.nobelPrizes == '#array'
  And match each response.nobelPrizes contains {awardYear: '#? _ >= 2020 && _ <= 2022', category: '#object', categoryFullName: '#object', dateAwarded: '#string', prizeAmount: '#number', prizeAmountAdjusted: '#number', topMotivation: '#object', laureates: '#array'}
  And match response.meta == '#object'
  And match response.links == '#array'

Scenario: Get Nobel Prizes with invalid query parameters
  Given path '/2.1/nobelPrizes'
  And param offset = 'invalid'
  When method GET
  Then status 400
  And match header Content-Type == 'application/json'
  And match response.code == '404'
  And match response.message == '#string'

Scenario: Get non-existent Nobel Prize
  Given path '/2.1/nobelPrizes'
  And param nobelPrizeYear = 1800
  When method GET
  Then status 404
  And match header Content-Type == 'application/json' 
  And match response.code == '404'
  And match response.message == 'There is not Laureate born that date'

Scenario: Get Nobel Prizes with semantic errors
  Given path '/2.1/nobelPrizes'
  And param nobelPrizeYear = 2025
  When method GET
  Then status 422
  And match header Content-Type == 'application/json'
  And match response.code == '404'
  And match response.message == 'There is not Laureate born that date'
