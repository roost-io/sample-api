# ********RoostGPT********

# Test generated by RoostGPT for test slackApi using AI Type Azure Open AI and AI Model gpt-4o
# 
# Feature file generated for /team.info_get for http method type GET 
# RoostTestHash=1bd66c1412
# 
# 

# ********RoostGPT********
Feature: team.info API Tests
  Description: Tests for the /api/team.info endpoint to validate various request and response scenarios.

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Fetch team information with valid parameters
    Given path '/api/team.info'
    And param token = '<token>'
    And param team = '<team>'
    When method GET
    Then status 200
    And match response.ok == true
    And match response.team.id == '#regex ^[TE][A-Z0-9]{8,}$'
    And match response.team.name == '#string'
    And match response.team.domain == '#string'
    And match response.team.email_domain == '#string'
    And match response.team.icon.image_102 == '#string'
    And match response.team.icon.image_132 == '#string'
    And match response.team.icon.image_34 == '#string'
    And match response.team.icon.image_44 == '#string'
    And match response.team.icon.image_68 == '#string'
    And match response.team.icon.image_88 == '#string'
    And match response.team.icon.image_default == '#boolean'

    Examples:
      | read('team.info_get.csv') |

  Scenario Outline: Fetch team information with missing token
    Given path '/api/team.info'
    And param team = '<team>'
    When method GET
    Then status 401
    And match response.ok == false
    And match response.error == '#string'

    Examples:
      | team     |
      | null     |
      | 'T67890' |

  Scenario Outline: Fetch team information with invalid token
    Given path '/api/team.info'
    And param token = '<token>'
    And param team = '<team>'
    When method GET
    Then status 401
    And match response.ok == false
    And match response.error == '#string'

    Examples:
      | token           | team     |
      | 'invalid_token' | null     |
      | 'invalid_token' | 'T67890' |

  Scenario Outline: Fetch team information for a team not accessible by the token
    Given path '/api/team.info'
    And param token = '<token>'
    And param team = '<team>'
    When method GET
    Then status 403
    And match response.ok == false
    And match response.error == 'team_not_accessible'

    Examples:
      | token              | team     |
      | 'valid_auth_token' | 'T99999' |

  Scenario: Fetch team information with default team ID when team param is omitted
    Given path '/api/team.info'
    And param token = 'valid_auth_token'
    When method GET
    Then status 200
    And match response.ok == true
    And match response.team.id == '#regex ^[TE][A-Z0-9]{8,}$'
    And match response.team.name == '#string'
    And match response.team.domain == '#string'
    And match response.team.email_domain == '#string'
    And match response.team.icon.image_102 == '#string'
    And match response.team.icon.image_132 == '#string'
    And match response.team.icon.image_34 == '#string'
    And match response.team.icon.image_44 == '#string'
    And match response.team.icon.image_68 == '#string'
    And match response.team.icon.image_88 == '#string'
    And match response.team.icon.image_default == '#boolean'

  Scenario: Validate error response for unexpected query parameter
    Given path '/api/team.info'
    And param token = 'valid_auth_token'
    And param unknown_param = 'unknown_value'
    When method GET
    Then status 400
    And match response.ok == false
    And match response.error == 'unknown_error'
