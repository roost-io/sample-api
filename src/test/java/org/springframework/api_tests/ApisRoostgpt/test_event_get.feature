# ********RoostGPT********

# Test generated by RoostGPT for test roostgpt-apispec using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /test/event_get for http method type GET 
# RoostTestHash=262d1b24da
# 
# 

# ********RoostGPT********
Feature: Test Event API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = 'Bearer ' + karate.properties['BEARER_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Get all events with various parameters
    Given path '/test/event'
    And param api_id = '<api_id>'
    And param searchTerm = '<searchTerm>'
    And param isCaseSensitive = '<isCaseSensitive>'
    And param isWholeWord = '<isWholeWord>'
    And param take = '<take>'
    And param skip = '<skip>'
    And param test_id = '<test_id>'
    And param status_filter = <status_filter>
    And param test_type_filter = <test_type_filter>
    And param event_type_filter = <event_type_filter>
    And param order_by = '<order_by>'
    And param time_filter = '<time_filter>'
    And param label_filter = <label_filter>
    And param show_my_events = '<show_my_events>'
    When method GET
    Then status 200
    And match response == '#object'

    Examples:
      | read('test_event_get.csv') |

  Scenario: Get all events with only required parameter
    Given path '/test/event'
    And param api_id = 'required123'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with all status filters
    Given path '/test/event'
    And param api_id = 'status_test'
    And param status_filter = ['installing_dependencies','in_progress','failed','aborted','timeout','completed','in_queue','aborting']
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with all test type filters
    Given path '/test/event'
    And param api_id = 'test_type_test'
    And param test_type_filter = ['unit','functional','artillery','artillery-api-spec','integration','api-spec-test','ui-test','grpc']
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with all event type filters
    Given path '/test/event'
    And param api_id = 'event_type_test'
    And param event_type_filter = ['analyze','generate','retrigger','improve','support']
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with all order by options
    Given path '/test/event'
    And param api_id = 'order_test'
    And param order_by = 'modification_time'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with all time filter options
    Given path '/test/event'
    And param api_id = 'time_test'
    And param time_filter = 'Last-30Days'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Get all events with minimum search term length
    Given path '/test/event'
    And param api_id = 'search_test'
    And param searchTerm = 'abc'
    When method GET
    Then status 200
    And match response == '#object'

  Scenario: Test error response for missing required parameter
    Given path '/test/event'
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.timestamp == '#string'
    And match response.path == '#string'
    And match response.method == '#string'
    And match response.message == '#string'

  Scenario: Test error response for invalid api_id length
    Given path '/test/event'
    And param api_id = 'ab'
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.timestamp == '#string'
    And match response.path == '#string'
    And match response.method == '#string'
    And match response.message == '#string'

  Scenario: Test error response for invalid searchTerm length
    Given path '/test/event'
    And param api_id = 'valid123'
    And param searchTerm = 'ab'
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.timestamp == '#string'
    And match response.path == '#string'
    And match response.method == '#string'
    And match response.message == '#string'

  Scenario: Test error response validation
    Given path '/test/event'
    And param api_id = 'error_test'
    And param isCaseSensitive = 'invalid'
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.timestamp == '#string'
    And match response.path == '#string'
    And match response.method == '#string'
    And match response.message == '#string'
    And match response.method == '#? _ == "GET" || _ == "DELETE" || _ == "HEAD" || _ == "OPTIONS" || _ == "POST" || _ == "PUT" || _ == "PATCH" || _ == "PURGE" || _ == "LINK" || _ == "UNLINK"'
