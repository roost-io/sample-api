# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Test /2.1/laureates API Endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties['AUTH_TOKEN'])' }

  Scenario: Get all laureates with default parameters
    Given path '/2.1/laureates'
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match response.meta == '#object'
    And match response.links == '#array'

  Scenario: Get laureates with specific ID
    Given path '/2.1/laureates'
    And param ID = 123
    When method GET
    Then status 200
    And match response.laureates[0].id == 123

  Scenario: Get laureates with name filter
    Given path '/2.1/laureates'
    And param name = 'John Doe'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.knownName.en contains 'John Doe'

  Scenario: Get laureates with gender filter
    Given path '/2.1/laureates'
    And param gender = 'female'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.gender == 'female'

  Scenario: Get laureates with motivation filter
    Given path '/2.1/laureates'
    And param motivation = 'peace'
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes[*].motivation.en contains 'peace'

  Scenario: Get laureates with affiliation filter
    Given path '/2.1/laureates'
    And param affiliation = 'University'
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes[*].affiliations[*].name.en contains 'University'

  Scenario: Get laureates with birthDate filter
    Given path '/2.1/laureates'
    And param birthDate = '1950-01-01'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.birth.date == '1950-01-01'

  Scenario: Get laureates with birthDate range filter
    Given path '/2.1/laureates'
    And param birthDate = '1950-01-01'
    And param birthDateTo = '1960-12-31'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.birth.date == '#? _ >= "1950-01-01" && _ <= "1960-12-31"'

  Scenario: Get laureates with deathDate filter
    Given path '/2.1/laureates'
    And param deathDate = '2000-01-01'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.death.date == '2000-01-01'

  Scenario: Get laureates with deathDate range filter
    Given path '/2.1/laureates'
    And param deathDate = '2000-01-01'
    And param deathDateTo = '2010-12-31'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.death.date == '#? _ >= "2000-01-01" && _ <= "2010-12-31"'

  Scenario: Get laureates with foundedDate filter
    Given path '/2.1/laureates'
    And param foundedDate = '1900-01-01'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.founded.date == '1900-01-01'

  Scenario: Get laureates with birthCity filter
    Given path '/2.1/laureates'
    And param birthCity = 'New York'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.birth.place.city.en == 'New York'

  Scenario: Get laureates with birthCountry filter
    Given path '/2.1/laureates'
    And param birthCountry = 'USA'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.birth.place.country.en == 'USA'

  Scenario: Get laureates with birthContinent filter
    Given path '/2.1/laureates'
    And param birthContinent = 'North America'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.birth.place.continent.en == 'North America'

  Scenario: Get laureates with deathCity filter
    Given path '/2.1/laureates'
    And param deathCity = 'Paris'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.death.place.city.en == 'Paris'

  Scenario: Get laureates with deathCountry filter
    Given path '/2.1/laureates'
    And param deathCountry = 'France'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.death.place.country.en == 'France'

  Scenario: Get laureates with deathContinent filter
    Given path '/2.1/laureates'
    And param deathContinent = 'Europe'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfPerson.death.place.continent.en == 'Europe'

  Scenario: Get laureates with foundedCity filter
    Given path '/2.1/laureates'
    And param foundedCity = 'London'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.founded.place.city.en == 'London'

  Scenario: Get laureates with foundedCountry filter
    Given path '/2.1/laureates'
    And param foundedCountry = 'UK'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.founded.place.country.en == 'UK'

  Scenario: Get laureates with foundedContinent filter
    Given path '/2.1/laureates'
    And param foundedContinent = 'Europe'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.founded.place.continent.en == 'Europe'

  Scenario: Get laureates with headquartersCity filter
    Given path '/2.1/laureates'
    And param headquartersCity = 'Berlin'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.headquarters.city.en == 'Berlin'

  Scenario: Get laureates with headquartersCountry filter
    Given path '/2.1/laureates'
    And param headquartersCountry = 'Germany'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.headquarters.country.en == 'Germany'

  Scenario: Get laureates with headquartersContinent filter
    Given path '/2.1/laureates'
    And param headquartersContinent = 'Europe'
    When method GET
    Then status 200
    And match each response.laureates[*].laureateIfOrg.headquarters.continent.en == 'Europe'

  Scenario: Get laureates with nobelPrizeYear filter
    Given path '/2.1/laureates'
    And param nobelPrizeYear = 2000
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes[*].awardYear == 2000

  Scenario: Get laureates with nobelPrizeYear range filter
    Given path '/2.1/laureates'
    And param nobelPrizeYear = 2000
    And param yearTo = 2010
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes[*].awardYear == '#? _ >= 2000 && _ <= 2010'

  Scenario: Get laureates with nobelPrizeCategory filter
    Given path '/2.1/laureates'
    And param nobelPrizeCategory = 'phy'
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes[*].category.en == 'Physics'

  Scenario: Get laureates with CSV format
    Given path '/2.1/laureates'
    And param format = 'csv'
    When method GET
    Then status 200
    And match header Content-Type contains 'text/csv'

  Scenario: Get laureates with CSV format and language
    Given path '/2.1/laureates'
    And param format = 'csv'
    And param csvLang = 'se'
    When method GET
    Then status 200
    And match header Content-Type contains 'text/csv'

  Scenario: Get laureates with invalid ID
    Given path '/2.1/laureates'
    And param ID = 'invalid'
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message contains 'invalid'

  Scenario: Get laureates with non-existent ID
    Given path '/2.1/laureates'
    And param ID = 999999
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message contains 'not found'
