# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario Outline: Get Laureates with valid parameters
  Given path '/2.1/laureates'
  And params { offset: '<offset>', limit: '<limit>', sort: '<sort>', ID: '<ID>', name: '<name>', gender: '<gender>', motivation: '<motivation>', affiliation: '<affiliation>', residence: '<residence>', birthDate: '<birthDate>', birthDateTo: '<birthDateTo>', deathDate: '<deathDate>', deathDateTo: '<deathDateTo>', foundedDate: '<foundedDate>', birthCity: '<birthCity>', birthCountry: '<birthCountry>', birthContinent: '<birthContinent>', deathCity: '<deathCity>', deathCountry: '<deathCountry>', deathContinent: '<deathContinent>', foundedCity: '<foundedCity>', foundedCountry: '<foundedCountry>', foundedContinent: '<foundedContinent>', HeadquartersCity: '<HeadquartersCity>', HeadquartersCountry: '<HeadquartersCountry>', HeadquartersContinent: '<HeadquartersContinent>', nobelPrizeYear: '<nobelPrizeYear>', yearTo: '<yearTo>', nobelPrizeCategory: '<nobelPrizeCategory>', format: '<format>', csvLang: '<csvLang>' }
  When method GET
  Then status 200
  And match response == { laureates: '#array', meta: '#object', links: '#array' }
  And match each response.laureates contains { id: '#number', laureateIfPerson: '##object', laureateIfOrg: '##object', nobelPrizes: '#array' }
  And match response.meta contains { offset: '#number', limit: '#number', sort: '#string', ID: '#number', name: '#string', gender: '#string', motivation: '#string', affiliation: '#string', residence: '#string', birthDate: '#string', birthDateTo: '#string', deathDate: '#string', deathDateTo: '#string', foundedDate: '#string', birthCity: '#string', birthCountry: '#string', birthContinent: '#string', deathCity: '#string', deathCountry: '#string', deathContinent: '#string', foundedCity: '#string', foundedCountry: '#string', foundedContinent: '#string', headquartersCity: '#string', headquartersCountry: '#string', headquartersContinent: '#string', nobelPrizeYear: '#number', yearTo: '#number', nobelPrizeCategory: '#string', count: '#number' }
  
  Examples:
    | offset | limit | sort | ID | name | gender | motivation | affiliation | residence | birthDate | birthDateTo | deathDate | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry | deathContinent | foundedCity | foundedCountry | foundedContinent | HeadquartersCity | HeadquartersCountry | HeadquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
    | 1      | 10    | asc  | 12 | John | male   | discovery  | Harvard     | USA       | 1950-01-01 | 1960-12-31  | 2020-01-01 | 2022-12-31  | 1900-01-01  | New York  | USA          | North America  | London    | UK           | Europe         | Paris       | France         | Europe           | Berlin           | Germany             | Europe               | 2010           | 2020   | phy                | json   | en      |

Scenario: Get Laureates with invalid parameters
  Given path '/2.1/laureates'
  And params { offset: 'invalid', limit: 'invalid' }
  When method GET  
  Then status 400
  And match response == { code: '#string', message: '#string' }

Scenario: Get non-existing Laureate
  Given path '/2.1/laureates'
  And params { ID: 99999 }
  When method GET
  Then status 404
  And match response == { code: '#string', message: '#string' }

Scenario: Get Laureates with invalid date format
  Given path '/2.1/laureates' 
  And params { birthDate: 'invalid-date' }
  When method GET
  Then status 422
  And match response == { code: '#string', message: '#string' }
