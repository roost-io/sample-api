# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=ff433d7857
# 
# 

# ********RoostGPT********
Feature: Testing /2.1/laureates API endpoint 

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario Outline: Test Laureates API endpoint with all valid parameters
  Given path '/2.1/laureates'
  And param offset = <offset>
  And param limit = <limit>
  And param sort = <sort>
  And param ID = <ID>
  And param name = <name>
  And param gender = <gender>
  And param motivation = <motivation>
  And param affiliation = <affiliation>
  And param residence = <residence>
  And param birthDate = <birthDate>
  And param birthDateTo = <birthDateTo>
  And param deathDate = <deathDate>
  And param deathDateTo = <deathDateTo>
  And param foundedDate = <foundedDate>
  And param birthCity = <birthCity>
  And param birthCountry = <birthCountry>
  And param birthContinent = <birthContinent>
  And param deathCity = <deathCity>
  And param deathCountry = <deathCountry>
  And param deathContinent = <deathContinent>
  And param foundedCity = <foundedCity>
  And param foundedCountry = <foundedCountry>
  And param foundedContinent = <foundedContinent>
  And param HeadquartersCity = <HeadquartersCity>
  And param HeadquartersCountry = <HeadquartersCountry>
  And param HeadquartersContinent = <HeadquartersContinent>
  And param nobelPrizeYear = <nobelPrizeYear>
  And param yearTo = <yearTo>
  And param nobelPrizeCategory = <nobelPrizeCategory>
  And param format = <format>
  And param csvLang = <csvLang>
  When method get
  Then status 200
  * match response.code == 200
  And match response.meta.offset == <offset>

Examples:
| offset | limit | sort | ID | name | gender | motivation | affiliation | residence | birthDate | birthDateTo | deathDate | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry | deathContinent | foundedCity | foundedCountry | foundedContinent | HeadquartersCity | HeadquartersCountry | HeadquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
| 1      | 2     | 'asc'  | 3  | 'John' | 'male' | 'motivation here' | 'affiliation here' | 'residence here' | '1994-08-15' | '2000-08-15' | '2010-09-20' | '2020-09-20' | '1950-06-20' | 'Berlin' | 'Germany' | 'Europe' | 'New York' | 'USA' | 'North America' | 'Paris' | 'France' | 'Europe' | 'London' | 'UK' | 'Europe' | 2005 | 2010 | 'Physics' | 'json' | 'en' |

Scenario: Test endpoint with 404 response scenario
  Given path '/2.1/laureates'
  And param nonExistingParameter = 'nonExistingValue'
  When method get
  Then status 404
  * match response.code == 404

