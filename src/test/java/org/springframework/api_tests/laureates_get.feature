# ********RoostGPT********

# Test generated by RoostGPT for test karate-sample-api-claude using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Get all Nobel Laureates
  Given path '/2.1/laureates'
  When method GET
  Then status 200
  And match response.laureates == '#[_ > 0]'
  And match each response.laureates contains 
  """
    {
      "id": '#number',
      "wikipedia": {
        "slug": '#string',
        "english": '#string'
      },
      "wikidata": {
        "id": '#string',
        "url": '#string'
      },
      "sameAs": '##[] #string',
      "links": '##[] #object'
    }
  """
  And match response.meta contains
  """
    {
      "count": '#number'
    }  
  """

Scenario: Get Laureates with limit and offset
  Given path '/2.1/laureates'
  And param limit = 10
  And param offset = 0
  When method GET
  Then status 200
  And match response.laureates == '#[10]'
  And match response.meta contains
  """
    {
      "limit": 10,
      "offset": 0,
      "count": '#number'
    }
  """

Scenario: Get Laureates sorted by name in descending order
  Given path '/2.1/laureates'
  And param sort = 'desc'
  When method GET
  Then status 200
  And match response.meta contains { sort: 'desc' }
  And match each response.laureates contains
  """
    {
      "laureateIfPerson": {
        "knownName": '#object'
      }  
    }
  """
  And match response.laureates[0].laureateIfPerson.knownName.en > response.laureates[-1].laureateIfPerson.knownName.en

Scenario: Get Laureate by ID
  Given path '/2.1/laureates'
  And param ID = 161
  When method GET
  Then status 200
  And match response.laureates == '#[1]'
  And match response.laureates[0].id == 161

Scenario: Get Laureates by name
  Given path '/2.1/laureates'
  And param name = 'Marie'
  When method GET
  Then status 200
  And match each response.laureates contains
  """
    {
      "laureateIfPerson": {
        "knownName": {
          "en": '#regex Marie'
        }
      }
    }  
  """

Scenario: Get Laureates by gender
  Given path '/2.1/laureates'
  And param gender = 'female'
  When method GET
  Then status 200
  And match each response.laureates[*].laureateIfPerson.gender contains 'female'

Scenario: Get Laureates by birth date
  Given path '/2.1/laureates'
  And param birthDate = 1867
  When method GET
  Then status 200
  And match each response.laureates[*].laureateIfPerson.birth.date contains '1867'

Scenario: Get Laureates by birth date range
  Given path '/2.1/laureates'
  And param birthDate = 1800
  And param birthDateTo = 1900
  When method GET
  Then status 200
  And match each response.laureates[*].laureateIfPerson.birth.date == '#? _ >= 1800 && _ <= 1900'

Scenario: Get Laureates by death date
  Given path '/2.1/laureates'
  And param deathDate = 1910
  When method GET
  Then status 200
  And match each response.laureates[*].laureateIfPerson.death.date contains '1910'

Scenario: Get Laureates by Nobel Prize year
  Given path '/2.1/laureates'
  And param nobelPrizeYear = 2000
  When method GET
  Then status 200
  And match each response.laureates[*].nobelPrizes[*].awardYear contains 2000

Scenario: Get Laureates by Nobel Prize category
  Given path '/2.1/laureates'
  And param nobelPrizeCategory = 'phy'
  When method GET
  Then status 200
  And match each response.laureates[*].nobelPrizes[*].category.en == 'Physics'

Scenario: Get Laureates in CSV format
  Given path '/2.1/laureates'
  And param format = 'csv'
  And param csvLang = 'en'
  When method GET
  Then status 200
  And match header Content-Type contains 'text/csv'

Scenario: Get Laureates - Bad Request
  Given path '/2.1/laureates'
  And param birthDate = 'invalid'
  When method GET
  Then status 400
  And match response == 
  """
    {
      "code": '#string',
      "message": '#string'
    }
  """

Scenario: Get Laureate - Not Found
  Given path '/2.1/laureates'
  And param ID = 999999
  When method GET
  Then status 404
  And match response ==
  """
    {
      "code": '#string',
      "message": '#string'
    }
  """
