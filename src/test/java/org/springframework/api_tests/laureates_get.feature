# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

  Background:
    * url 'https://api.nobelprize.org/2.1'
    * def authToken = karate.properties['AUTH_TOKEN']
    * def defaultOffset = 0
    * def defaultLimit = 20
    * def defaultSort = 'asc'

  Scenario: Get all Nobel Prize Laureates
    Given path '/laureates'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates contains { id: '#number', knownName: '#object' }
    And match response.meta.count == '#number'

  Scenario Outline: Get Nobel Prize Laureates with query parameters
    Given path '/laureates'
    And header Authorization = 'Bearer ' + authToken
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param name = <name>
    And param gender = <gender>
    And param motivation = <motivation>
    And param affiliation = <affiliation>
    And param residence = <residence>
    And param birthDate = <birthDate>
    And param birthDateTo = <birthDateTo>
    And param deathDate = <deathDate>
    And param deathDateTo = <deathDateTo>
    And param foundedDate = <foundedDate>
    And param birthCity = <birthCity>
    And param birthCountry = <birthCountry>
    And param birthContinent = <birthContinent>
    And param deathCity = <deathCity>
    And param deathCountry = <deathCountry>
    And param deathContinent = <deathContinent>
    And param foundedCity = <foundedCity>
    And param foundedCountry = <foundedCountry>
    And param foundedContinent = <foundedContinent>
    And param headquartersCity = <headquartersCity>
    And param headquartersCountry = <headquartersCountry>
    And param headquartersContinent = <headquartersContinent>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates contains { id: '#number', knownName: '#object' }
    And match response.meta.count == '#number'

    Examples:
      | offset | limit | sort  | name     | gender | motivation | affiliation | residence | birthDate | birthDateTo | deathDate | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry  | deathContinent | foundedCity | foundedCountry | foundedContinent | headquartersCity | headquartersCountry | headquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
      | 0      | 10    | "asc" | "Albert" | "male" | "peace"    | "CERN"      | "Geneva"  | "1950"    | "1960"      | "2000"    | "2010"      | "1980"      | "Ulm"     | "Germany"    | "Europe"       | "Bern"    | "Switzerland" | "Europe"       | "Geneva"    | "Switzerland"  | "Europe"         | "Geneva"         | "Switzerland"       | "Europe"              | 1921           | 1950   | "phy"              | "json" | "en"    |

  Scenario: Get Nobel Prize Laureate by ID
    Given path '/laureates'
    And header Authorization = 'Bearer ' + authToken
    And param id = 123
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match response.laureates[0].id == 123

  Scenario: Get Nobel Prize Laureates with invalid query parameters
    Given path '/laureates'
    And header Authorization = 'Bearer ' + authToken
    And param invalidParam = "invalidValue"
    When method GET
    Then status 400
    And match response.code == "400"
    And match response.message == "Bad Request"

  Scenario: Get Nobel Prize Laureates with non-existent resource
    Given path '/laureates/non-existent'
    And header Authorization = 'Bearer ' + authToken
    When method GET 
    Then status 404
    And match response.code == "404"
    And match response.message == "Not Found"
