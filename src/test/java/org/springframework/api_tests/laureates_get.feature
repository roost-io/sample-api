# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate-apitest using AI Type Claude AI and AI Model claude-3-haiku-20240307
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase

Scenario: Retrieve all Nobel Prize Laureates
Given path '/2.1/laureates'
When method GET
Then status 200
And match response.laureates[*].id != []
And match response.laureates[*].laureateIfPerson.fullName.en != []
And match response.laureates[*].laureateIfOrg.orgName.en != []

Scenario: Retrieve Laureates with specific ID
Given path '/2.1/laureates'
And param ID = 456
When method GET
Then status 200
And match response.laureates[0].id == 456
And match response.laureates[0].laureateIfPerson.fullName.en != ''
And match response.laureates[0].laureateIfOrg.orgName.en != ''

Scenario: Retrieve Laureates with specific name
Given path '/2.1/laureates'
And param name = 'John Doe'
When method GET
Then status 200
And match response.laureates[*].laureateIfPerson.fullName.en contains 'John Doe'
And match response.laureates[*].laureateIfOrg.orgName.en contains 'John Doe'

Scenario: Retrieve Laureates with specific gender
Given path '/2.1/laureates'
And param gender = 'female'
When method GET
Then status 200
And match response.laureates[*].laureateIfPerson.gender == 'female'

Scenario: Retrieve Laureates with specific motivation
Given path '/2.1/laureates'
And param motivation = 'for their work in physics'
When method GET
Then status 200
And match response.laureates[*].nobelPrizes[*].motivation.en contains 'for their work in physics'

Scenario: Retrieve Laureates with specific affiliation
Given path '/2.1/laureates'
And param affiliation = 'University of Cambridge'
When method GET
Then status 200
And match response.laureates[*].nobelPrizes[*].affiliations[*].name.en contains 'University of Cambridge'

Scenario: Retrieve Laureates with specific residence
Given path '/2.1/laureates'
And param residence = 'United States'
When method GET
Then status 200
And match response.laureates[*].residences[*].country.en contains 'United States'

Scenario: Retrieve Laureates born within a date range
Given path '/2.1/laureates'
And param birthDate = '1980'
And param birthDateTo = '1990'
When method GET
Then status 200
And match response.laureates[*].laureateIfPerson.birth.date >= '1980-01-01'
And match response.laureates[*].laureateIfPerson.birth.date <= '1990-12-31'

Scenario: Retrieve Laureates deceased within a date range
Given path '/2.1/laureates'
And param deathDate = '1980'
And param deathDateTo = '1990'
When method GET
Then status 200
And match response.laureates[*].laureateIfPerson.death.date >= '1980-01-01'
And match response.laureates[*].laureateIfPerson.death.date <= '1990-12-31'

Scenario: Retrieve Laureates by Nobel Prize year
Given path '/2.1/laureates'
And param nobelPrizeYear = 1989
When method GET
Then status 200
And match response.laureates[*].nobelPrizes[*].awardYear == 1989

Scenario: Retrieve Laureates by Nobel Prize category
Given path '/2.1/laureates'
And param nobelPrizeCategory = 'phy'
When method GET
Then status 200
And match response.laureates[*].nobelPrizes[*].category.en == 'Physics'

Scenario: Retrieve Laureates in CSV format
Given path '/2.1/laureates'
And param format = 'csv'
When method GET
Then status 200
And match response.headers['Content-Type'] contains 'text/csv'

Scenario: Retrieve Laureates with authorization
* def authToken = karate.properties['AUTH_TOKEN']
Given path '/2.1/laureates'
And header Authorization = 'Bearer ' + authToken
When method GET
Then status 200
And match response.laureates[*].id != []
