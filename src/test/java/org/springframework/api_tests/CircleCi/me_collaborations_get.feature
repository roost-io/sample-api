# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /me/collaborations_get for http method type GET 
# RoostTestHash=ff854080c5
# 
# 

# ********RoostGPT********
Feature: User Collaborations API

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * def authHeader = { Authorization: 'Basic ' + basicAuth }

  Scenario: Get user collaborations successfully
    Given url urlBase
    And path '/me/collaborations'
    And headers authHeader
    When method GET
    Then status 200
    And match response == '#array'
    And match each response contains { id: '#string?', 'vcs-type': '#string', name: '#string', avatar_url: '#string', slug: '#string' }
    And match each response..id == '##regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' || null
    And match each response..'vcs-type' == '#string'
    And match each response..name == '#string'
    And match each response..avatar_url == '#string'
    And match each response..slug == '#string'

  Scenario: Get collaborations with invalid authentication
    Given url urlBase
    And path '/me/collaborations'
    And header Authorization = 'Basic invalid_token'
    When method GET
    Then status 401
    And match response.message == '#string'

  Scenario: Get collaborations with missing authentication
    Given url urlBase
    And path '/me/collaborations'
    When method GET
    Then status 401
    And match response.message == '#string'

  Scenario: Verify response structure for each collaboration
    Given url urlBase
    And path '/me/collaborations'
    And headers authHeader
    When method GET
    Then status 200
    And match each response ==
      """
      {
        id: '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' || null,
        'vcs-type': '#string',
        name: '#string',
        avatar_url: '#string',
        slug: '#string'
      }
      """
