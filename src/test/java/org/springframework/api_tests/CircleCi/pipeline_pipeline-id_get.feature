# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /pipeline/{pipeline-id}_get for http method type GET 
# RoostTestHash=834e307224
# 
# 

# ********RoostGPT********
Feature: Get Pipeline by ID API

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * def pipelineId = '5034460f-c7c4-4c43-9457-de07e2029e7b'

  Scenario: Successfully retrieve a pipeline by ID
    Given url urlBase
    And path '/pipeline', pipelineId
    When method GET
    Then status 200
    And match response ==
      """
      {
        id: '#string',
        errors: '#array',
        project_slug: '#string',
        updated_at: '##string',
        number: '#number',
        trigger_parameters: '##object',
        state: '#string',
        created_at: '#string',
        trigger: {
          type: '#string',
          received_at: '#string',
          actor: {
            login: '#string',
            avatar_url: '##string'
          }
        },
        vcs: '##object'
      }
      """
    And match response.id == '#uuid'
    And match response.project_slug == '#string'
    And match response.number == '#number'
    And match response.state == '#? ["created", "errored", "setup-pending", "setup", "pending"].indexOf(_) >= 0'
    And match response.created_at == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z'
    And match response.updated_at == '##regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z'
    # Validate errors array
    And match each response.errors ==
      """
      {
        type: '#? ["config", "invalid-trigger-setup", "config-fetch", "timeout", "permission", "other", "trigger-rule", "plan"].indexOf(_) >= 0',
        message: '#string'
      }
      """
    # Validate trigger object
    And match response.trigger.type == '#? ["scheduled_pipeline", "explicit", "api", "webhook"].indexOf(_) >= 0'
    And match response.trigger.received_at == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z'
    And match response.trigger.actor.login == '#string'
    And match response.trigger.actor.avatar_url == '##string'
    # Validate VCS object if present
    * if (response.vcs) karate.call('validateVcs.feature', response.vcs)

  Scenario: Validate VCS object structure
    * def validateVcs =
      """
      function(vcs) {
        if (!vcs) return true;
        
        var valid = true;
        valid = valid && vcs.provider_name && typeof vcs.provider_name === 'string';
        valid = valid && vcs.origin_repository_url && typeof vcs.origin_repository_url === 'string';
        valid = valid && vcs.target_repository_url && typeof vcs.target_repository_url === 'string';
        valid = valid && (vcs.revision === null || typeof vcs.revision === 'string');
        
        if (vcs.branch && vcs.tag) {
          valid = false; // branch and tag are mutually exclusive
        }
        
        if (vcs.commit) {
          valid = valid && (vcs.commit.subject === null || typeof vcs.commit.subject === 'string');
          valid = valid && (vcs.commit.body === null || typeof vcs.commit.body === 'string');
        }
        
        return valid;
      }
      """
    * def vcsExample =
      """
      {
        provider_name: 'GitHub',
        target_repository_url: 'https://github.com/CircleCI-Public/api-preview-docs',
        branch: 'feature/design-new-api',
        revision: 'f454a02b5d10fcccfd7d9dd7608a76d6493a98b4',
        commit: {
          subject: 'Update API docs',
          body: 'Detailed description of changes'
        },
        origin_repository_url: 'https://github.com/CircleCI-Public/api-preview-docs'
      }
      """
    * assert validateVcs(vcsExample)

  Scenario: Attempt to retrieve a non-existent pipeline
    Given url urlBase
    And path '/pipeline', '00000000-0000-0000-0000-000000000000'
    When method GET
    Then status 404
    And match response.message == '#string'

  Scenario: Attempt to retrieve a pipeline with invalid UUID format
    Given url urlBase
    And path '/pipeline', 'invalid-uuid-format'
    When method GET
    Then status 400
    And match response.message == '#string'

  Scenario Outline: Retrieve pipelines with different states
    Given url urlBase
    And path '/pipeline', pipelineId
    When method GET
    Then status 200
    And match response.state == '<expectedState>'

    Examples:
      | read('pipeline_pipeline-id_get.csv') |
