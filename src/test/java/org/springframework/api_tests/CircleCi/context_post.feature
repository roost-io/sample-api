# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /context_post for http method type POST 
# RoostTestHash=88dc48acd7
# 
# 

# ********RoostGPT********
Feature: Create a new context API

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * def uuidPattern = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    * def dateTimePattern = '^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$'

  Scenario Outline: Create a new context with owner ID
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "name": "<name>",
        "owner": {
          "id": "<ownerId>",
          "type": "<ownerType>"
        }
      }
      """
    When method POST
    Then status 200
    And match response.id == '#regex' + uuidPattern
    And match response.name == '<name>'
    And match response.created_at == '#regex' + dateTimePattern
    And match response == { id: '#string', name: '#string', created_at: '#string' }

    Examples:
      | read('context_post.csv') |

  Scenario Outline: Create a new context with owner slug
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "name": "<name>",
        "owner": {
          "slug": "<ownerSlug>",
          "type": "organization"
        }
      }
      """
    When method POST
    Then status 200
    And match response.id == '#regex' + uuidPattern
    And match response.name == '<name>'
    And match response.created_at == '#regex' + dateTimePattern
    And match response == { id: '#string', name: '#string', created_at: '#string' }

    Examples:
      | read('context_post.csv') |

  Scenario: Create a context with missing name
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "owner": {
          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
          "type": "organization"
        }
      }
      """
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Create a context with missing owner
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "name": "Test Context"
      }
      """
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Create a context with invalid owner type
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "name": "Test Context",
        "owner": {
          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
          "type": "invalid-type"
        }
      }
      """
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Create a context with account type using slug
    Given url urlBase
    And path '/context'
    And header Content-Type = 'application/json'
    And request
      """
      {
        "name": "Test Context",
        "owner": {
          "slug": "my-account",
          "type": "account"
        }
      }
      """
    When method POST
    Then status 400
    And match response.message == '#string'
