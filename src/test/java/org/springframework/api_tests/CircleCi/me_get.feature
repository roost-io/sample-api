# ********RoostGPT********

# Test generated by RoostGPT for test circle-ci-api using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: User Information API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { 'Circle-Token': '#(authToken)' }

  Scenario: Get current user information - Success
    Given path '/me'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.id == '#string'
    And match response.id == '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario: Get current user information - Unauthorized
    Given path '/me'
    And header Circle-Token = 'invalid-token'
    When method GET
    Then status != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Get current user information - Missing authentication
    Given path '/me'
    And configure headers = null
    When method GET
    Then status != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario Outline: Get current user information with different authentication scenarios
    Given path '/me'
    And header Circle-Token = '<token>'
    When method GET
    Then status <expectedStatus>
    And match response == '#object'
    And if (<expectedStatus> == 200) match response.id == '#string'
    And if (<expectedStatus> == 200) match response.id == '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    And if (<expectedStatus> == 200) match response.login == '#string'
    And if (<expectedStatus> == 200) match response.name == '#string'
    And if (<expectedStatus> != 200) match response.message == '#string'

    Examples:
      | token         | expectedStatus |
      | valid-token   |            200 |
      | invalid-token |            401 |
      | expired-token |            401 |
      | ''            |            401 |

  Scenario: Validate response content type
    Given path '/me'
    When method GET
    Then status 200
    And match header Content-Type contains 'application/json'

  Scenario: Validate required fields are present in successful response
    Given path '/me'
    When method GET
    Then status 200
    And match response contains { id: '#string', login: '#string', name: '#string' }
    And match response.id == '#present'
    And match response.login == '#present'
    And match response.name == '#present'

  Scenario: Validate UUID format for user ID
    Given path '/me'
    When method GET
    Then status 200
    And match response.id == '#string'
    And assert response.id.length == 36
    And match response.id == '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'

  Scenario: Validate response structure for error cases
    Given path '/me'
    And header Circle-Token = 'malformed-token'
    When method GET
    Then status != 200
    And match response == '#object'
    And match response.message == '#string'
    And match response.message == '#present'
