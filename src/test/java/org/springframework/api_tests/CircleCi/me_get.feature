# ********RoostGPT********

# Test generated by RoostGPT for test circle-ci-api using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: User Information API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)', Accept: 'application/json' }

  Scenario: Get current user information - Success
    Given path '/me'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.id == '#string'
    And match response.id == '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    And match response.login == '#string'
    And match response.name == '#string'
    And match karate.keysOf(response) contains only ['id', 'login', 'name']

  Scenario: Get current user information - Unauthorized
    Given path '/me'
    And configure headers = { Accept: 'application/json' }
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Get current user information - Invalid token
    Given path '/me'
    And configure headers = { Circle-Token: 'invalid-token', Accept: 'application/json' }
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Get current user information - Missing authorization header
    Given path '/me'
    And configure headers = { Accept: 'application/json' }
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Get current user information - Verify response structure
    Given path '/me'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.id == '#present'
    And match response.login == '#present'
    And match response.name == '#present'
    And assert karate.sizeOf(response) == 3
