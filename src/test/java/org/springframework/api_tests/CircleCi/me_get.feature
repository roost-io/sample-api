# ********RoostGPT********

# Test generated by RoostGPT for test circle-ci-api using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: User Information API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = karate.properties['Circle-Token']
    * configure headers = { Circle-Token: '#(authToken)', Accept: 'application/json' }

  Scenario: Get current user information - successful response
    Given path '/me'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.id == '#string'
    And match response.id == '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    And match response.login == '#string'
    And match response.name == '#string'
    And match karate.sizeOf(response) >= 3

  Scenario: Get current user information - verify response structure
    Given path '/me'
    When method GET
    Then status 200
    And match response contains { id: '#string', login: '#string', name: '#string' }
    And match response.id == '#notnull'
    And match response.login == '#notnull'
    And match response.name == '#notnull'

  Scenario: Get current user information - verify UUID format
    Given path '/me'
    When method GET
    Then status 200
    And match response.id == '#string'
    And assert response.id.length == 36
    And assert response.id.indexOf('-') == 8
    And assert response.id.lastIndexOf('-') == 23

  Scenario: Get current user information - verify required fields presence
    Given path '/me'
    When method GET
    Then status 200
    And match response.id == '#present'
    And match response.login == '#present'
    And match response.name == '#present'
    And match response.id != ''
    And match response.login != ''
    And match response.name != ''

  Scenario: Get current user information - error response validation
    Given path '/me'
    * configure headers = { Accept: 'application/json' }
    When method GET
    Then status != 200
    And match response == '#object'
    And match response.message == '##string'
