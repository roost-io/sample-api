# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /pipeline_get for http method type GET 
# RoostTestHash=04615f6491
# 
# 

# ********RoostGPT********
Feature: Pipeline API Tests

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * url urlBase

  Scenario: Get a list of pipelines without parameters
    Given path '/pipeline'
    When method GET
    Then status 200
    And match response == { items: '#array', next_page_token: '##string' }
    And match each response.items contains { id: '#string', number: '#number', project_slug: '#string', created_at: '#string', errors: '#array', state: '#string', trigger: '#object' }
    And match each response.items[*].id == '#regex [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    And match each response.items[*].state == '#? ["created", "errored", "setup-pending", "setup", "pending"].contains(_)'
    And match each response.items[*].trigger contains { type: '#string', received_at: '#string', actor: '#object' }
    And match each response.items[*].trigger.type == '#? ["scheduled_pipeline", "explicit", "api", "webhook"].contains(_)'
    And match each response.items[*].trigger.actor contains { login: '#string', avatar_url: '##string' }

  Scenario Outline: Get a list of pipelines with org-slug parameter
    Given path '/pipeline'
    And param org-slug = '<orgSlug>'
    When method GET
    Then status 200
    And match response == { items: '#array', next_page_token: '##string' }
    And match each response.items contains { id: '#string', number: '#number', project_slug: '#string', created_at: '#string', errors: '#array', state: '#string', trigger: '#object' }
    And match each response.items[*].vcs == '##object'
    And match each response.items[*].vcs.provider_name == '##string'
    And match each response.items[*].vcs.origin_repository_url == '##string'
    And match each response.items[*].vcs.target_repository_url == '##string'
    And match each response.items[*].vcs.revision == '##string'

    Examples:
      | read('pipeline_get.csv') |

  Scenario: Get a list of pipelines with mine parameter set to true
    Given path '/pipeline'
    And param mine = true
    When method GET
    Then status 200
    And match response == { items: '#array', next_page_token: '##string' }
    And match each response.items contains { id: '#string', number: '#number', project_slug: '#string', created_at: '#string', errors: '#array', state: '#string', trigger: '#object' }
    And match each response.items[*].created_at == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z'
    And match each response.items[*].updated_at == '##regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z'

  Scenario: Get a list of pipelines with page-token parameter
    Given path '/pipeline'
    When method GET
    Then status 200
    * def pageToken = response.next_page_token
    * if (pageToken == null) karate.abort()

  Scenario: Continue with page token if available
    Given path '/pipeline'
    And param page-token = pageToken
    When method GET
    Then status 200
    And match response == { items: '#array', next_page_token: '##string' }
    And match each response.items contains { id: '#string', number: '#number', project_slug: '#string', created_at: '#string', errors: '#array', state: '#string', trigger: '#object' }

  Scenario: Get a list of pipelines with all parameters
    Given path '/pipeline'
    And param org-slug = 'gh/CircleCI-Public'
    And param mine = true
    When method GET
    Then status 200
    And match response == { items: '#array', next_page_token: '##string' }
    And match each response.items contains { id: '#string', number: '#number', project_slug: '#string', created_at: '#string', errors: '#array', state: '#string', trigger: '#object' }
    And match each response.items[*].errors == '##array'
    And match each response.items[*].errors[*] == '##object'
    And match each response.items[*].errors[*].type == '##? ["config", "invalid-trigger-setup", "config-fetch", "timeout", "permission", "other", "trigger-rule", "plan"].contains(_)'
    And match each response.items[*].errors[*].message == '##string'
    And match each response.items[*].vcs == '##object'
    And match each response.items[*].vcs.commit == '##object'
    And match each response.items[*].vcs.commit.subject == '##string'
    And match each response.items[*].vcs.commit.body == '##string'
    And match each response.items[*].vcs.branch == '##string'
    And match each response.items[*].vcs.tag == '##string'
