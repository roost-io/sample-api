# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /pipeline/continue_post for http method type POST 
# RoostTestHash=ebaca7e4ca
# 
# 

# ********RoostGPT********
Feature: Continue a pipeline API

  Background:
    * def urlBase = karate.properties['URL_BASE']
    * def authHeader = { Authorization: 'Basic ' + basicAuth }
    * def validContinuationKey = "valid-continuation-key"
    * def validConfiguration = "version: 2.1\njobs:\n  build:\n    docker:\n      - image: cimg/base:2021.04\n    steps:\n      - checkout\n      - run: echo 'Hello World'"

  Scenario: Successfully continue a pipeline with required fields only
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)"
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 200
    And match response == { message: '#string' }
    And match response.message != null

  Scenario: Successfully continue a pipeline with parameters
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)",
        "parameters": {
          "deploy_prod": true,
          "version": "1.0.0",
          "build_number": 123
        }
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 200
    And match response == { message: '#string' }
    And match response.message != null

  Scenario Outline: Fail to continue a pipeline with missing required fields
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request <requestBody>
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

    Examples:
      | requestBody                                       |
      | { "configuration": "#(validConfiguration)" }      |
      | { "continuation-key": "#(validContinuationKey)" } |
      | { }                                               |

  Scenario: Fail to continue a pipeline with invalid continuation key
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "invalid-key",
        "configuration": "#(validConfiguration)"
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with invalid configuration
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "invalid-config"
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with invalid parameter types
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)",
        "parameters": {
          "deploy_prod": "not-a-boolean",
          "complex_object": {
            "nested": "value"
          }
        }
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with unauthorized access
    Given url urlBase
    And path '/pipeline/continue'
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)"
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 401
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with too many parameters
    * def largeParamsObject = {}
    * def loop = function(n) { for(var i = 0; i < n; i++) largeParamsObject['param'+i] = 'value'+i }
    * call loop(101)
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)",
        "parameters": "#(largeParamsObject)"
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with parameter key too long
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    * def longKey = karate.repeat('a', 129)
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)",
        "parameters": {
          "#(longKey)": "value"
        }
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'

  Scenario: Fail to continue a pipeline with parameter value too long
    Given url urlBase
    And path '/pipeline/continue'
    And headers authHeader
    * def longValue = karate.repeat('a', 513)
    And request
      """
      {
        "continuation-key": "#(validContinuationKey)",
        "configuration": "#(validConfiguration)",
        "parameters": {
          "param": "#(longValue)"
        }
      }
      """
    And header Content-Type = 'application/json'
    When method POST
    Then status 400
    And match response.message == '#string'
