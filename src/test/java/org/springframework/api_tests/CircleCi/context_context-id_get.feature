# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /context/{context-id}_get for http method type GET 
# RoostTestHash=4b383a9190
# 
# 

# ********RoostGPT********
Feature: Get Context API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * def username = karate.properties['CIRCLE_USER']
    * def password = karate.properties['CIRCLE_PASS']
    * def credentials = username+':'+password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)' }

  Scenario Outline: Get context with valid context ID
    Given url urlBase
    And path '/context', contextId
    When method GET
    Then status 200
    And match response ==
      """
      {
        id: '#uuid',
        name: '#string',
        created_at: '#string'
      }
      """
    And match response.id == '#uuid'
    And match response.name == '#string'
    And match response.created_at == '#datetime'
    And match response.created_at contains 'Z'

    Examples:
      | read('context_context-id_get.csv') |

  Scenario Outline: Get context with invalid context ID
    Given url urlBase
    And path '/context', contextId
    When method GET
    Then status 404
    And match response.message == '#string'

    Examples:
      | contextId                              |
      | 'invalid-uuid'                         |
      | '00000000-0000-0000-0000-000000000000' |

  Scenario: Get context with missing context ID
    Given url urlBase
    And path '/context', ''
    When method GET
    Then status 404
    And match response.message == '#string'

  Scenario: Get context with unauthorized access
    * configure headers = { 'Authorization': 'Basic invalid_token' }
    Given url urlBase
    And path '/context', '123e4567-e89b-12d3-a456-426614174000'
    When method GET
    Then status 401
    And match response.message == '#string'
