# ********RoostGPT********

# Test generated by RoostGPT for test karateCircleCIFile using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Feature file generated for /context/{context-id}/environment-variable_get for http method type GET 
# RoostTestHash=cbf5028a22
# 
# 

# ********RoostGPT********
Feature: List environment variables from a context

  Background:
    * def urlBase = karate.properties['API_HOST']
    * def username = karate.properties['CIRCLE_USER']
    * def password = karate.properties['CIRCLE_PASS']
    * def credentials = username+':'+password
    * def encoded = Java.type('java.util.Base64').getEncoder().encodeToString(credentials.getBytes())
    * def authHeader = 'Basic ' + encoded
    * configure headers = { Authorization: '#(authHeader)' }

  Scenario Outline: List environment variables with valid context ID
    Given url urlBase
    And path '/context', '<context-id>', 'environment-variable'
    When method GET
    Then status 200
    And match response ==
      """
      {
        items: '#array',
        next_page_token: '##string'
      }
      """
    And match each response.items[*] ==
      """
      {
        variable: '#string',
        created_at: '#string',
        updated_at: '#string',
        context_id: '#string'
      }
      """
    And match each response.items[*].variable == '#string'
    And match each response.items[*].created_at == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z'
    And match each response.items[*].updated_at == '#regex \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z'
    And match each response.items[*].context_id == '<context-id>'

    Examples:
      | read('context_context-id_environment-variable_get.csv') |

  Scenario Outline: List environment variables with pagination
    Given url urlBase
    And path '/context', '<context-id>', 'environment-variable'
    And param page-token = '<page-token>'
    When method GET
    Then status 200
    And match response ==
      """
      {
        items: '#array',
        next_page_token: '##string'
      }
      """
    And match each response.items[*] ==
      """
      {
        variable: '#string',
        created_at: '#string',
        updated_at: '#string',
        context_id: '#string'
      }
      """

    Examples:
      | read('context_context-id_environment-variable_get.csv') |

  Scenario: List environment variables with invalid context ID
    Given url urlBase
    And path '/context', 'invalid-context-id', 'environment-variable'
    When method GET
    Then status 400
    And match response.message == '#string'

  Scenario: List environment variables with non-existent context ID
    Given url urlBase
    And path '/context', '11111111-1111-1111-1111-111111111111', 'environment-variable'
    When method GET
    Then status 404
    And match response.message == '#string'

  Scenario: List environment variables with unauthorized access
    * configure headers = { 'Authorization': 'Basic invalid_token' }
    Given url urlBase
    And path '/context', '1b969a89-6e9f-4f5a-98b9-a7b9144c3b87', 'environment-variable'
    When method GET
    Then status 401
    And match response.message == '#string'
