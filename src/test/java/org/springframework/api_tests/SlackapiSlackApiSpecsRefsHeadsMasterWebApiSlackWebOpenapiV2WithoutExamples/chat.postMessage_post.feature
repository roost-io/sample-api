# ********RoostGPT********

# Test generated by RoostGPT for test slackApi_clone using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /chat.postMessage_post for http method type POST 
# RoostTestHash=960759d6ad
# 
# 

# ********RoostGPT********
Feature: Chat Post Message API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = 'Bearer ' + karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Post message to channel with various parameters
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field as_user = '<as_user>'
    And form field attachments = '<attachments>'
    And form field blocks = '<blocks>'
    And form field icon_emoji = '<icon_emoji>'
    And form field icon_url = '<icon_url>'
    And form field link_names = '<link_names>'
    And form field mrkdwn = '<mrkdwn>'
    And form field parse = '<parse>'
    And form field reply_broadcast = '<reply_broadcast>'
    And form field thread_ts = '<thread_ts>'
    And form field unfurl_links = '<unfurl_links>'
    And form field unfurl_media = '<unfurl_media>'
    And form field username = '<username>'
    When method POST
    Then status 200
    And match response.ok == true
    And match response.channel == '#string'
    And match response.channel contains 'C'
    And match response.ts == '#string'
    And match response.ts == '#regex ^\\d{10}\\.\\d{6}$'
    And match response.message == '#object'
    And match response.message.text == '#string'
    And match response.message.type == '#string'
    And match response.message.ts == '#string'
    And match response.message.ts == '#regex ^\\d{10}\\.\\d{6}$'
    And match response.message.user == '##string'
    And match response.message.user == '#? _ == null || _.startsWith("U") || _.startsWith("W")'
    And match response.message.bot_id == '#? _ == null || (typeof _ == "string" && _.startsWith("B"))'
    And match response.message.bot_profile == '##object'
    And match response.message.client_msg_id == '##string'
    And match response.message.display_as_bot == '##boolean'
    And match response.message.is_delayed_message == '##boolean'
    And match response.message.is_intro == '##boolean'
    And match response.message.is_starred == '##boolean'
    And match response.message.subtype == '##string'
    And match response.message.team == '##string'
    And match response.message.team == '#? _ == null || _.startsWith("T") || _.startsWith("E")'
    And match response.message.thread_ts == '##string'
    And match response.message.thread_ts == '#? _ == null || _.match(/^\\d{10}\\.\\d{6}$/)'
    And match response.message.upload == '##boolean'
    And match response.message.username == '##string'
    And match response.message.user_team == '##string'
    And match response.message.user_team == '#? _ == null || _.startsWith("T") || _.startsWith("E")'
    And match response.message.source_team == '##string'
    And match response.message.source_team == '#? _ == null || _.startsWith("T") || _.startsWith("E")'
    And match response.message.permalink == '##string'
    And match response.message.last_read == '##string'
    And match response.message.last_read == '#? _ == null || _.match(/^\\d{10}\\.\\d{6}$/)'
    And match response.message.latest_reply == '##string'
    And match response.message.latest_reply == '#? _ == null || _.match(/^\\d{10}\\.\\d{6}$/)'
    And match response.message.reply_count == '##number'
    And match response.message.reply_users_count == '##number'
    And match response.message.unread_count == '##number'
    And match response.message.subscribed == '##boolean'
    And match response.message.name == '##string'
    And match response.message.old_name == '##string'
    And match response.message.purpose == '##string'
    And match response.message.topic == '##string'
    And match response.message.inviter == '##string'
    And match response.message.inviter == '#? _ == null || _.startsWith("U") || _.startsWith("W")'
    And match response.message.parent_user_id == '##string'
    And match response.message.parent_user_id == '#? _ == null || _.startsWith("U") || _.startsWith("W")'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with attachments
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field attachments = '<attachments>'
    When method POST
    Then status 200
    And match response.ok == true
    And match response.message.attachments == '#[]'
    And assert karate.sizeOf(response.message.attachments) >= 1
    And match each response.message.attachments[*].id == '#number'
    And match each response.message.attachments[*].fallback == '##string'
    And match each response.message.attachments[*].image_bytes == '##number'
    And match each response.message.attachments[*].image_height == '##number'
    And match each response.message.attachments[*].image_url == '##string'
    And match each response.message.attachments[*].image_width == '##number'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with blocks
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field blocks = '<blocks>'
    When method POST
    Then status 200
    And match response.ok == true
    And match response.message.blocks == '#[]'
    And match each response.message.blocks[*].type == '#string'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with reactions
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then status 200
    And match response.message.reactions == '##[]'
    And match each response.message.reactions[*].name == '#string'
    And match each response.message.reactions[*].count == '#number'
    And match each response.message.reactions[*].users == '#[]'
    And match each response.message.reactions[*].users[*] == '#string'
    And match each response.message.reactions[*].users[*] == '#? _.startsWith("U") || _.startsWith("W")'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with files
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then status 200
    And match response.message.files == '##[]'
    And match response.message.file == '##object'
    And match each response.message.files[*].id == '##string'
    And match each response.message.files[*].id == '#? _ == null || _.startsWith("F")'
    And match each response.message.files[*].created == '##number'
    And match each response.message.files[*].timestamp == '##number'
    And match each response.message.files[*].name == '##string'
    And match each response.message.files[*].title == '##string'
    And match each response.message.files[*].mimetype == '##string'
    And match each response.message.files[*].filetype == '##string'
    And match each response.message.files[*].pretty_type == '##string'
    And match each response.message.files[*].user == '##string'
    And match each response.message.files[*].editable == '##boolean'
    And match each response.message.files[*].size == '##number'
    And match each response.message.files[*].mode == '##string'
    And match each response.message.files[*].is_external == '##boolean'
    And match each response.message.files[*].external_type == '##string'
    And match each response.message.files[*].is_public == '##boolean'
    And match each response.message.files[*].public_url_shared == '##boolean'
    And match each response.message.files[*].display_as_bot == '##boolean'
    And match each response.message.files[*].username == '##string'
    And match each response.message.files[*].url_private == '##string'
    And match each response.message.files[*].url_private_download == '##string'
    And match each response.message.files[*].permalink == '##string'
    And match each response.message.files[*].permalink_public == '##string'
    And match each response.message.files[*].comments_count == '##number'
    And match each response.message.files[*].is_starred == '##boolean'
    And match each response.message.files[*].shares == '##object'
    And match each response.message.files[*].channels == '##[]'
    And match each response.message.files[*].groups == '##[]'
    And match each response.message.files[*].ims == '##[]'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with user profile
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then status 200
    And match response.message.user_profile == '##object'
    And match response.message.user_profile.avatar_hash == '#string'
    And match response.message.user_profile.image_72 == '#string'
    And match response.message.user_profile.first_name == '#? _ == null || typeof _ == "string"'
    And match response.message.user_profile.real_name == '#string'
    And match response.message.user_profile.display_name == '#string'
    And match response.message.user_profile.display_name_normalized == '##string'
    And match response.message.user_profile.real_name_normalized == '##string'
    And match response.message.user_profile.team == '#string'
    And match response.message.user_profile.team == '#? _.startsWith("T") || _.startsWith("E")'
    And match response.message.user_profile.name == '#string'
    And match response.message.user_profile.is_restricted == '#boolean'
    And match response.message.user_profile.is_ultra_restricted == '#boolean'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with bot profile
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field as_user = 'false'
    When method POST
    Then status 200
    And match response.message.bot_profile == '##object'
    And match response.message.bot_profile.id == '#string'
    And match response.message.bot_profile.id == '#? _.startsWith("B")'
    And match response.message.bot_profile.deleted == '#boolean'
    And match response.message.bot_profile.name == '#string'
    And match response.message.bot_profile.updated == '#number'
    And match response.message.bot_profile.app_id == '#string'
    And match response.message.bot_profile.app_id == '#? _.startsWith("A")'
    And match response.message.bot_profile.team_id == '#string'
    And match response.message.bot_profile.team_id == '#? _.startsWith("T")'
    And match response.message.bot_profile.icons == '#object'
    And match response.message.bot_profile.icons.image_36 == '#string'
    And match response.message.bot_profile.icons.image_48 == '#string'
    And match response.message.bot_profile.icons.image_72 == '#string'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with icons
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field icon_emoji = '<icon_emoji>'
    And form field icon_url = '<icon_url>'
    When method POST
    Then status 200
    And match response.message.icons == '##object'
    And match response.message.icons.emoji == '##string'
    And match response.message.icons.image_64 == '##string'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with reply users
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then status 200
    And match response.message.reply_users == '##[]'
    And assert karate.sizeOf(response.message.reply_users) >= 1
    And match each response.message.reply_users[*] == '#string'
    And match each response.message.reply_users[*] == '#? _.startsWith("U") || _.startsWith("W")'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message with pinned info
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then status 200
    And match response.message.pinned_to == '##[]'
    And match each response.message.pinned_to[*] == '#string'
    And match each response.message.pinned_to[*] == '#? _.startsWith("C") || _.startsWith("G") || _.startsWith("D")'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario Outline: Post message error scenarios
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method POST
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == '#string'
    And match response.error == '#? _ == "channel_not_found" || _ == "not_in_channel" || _ == "is_archived" || _ == "msg_too_long" || _ == "no_text" || _ == "too_many_attachments" || _ == "rate_limited" || _ == "not_authed" || _ == "invalid_auth" || _ == "account_inactive" || _ == "invalid_arg_name" || _ == "invalid_array_arg" || _ == "invalid_charset" || _ == "invalid_form_data" || _ == "invalid_post_type" || _ == "missing_post_type"'
    And match response.callstack == '##string'

    Examples:
      | channel     | text         |
      | INVALID     | Test message |
      | C1234567890 |              |
