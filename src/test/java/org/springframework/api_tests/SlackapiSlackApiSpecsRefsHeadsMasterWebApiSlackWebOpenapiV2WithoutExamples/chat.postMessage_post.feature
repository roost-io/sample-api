# ********RoostGPT********

# Test generated by RoostGPT for test slackApi using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /chat.postMessage_post for http method type POST 
# RoostTestHash=960759d6ad
# 
# 

# ********RoostGPT********
Feature: Chat Post Message API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authToken = 'Bearer ' + karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Post message to channel with various parameters
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    And form field as_user = '<as_user>'
    And form field attachments = '<attachments>'
    And form field blocks = '<blocks>'
    And form field icon_emoji = '<icon_emoji>'
    And form field icon_url = '<icon_url>'
    And form field link_names = '<link_names>'
    And form field mrkdwn = '<mrkdwn>'
    And form field parse = '<parse>'
    And form field reply_broadcast = '<reply_broadcast>'
    And form field thread_ts = '<thread_ts>'
    And form field unfurl_links = '<unfurl_links>'
    And form field unfurl_media = '<unfurl_media>'
    And form field username = '<username>'
    When method post
    Then status 200
    And match response.ok == true
    And match response.channel == '#string'
    And match response.channel contains '<channel>'
    And match response.ts == '#string'
    And match response.ts == '#regex ^\\d{10}\\.\\d{6}$'
    And match response.message == '#object'
    And match response.message.text == '#string'
    And match response.message.type == '#string'
    And match response.message.ts == '#string'
    And match response.message.ts == '#regex ^\\d{10}\\.\\d{6}$'
    And match response.message.user == '##string'
    And match response.message.user == '#? _ == null || _ matches "^[UW][A-Z0-9]{2,}$"'
    And match response.message.bot_id == '#? _ == null || _ matches "^B[A-Z0-9]{8,}$"'
    And match response.message.client_msg_id == '##string'
    And match response.message.team == '##string'
    And match response.message.team == '#? _ == null || _ matches "^[TE][A-Z0-9]{8,}$"'
    And match response.message.source_team == '##string'
    And match response.message.source_team == '#? _ == null || _ matches "^[TE][A-Z0-9]{8,}$"'
    And match response.message.user_team == '##string'
    And match response.message.user_team == '#? _ == null || _ matches "^[TE][A-Z0-9]{8,}$"'
    And match response.message.permalink == '##string'
    And match response.message.display_as_bot == '##boolean'
    And match response.message.username == '##string'
    And match response.message.is_delayed_message == '##boolean'
    And match response.message.is_starred == '##boolean'
    And match response.message.pinned_to == '##array'
    And match response.message.reactions == '##array'
    And match response.message.reply_count == '##number'
    And match response.message.reply_users_count == '##number'
    And match response.message.latest_reply == '##string'
    And match response.message.latest_reply == '#? _ == null || _ matches "^\\d{10}\\.\\d{6}$"'
    And match response.message.subscribed == '##boolean'
    And match response.message.last_read == '##string'
    And match response.message.last_read == '#? _ == null || _ matches "^\\d{10}\\.\\d{6}$"'
    And match response.message.unread_count == '##number'
    And match response.message.thread_ts == '##string'
    And match response.message.thread_ts == '#? _ == null || _ matches "^\\d{10}\\.\\d{6}$"'
    And match response.message.parent_user_id == '##string'
    And match response.message.parent_user_id == '#? _ == null || _ matches "^[UW][A-Z0-9]{2,}$"'
    And match response.message.reply_users == '##array'
    And match response.message.attachments == '##array'
    And match response.message.blocks == '##array'
    And match response.message.files == '##array'
    And match response.message.upload == '##boolean'
    And match response.message.subtype == '##string'

    Examples:
      | read('chat.postMessage_post.csv') |

  Scenario: Post message with attachments validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Message with attachments'
    And form field attachments = '[{"fallback":"attachment fallback","id":1,"image_url":"https://example.com/image.png","image_width":100,"image_height":100,"image_bytes":1024}]'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.attachments == '#array'
    And match response.message.attachments == '#[1]'
    And match each response.message.attachments[*].id == '#number'
    And match each response.message.attachments[*].fallback == '##string'
    And match each response.message.attachments[*].image_url == '##string'
    And match each response.message.attachments[*].image_width == '##number'
    And match each response.message.attachments[*].image_height == '##number'
    And match each response.message.attachments[*].image_bytes == '##number'

  Scenario: Post message with blocks validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Message with blocks'
    And form field blocks = '[{"type":"section","text":{"type":"mrkdwn","text":"Hello *World*"}}]'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.blocks == '#array'
    And match each response.message.blocks[*].type == '#string'

  Scenario: Post message with bot profile validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Bot message'
    And form field as_user = 'false'
    And form field username = 'testbot'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.bot_profile == '##object'
    And match response.message.bot_profile.id == '#string'
    And match response.message.bot_profile.id == '#regex ^B[A-Z0-9]{8,}$'
    And match response.message.bot_profile.deleted == '#boolean'
    And match response.message.bot_profile.name == '#string'
    And match response.message.bot_profile.updated == '#number'
    And match response.message.bot_profile.app_id == '#string'
    And match response.message.bot_profile.app_id == '#regex ^A[A-Z0-9]{1,}$'
    And match response.message.bot_profile.team_id == '#string'
    And match response.message.bot_profile.team_id == '#regex ^[T][A-Z0-9]{2,}$'
    And match response.message.bot_profile.icons == '#object'
    And match response.message.bot_profile.icons.image_36 == '#string'
    And match response.message.bot_profile.icons.image_48 == '#string'
    And match response.message.bot_profile.icons.image_72 == '#string'

  Scenario: Post message with user profile validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'User message'
    And form field as_user = 'true'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.user_profile == '##object'
    And match response.message.user_profile.avatar_hash == '#string'
    And match response.message.user_profile.image_72 == '#string'
    And match response.message.user_profile.first_name == '#? _ == null || typeof _ == "string"'
    And match response.message.user_profile.real_name == '#string'
    And match response.message.user_profile.display_name == '#string'
    And match response.message.user_profile.display_name_normalized == '##string'
    And match response.message.user_profile.real_name_normalized == '##string'
    And match response.message.user_profile.team == '#string'
    And match response.message.user_profile.team == '#regex ^[TE][A-Z0-9]{8,}$'
    And match response.message.user_profile.name == '#string'
    And match response.message.user_profile.is_restricted == '#boolean'
    And match response.message.user_profile.is_ultra_restricted == '#boolean'

  Scenario: Post message with reactions validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Message with reactions'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.reactions == '##array'
    And match each response.message.reactions[*].name == '#string'
    And match each response.message.reactions[*].count == '#number'
    And match each response.message.reactions[*].users == '#array'
    And match each response.message.reactions[*].users[*] == '#string'
    And match each response.message.reactions[*].users[*] == '#regex ^[UW][A-Z0-9]{2,}$'

  Scenario: Post message with files validation
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Message with files'
    When method post
    Then status 200
    And match response.ok == true
    And match response.message.files == '##array'
    And match each response.message.files[*].id == '##string'
    And match each response.message.files[*].id == '#? _ == null || _ matches "^[F][A-Z0-9]{8,}$"'
    And match each response.message.files[*].created == '##number'
    And match each response.message.files[*].timestamp == '##number'
    And match each response.message.files[*].name == '##string'
    And match each response.message.files[*].title == '##string'
    And match each response.message.files[*].mimetype == '##string'
    And match each response.message.files[*].filetype == '##string'
    And match each response.message.files[*].pretty_type == '##string'
    And match each response.message.files[*].user == '##string'
    And match each response.message.files[*].editable == '##boolean'
    And match each response.message.files[*].size == '##number'
    And match each response.message.files[*].mode == '##string'
    And match each response.message.files[*].is_external == '##boolean'
    And match each response.message.files[*].external_type == '##string'
    And match each response.message.files[*].is_public == '##boolean'
    And match each response.message.files[*].public_url_shared == '##boolean'
    And match each response.message.files[*].display_as_bot == '##boolean'
    And match each response.message.files[*].username == '##string'
    And match each response.message.files[*].url_private == '##string'
    And match each response.message.files[*].url_private_download == '##string'
    And match each response.message.files[*].permalink == '##string'
    And match each response.message.files[*].permalink_public == '##string'
    And match each response.message.files[*].comments_count == '##number'
    And match each response.message.files[*].is_starred == '##boolean'
    And match each response.message.files[*].shares == '##object'
    And match each response.message.files[*].channels == '##array'
    And match each response.message.files[*].groups == '##array'
    And match each response.message.files[*].ims == '##array'

  Scenario Outline: Post message error scenarios
    Given path '/api/chat.postMessage'
    And form field channel = '<channel>'
    And form field text = '<text>'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == '#string'
    And match response.error == '<error>'
    And match response.callstack == '##string'

    Examples:
      | channel         | text  | error             |
      | invalid_channel | Hello | channel_not_found |
      | C1234567890     |       | no_text           |
      | C1234567890     | Hello | not_in_channel    |

  Scenario: Post message with missing required channel parameter
    Given path '/api/chat.postMessage'
    And form field text = 'Hello World'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == '#string'

  Scenario: Post message with invalid authentication
    Given path '/api/chat.postMessage'
    And configure headers = { Authorization: 'Bearer invalid_token', Accept: 'application/json' }
    And form field channel = 'C1234567890'
    And form field text = 'Hello World'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == 'invalid_auth'

  Scenario: Post message with too many attachments
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Message with too many attachments'
    And form field attachments = '[{"id":1},{"id":2},{"id":3},{"id":4},{"id":5},{"id":6},{"id":7},{"id":8},{"id":9},{"id":10},{"id":11}]'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == 'too_many_attachments'

  Scenario: Post message with message too long
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'a'.repeat(4001)
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == 'msg_too_long'

  Scenario: Post message to archived channel
    Given path '/api/chat.postMessage'
    And form field channel = 'C_ARCHIVED'
    And form field text = 'Hello World'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == 'is_archived'

  Scenario: Post message with rate limiting
    Given path '/api/chat.postMessage'
    And form field channel = 'C1234567890'
    And form field text = 'Rate limited message'
    When method post
    Then assert responseStatus != 200
    And match response.ok == false
    And match response.error == 'rate_limited'
