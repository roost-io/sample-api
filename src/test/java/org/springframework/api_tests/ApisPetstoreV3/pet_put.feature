# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet_put for http method type PUT 
# RoostTestHash=42edb35103
# 
# 

# ********RoostGPT********
Feature: Pet Endpoint Feature

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Update an existing pet with valid payload
    Given path 'pet'
    And request
      """
      {
        id: <id>,
        name: <name>,
        category: { id: <category_id>, name: <category_name> },
        photoUrls: <photoUrls>,
        tags: <tags>,
        status: <status>
      }
      """
    When method PUT
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.name == '#string'
    And match response.category == '#object'
    And match response.category.id == '#number'
    And match response.category.name == '#string'
    And match response.photoUrls == '#array'
    And match response.photoUrls[*] == '#string'
    And match response.tags == '#array'
    And match response.tags[*].id == '#number'
    And match response.tags[*].name == '#string'
    And match response.status == '#string'

    Examples:
      | read('pet_put.csv') |

  Scenario: Update an existing pet with invalid ID
    Given path 'pet'
    And request
      """
      {
        id: -1,
        name: 'invalidPet',
        category: { id: 0, name: 'InvalidCategory' },
        photoUrls: ['invalidPhotoUrl'],
        tags: [],
        status: 'available'
      }
      """
    When method PUT
    Then status 400
    And match response.message == '#string'

  Scenario: Update an existing pet with valid ID but pet not found
    Given path 'pet'
    And request
      """
      {
        id: 9999,
        name: 'missingPet',
        category: { id: 99, name: 'UnknownCategory' },
        photoUrls: ['missingPhotoUrl'],
        tags: [],
        status: 'available'
      }
      """
    When method PUT
    Then status 404
    And match response.message == '#string'

  Scenario Outline: Update an existing pet with validation errors in payload
    Given path 'pet'
    And request
      """
      <payload>
      """
    When method PUT
    Then status 422
    And match response.message == '#string'

    Examples:
      | payload                                                                                                                   |
      | { id: 10, name: '', category: { id: 1, name: 'Dogs' }, photoUrls: ['photoUrl1'], tags: [], status: 'sold' }               |
      | { id: 10, name: 'doggie', category: { id: null, name: 'Dogs' }, photoUrls: ['photoUrl1'], tags: [], status: 'available' } |
      | { id: 10, name: 'doggie', category: { id: 1, name: 'Dogs' }, photoUrls: [], tags: [], status: '' }                        |
