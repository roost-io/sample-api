# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-petstore-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/{petId}_post for http method type POST 
# RoostTestHash=30359d59f9
# 
# 

# ********RoostGPT********
Feature: Update a pet in the store with form data

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Update pet with valid form data
    Given path 'pet', <petId>
    And param name = <name>
    And param status = <status>
    When method POST
    Then status 200
    And match response ==
      """
      {
        id: '#number',
        name: '#string',
        category: {
          id: '#number',
          name: '#string'
        },
        photoUrls: '#array',
        tags: '#array',
        status: '#string'
      }
      """
    And match response.photoUrls[*] == '#string'
    And match response.tags[*] CONTAINS { id: '#number', name: '#string' }
    And match response.status IN ['available', 'pending', 'sold']

    Examples:
      | read('pet_petId_post.csv') |

  Scenario: Update pet with invalid form data
    Given path 'pet', '12345'
    And param name = ''
    And param status = ''
    When method POST
    Then status 400
    And match response ==
      """
      {
        message: '#string'
      }
      """

  Scenario: Update pet when petId is missing
    Given path 'pet', ''
    When method POST
    Then status 400
    And match response ==
      """
      {
        message: '#string'
      }
      """

  Scenario: Check unexpected error handling
    Given path 'pet', '0'
    And param name = 'InvalidName'
    And param status = 'InvalidStatus'
    When method POST
    Then status 500
    And match response ==
      """
      {
        message: '#string'
      }
      """
