# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/findByStatus_get for http method type GET 
# RoostTestHash=946f2905a0
# 
# 

# ********RoostGPT********
Feature: Find Pets by Status API Tests
  Description: Validate the functionality of the /pet/findByStatus endpoint for filtering pets by their status.

  Background:
    * def urlBase = karate.properties['PETSTORE_API_HOST']
    * url urlBase
    * configure headers = { Authorization: "#(karate.properties['PETSTORE_AUTH_TOKEN'])" }

  Scenario Outline: Validate successful operation for different statuses
    Given path 'pet/findByStatus'
    And param status = <status>
    When method GET
    Then status 200
    And match response == '#[]'
    And match response[*].id == '#number'
    And match response[*].name == '#string'
    And match response[*].photoUrls == '#[]'
    And match response[*].photoUrls[*] == '#string'
    And match response[*].tags == '#[]'
    And match response[*].tags[*].id == '#number'
    And match response[*].tags[*].name == '#string'
    And match response[*].category == '#object'
    And match response[*].category.id == '#number'
    And match response[*].category.name == '#string'
    And match response[*].status == '#string'
    And match response[*].status == '#? _ in ["available", "pending", "sold"]'

    Examples:
      | read('pet_findByStatus_get.csv') |

  Scenario: Validate response for missing status query parameter
    Given path 'pet/findByStatus'
    When method GET
    Then status 200
    And match response == '#[]'
    And match response[*].id == '#number'
    And match response[*].name == '#string'
    And match response[*].photoUrls == '#[]'
    And match response[*].photoUrls[*] == '#string'
    And match response[*].tags == '#[]'
    And match response[*].tags[*].id == '#number'
    And match response[*].tags[*].name == '#string'
    And match response[*].category == '#object'
    And match response[*].category.id == '#number'
    And match response[*].category.name == '#string'
    And match response[*].status == '#string'
    And match response[*].status == '#? _ in ["available", "pending", "sold"]'

  Scenario Outline: Validate invalid status query parameter
    Given path 'pet/findByStatus'
    And param status = <status>
    When method GET
    Then status 400
    And match response == """{}""" # Assert for no response body

    Examples:
      | status        |
      | invalidStatus |

  Scenario: Validate default error response for unexpected conditions
    Given path 'pet/findByStatus'
    And param status = 'available'
    And configure headers = """{ Authorization: "InvalidAuthToken" }"""
    When method GET
    Then status 500
    And match response == """{}""" # Assert for no response body
