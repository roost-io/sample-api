# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /user_post for http method type POST 
# RoostTestHash=701b5cbba5
# 
# 

# ********RoostGPT********
Feature: User API Tests

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Create a user with valid payload
    Given path 'user'
    And request """ 
    { 
      id: <id>, 
      username: '<username>', 
      firstName: '<firstName>', 
      lastName: '<lastName>', 
      email: '<email>', 
      password: '<password>', 
      phone: '<phone>', 
      userStatus: <userStatus> 
    } 
    """
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.username == '#string'
    And match response.firstName == '#string'
    And match response.lastName == '#string'
    And match response.email == '#string'
    And match response.password == '#string'
    And match response.phone == '#string'
    And match response.userStatus == '#number'
    And match response CONTAINS """ 
    { 
      id: <id>, 
      username: '<username>', 
      firstName: '<firstName>', 
      lastName: '<lastName>', 
      email: '<email>', 
      password: '<password>', 
      phone: '<phone>', 
      userStatus: <userStatus> 
    } 
    """
    Examples:
      | id | username    | firstName | lastName | email              | password | phone | userStatus |
      | 10 | theUser     | John      | James    | john@email.com     |    12345 | 12345 |          1 |
      | 20 | anotherUser | Jane      | Doe      | jane.doe@email.com | abcde    | 98765 |          2 |

  Scenario: Create a user with invalid payload
    Given path 'user'
    And request """ 
    { 
      id: 'INVALID_ID', 
      username: '', 
      firstName: '', 
      lastName: '', 
      email: 'invalid', 
      password: '', 
      phone: '', 
      userStatus: 'INVALID_STATUS' 
    } 
    """
    When method POST
    Then status 400
    And match response CONTAINS { message: '#string' }
    And match response.message == '#string'

  Scenario: Verify response headers
    Given path 'user'
    And request """ 
    { 
      id: 10, 
      username: 'theUser', 
      firstName: 'John', 
      lastName: 'James', 
      email: 'john@email.com', 
      password: '12345', 
      phone: '12345', 
      userStatus: 1 
    } 
    """
    When method POST
    Then status 200
    And match responseHeaders['Content-Type'] == '#string'
    And match responseHeaders['Content-Type'] CONTAINS 'application/json'

  Scenario: Test unsupported method DELETE
    Given path 'user'
    When method DELETE
    Then status 405
    And match response CONTAINS { message: '#string' }
    And match response.message == '#string'

  Scenario Outline: Validate error scenarios for missing request body fields
    Given path 'user'
    And request """ 
    <requestPayload> 
    """
    When method POST
    Then status 400
    And match response CONTAINS { message: '#string' }
    And match response.message == '#string'

    Examples:
      | requestPayload                                |
      | { "username": "theUser" }                     |
      | { "lastName": "James", "email": "john@email.com" } |
