# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /store/order_post for http method type POST 
# RoostTestHash=285bf3afc6
# 
# 

# ********RoostGPT********
Feature: Place an order for a pet

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers =
      """
      { 
        Authorization: #(karate.properties['AUTH_TOKEN']) 
      }
      """

  Scenario Outline: Place a new order with valid input
    Given path 'store/order'
    And request
      """
      { 
        id: <id>, 
        petId: <petId>, 
        quantity: <quantity>, 
        shipDate: <shipDate>, 
        status: '<status>', 
        complete: <complete> 
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.petId == '#number'
    And match response.quantity == '#number'
    And match response.shipDate == '#string'
    And match response.shipDate != null
    And match response.status == '#string'
    And match response.status in ['placed', 'approved', 'delivered']
    And match response.complete == '#boolean'
    And match response.complete != null
    And match response.headers == '#object'

    Examples:
      | read('store_order_post.csv') |

  Scenario: Place an order with invalid input
    Given path 'store/order'
    And request
      """
      { 
        id: 'invalidId', 
        petId: 198772, 
        quantity: 7, 
        shipDate: '2023-10-07T10:00:00Z', 
        status: 'placed', 
        complete: true 
      }
      """
    When method POST
    Then status 400

  Scenario Outline: Validation exception on order creation
    Given path 'store/order'
    And request
      """
      { 
        id: <id>, 
        petId: <petId>, 
        quantity: <quantity>, 
        shipDate: <shipDate>, 
        status: '<status>', 
        complete: <complete> 
      }
      """
    When method POST
    Then status 422

    Examples:
      | id  | petId | quantity | shipDate            | status    | complete |
      | ''  |     0 |        0 | ''                  | 'invalid' | true     |
      | 123 |     0 |       -1 | 'invalid-date-time' | 'invalid' | false    |

  Scenario: Handle unexpected error during order placement
    Given path 'store/order'
    And request
      """
      { 
        id: 10, 
        petId: 198772, 
        quantity: 7, 
        shipDate: '2023-10-07T10:00:00Z', 
        status: 'placed', 
        complete: true 
      }
      """
    When method POST
    Then status not in [200, 400, 422]
