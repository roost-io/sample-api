# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=68c053e0a8
# 
# 

# ********RoostGPT********
Feature: Add a new pet to the store

  Background:
    """ 
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['AUTH_TOKEN']) }
    """

  Scenario Outline: Verify successful addition of a new pet
    Given path 'pet'
    And request """
    {
      "name": <name>,
      "photoUrls": <photoUrls>,
      "category": { 
        "id": <categoryId>, 
        "name": <categoryName> 
      },
      "tags": [ 
        { 
          "id": <tagId>, 
          "name": <tagName> 
        } 
      ],
      "status": <status>
    }"""
    When method POST
    Then status 200
    And match $.id == '#number'
    And match $.name == <name>
    And match $.photoUrls == <photoUrls>
    And match $.category.id == <categoryId>
    And match $.category.name == <categoryName>
    And match $.tags == [ { "id": <tagId>, "name": <tagName> } ]
    And match $.status == <status>

    Examples:
      | name     | photoUrls       | categoryId | categoryName | tagId | tagName        | status      |
      | 'doggie' | ['dog-pic.jpg'] |          1 | 'Dogs'       |   101 | 'Friendly Dog' | 'available' |
      | 'kitty'  | ['cat-pic.jpg'] |          2 | 'Cats'       |   102 | 'Cute Cat'     | 'pending'   |

  Scenario Outline: Verify invalid input results in error response
    Given path 'pet'
    And request """
    {
      "name": <name>,
      "photoUrls": <photoUrls>,
      "status": <status>
    }"""
    When method POST
    Then status 400
    And match $.message == '#string'

    Examples:
      | name | photoUrls     | status      |
      | null | []            | 'available' |
      | ''   | ['empty.jpg'] | 'sold'      |

  Scenario Outline: Verify request validation exception
    Given path 'pet'
    And request """
    {
      "name": <name>,
      "photoUrls": <photoUrls>,
      "status": <status>
    }"""
    When method POST
    Then status 422
    And match $.message == '#string'

    Examples:
      | name     | photoUrls     | status    |
      | 'doggie' | []            | 'invalid' |
      | 'bruno'  | ['bruno.jpg'] | ''        |

  Scenario: Verify unexpected error response
    Given path 'pet'
    And request """
    {
      "name": 'unexpected',
      "photoUrls": ['unexpected.jpg']
    }"""
    When method POST
    Then status >= 500
    And match $.message == '#string'
