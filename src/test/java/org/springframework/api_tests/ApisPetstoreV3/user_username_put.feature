# ********RoostGPT********

# Test generated by RoostGPT for test api-karate-customer-management-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /user/{username}_put for http method type PUT 
# RoostTestHash=1f1b62cfe6
# 
# 

# ********RoostGPT********
Feature: Update user resource API
  Description: Validate the functionality of updating a user resource for authorized users. This includes testing various request parameters, payloads, response codes, and response bodies.

  Background:
    * def urlBase = karate.properties['URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { 
      Authorization: #(karate.properties['AUTH_TOKEN']) 
    }

  Scenario Outline: Update user resource with valid payload
    Given path '/user', '<username>'
    And request '''{ 
      "id": <id>, 
      "username": "<username>", 
      "firstName": "<firstName>", 
      "lastName": "<lastName>", 
      "email": "<email>", 
      "password": "<password>", 
      "phone": "<phone>", 
      "userStatus": <userStatus> 
    }'''
    When method PUT
    Then status 200
    And match response == '#object'
    And match response.id == '#integer'
    And match response.username == '#string'
    And match response.firstName == '#string'
    And match response.lastName == '#string'
    And match response.email == '#string'
    And assert response.email contains '@'
    And match response.password == '#string'
    And match response.phone == '#string'
    And match response.userStatus == '#number'

    Examples:
      | id | username    | firstName | lastName | email              | password | phone | userStatus |
      | 10 | theUser     | John      | James    | john@email.com     | 12345    | 12345 | 1          |
      | 20 | anotherUser | Jane      | Doe      | jane.doe@email.com | admin    | 67890 | 2          |

  Scenario Outline: Update user resource with missing or invalid payload
    Given path '/user', '<username>'
    And request '''<payload>'''
    When method PUT
    Then status <status>
    And match response == '#object'

    Examples:
      | username  | payload                                                                                          | status |
      | theUser   | { "id": 10, "username": "theUser", "firstName": "", "lastName": "", "email": "invalidemail", "userStatus": 1 } | 400 |
      | emptyUser | { "id": null, "username": "", "email": "", "userStatus": null }                                   | 400 |

  Scenario: Attempt to update a user that does not exist
    Given path '/user', 'nonexistentUser'
    And request '''{ 
      "id": 10, 
      "username": "nonexistentUser", 
      "firstName": "Alice", 
      "lastName": "Bob", 
      "email": "alicebob@email.com", 
      "password": "12345", 
      "phone": "98765", 
      "userStatus": 1 
    }'''
    When method PUT
    Then status 404
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Validate response headers for a successful operation
    Given path '/user', 'theUser'
    And request '''{ 
      "id": 10, 
      "username": "theUser", 
      "firstName": "John", 
      "lastName": "James", 
      "email": "john@email.com", 
      "password": "12345", 
      "phone": "12345", 
      "userStatus": 1 
    }'''
    When method PUT
    Then status 200
    And match responseHeaders['Content-Type'] == '#string'
    And match responseHeaders['Content-Length'] == '#string'
