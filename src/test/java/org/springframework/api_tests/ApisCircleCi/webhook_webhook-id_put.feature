# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /webhook/{webhook-id}_put for http method type PUT 
# RoostTestHash=986a22dda0
# 
# 

# ********RoostGPT********
Feature: Update an outbound webhook

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def authHeader = 'Basic REPLACE_BASIC_AUTH'

  Scenario Outline: Update webhook with valid payload
    Given path 'webhook', '<webhook-id>'
    And request """ 
    { 
      "name": "<name>",
      "events": <events>,
      "url": "<url>",
      "signing-secret": "<signing-secret>",
      "verify-tls": <verify-tls>
    }
    """
    And header Authorization = authHeader
    When method PUT
    Then status 200
    And match response == '#object'
    And match response.id == '<webhook-id>'
    And match response.url == '#string'
    And match response.verify-tls == '#boolean'
    And match response.id == '#uuid'
    And match response.signing-secret == '#string'
    And match response.updated-at == '#string'
    And match response.name == '#string'
    And match response.created-at == '#string'
    And match response.scope == '#object'
    And match response.scope.id == '#uuid'
    And match response.scope.type == '#string'
    And match response.events == '#array'
    And match response.events[*] == '#string'

    Examples:
      | webhook-id                          | name            | events                  | url                 | signing-secret | verify-tls |
      | 123e4567-e89b-12d3-a456-426614174000 | Test Webhook    | ["workflow-completed"]  | https://example.com | secret123      | true       |
      | 123e4567-e89b-12d3-a456-426614174001 | Another Webhook | ["job-completed"]       | https://example.org | secret456      | false      |

  Scenario: Update webhook with invalid webhook-id
    Given path 'webhook', 'invalid-webhook-id'
    And request """ 
    { 
      "name": "Invalid Webhook",
      "events": ["workflow-completed"],
      "url": "https://example.com",
      "signing-secret": "secret123",
      "verify-tls": true
    }
    """
    And header Authorization = authHeader
    When method PUT
    Then status 404
    And match response == '#object'
    And match response.message == '#string'
