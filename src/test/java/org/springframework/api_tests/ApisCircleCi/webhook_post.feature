# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /webhook_post for http method type POST 
# RoostTestHash=e7ff999073
# 
# 

# ********RoostGPT********
Feature: Webhook API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * header Authorization = 'Basic REPLACE_BASIC_AUTH'
    * header Content-Type = 'application/json'

  Scenario Outline: Create a new webhook with valid inputs
    Given path '/webhook'
    And request
      """
      { 
        "name": "<name>",
        "events": <events>,
        "url": "<url>",
        "verify-tls": <verifyTls>,
        "signing-secret": "<signingSecret>",
        "scope": {
          "id": "<scopeId>",
          "type": "<scopeType>"
        }
      }
      """
    When method POST
    Then status 201
    And match response == '#object'
    And match response.url == '#string'
    And match response['verify-tls'] == '#boolean'
    And match response.id == '#uuid'
    And match response['signing-secret'] == '#string'
    And match response['updated-at'] == '#date-time'
    And match response.name == '#string'
    And match response['created-at'] == '#date-time'
    And match response.scope == '#object'
    And match response.scope.id == '#uuid'
    And match response.scope.type == '#string'
    And match response.events == '#array'
    And match response.events[*] == '#string'

    Examples:
      | read('webhook_post.csv') |

  Scenario: Create a webhook with missing required fields
    Given path '/webhook'
    And request
      """
      { 
        "name": "IncompleteWebhook",
        "events": ["workflow-completed"]
      }
      """
    When method POST
    Then status 400
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Create a webhook with invalid URL
    Given path '/webhook'
    And request
      """
      { 
        "name": "InvalidURLWebhook",
        "events": ["job-completed"],
        "url": "http://invalid-url.com",
        "verify-tls": true,
        "signing-secret": "secret789",
        "scope": {
          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f10",
          "type": "project"
        }
      }
      """
    When method POST
    Then status 400
    And match response == '#object'
    And match response.message == '#string'
