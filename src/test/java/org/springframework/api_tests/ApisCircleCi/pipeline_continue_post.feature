# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /pipeline/continue_post for http method type POST 
# RoostTestHash=ebaca7e4ca
# 
# 

# ********RoostGPT********
Feature: Continue Pipeline API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * header Authorization = 'Basic REPLACE_BASIC_AUTH'
    * header Content-Type = 'application/json'

  Scenario Outline: Test POST /pipeline/continue with valid inputs
    Given path 'pipeline', 'continue'
    And request
      """
      { 
        "continuation-key": '<continuationKey>', 
        "configuration": '<configuration>', 
        "parameters": <parameters> 
      }
      """
    When method POST
    Then status 200
    And match response == { message: '#string' }
    And match responseHeaders['Content-Type'] contains 'application/json'

    Examples:
      | read('pipeline_continue_post.csv') |

  Scenario Outline: Test POST /pipeline/continue with missing required fields
    Given path 'pipeline', 'continue'
    And request
      """
      { 
        "configuration": '<configuration>', 
        "parameters": <parameters> 
      }
      """
    When method POST
    Then status 400
    And match response == { message: '#string' }
    And match responseHeaders['Content-Type'] contains 'application/json'

    Examples:
      | configuration | parameters               |
      | 'config123'   | { "deploy_prod": true }  |
      | 'config456'   | { "deploy_prod": false } |

  Scenario Outline: Test POST /pipeline/continue with invalid data types
    Given path 'pipeline', 'continue'
    And request
      """
      { 
        "continuation-key": '<continuationKey>', 
        "configuration": '<configuration>', 
        "parameters": <parameters> 
      }
      """
    When method POST
    Then status 400
    And match response == { message: '#string' }
    And match responseHeaders['Content-Type'] contains 'application/json'

    Examples:
      | continuationKey | configuration | parameters                |
      | 'key123'        | 'config123'   | { "deploy_prod": "true" } |
      | 'key456'        | 'config456'   | { "deploy_prod": 123 }    |

  Scenario: Test POST /pipeline/continue with additional unexpected fields
    Given path 'pipeline', 'continue'
    And request
      """
      { 
        "continuation-key": 'key123', 
        "configuration": 'config123', 
        "parameters": { "deploy_prod": true }, 
        "unexpected": "field" 
      }
      """
    When method POST
    Then status 400
    And match response == { message: '#string' }
    And match responseHeaders['Content-Type'] contains 'application/json'
