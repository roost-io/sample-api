# ********RoostGPT********

# Test generated by RoostGPT for test circle-ci using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /me_get for http method type GET 
# RoostTestHash=4f4e94f0a0
# 
# 

# ********RoostGPT********
Feature: Get User Information

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Verify the Get User Information API with valid Authorization Header
    Given path 'me'
    And def authToken = karate.properties['Circle-Token']
    And configure headers = { 'Circle-Token': '#(authToken)' }
    When method GET
    Then match responseStatus == 200
    And match response.id == '#string'
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario Outline: Verify Error Response for Invalid Authorization
    Given path 'me'
    And configure headers = { 'Circle-Token': 'invalid-token' }
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario Outline: Verify the Get User Information API with HTTP Basic Authentication
    Given path 'me'
    And def authToken = karate.properties['Circle-Token']
    And configure headers = { Authorization: 'Basic #(authToken)' }
    When method GET
    Then match responseStatus == 200
    And match response.id == '#string'
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario Outline: Verify Error Response for Invalid HTTP Basic Authentication
    Given path 'me'
    And configure headers = { Authorization: 'Basic invalid-basic-auth' }
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario Outline: Verify Authorization using Query Parameter API Key
    Given path 'me'
    And def authToken = karate.properties['AUTH_TOKEN']
    And param AUTH_TOKEN = authToken
    When method GET
    Then match responseStatus == 200
    And match response.id == '#string'
    And match response.id == '#uuid'
    And match response.login == '#string'
    And match response.name == '#string'

  Scenario Outline: Verify Error Response for Invalid Token in Query Parameter
    Given path 'me'
    And param AUTH_TOKEN = 'invalid-token'
    When method GET
    Then assert responseStatus != 200
    And match response == '#object'
    And match response.message == '#string'

  Scenario: Validate Response Headers
    Given path 'me'
    And def authToken = karate.properties['Circle-Token']
    And configure headers = { 'Circle-Token': '#(authToken)' }
    When method GET
    Then match responseHeaders['Content-Type'] == 'application/json'

  Scenario: Validate Default Error Response Structure
    Given path 'me'
    And configure headers = { 'Circle-Token': 'invalid-token' }
    When method GET
    Then assert responseStatus != 200
    And match response == """ { "message": '#string' } """
