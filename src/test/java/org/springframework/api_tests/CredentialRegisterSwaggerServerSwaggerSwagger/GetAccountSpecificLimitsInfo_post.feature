# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /GetAccountSpecificLimitsInfo_post for http method type POST 
# RoostTestHash=7d403119c4
# 
# 

# ********RoostGPT********
Feature: Get Account Specific Limits Info

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def headers = { Authorization: 'Bearer <token>', botId: '<botId>', accountId: '<accountId>' }

  Scenario Outline: Validate successful retrieval of account specific limits
    Given path '/GetAccountSpecificLimitsInfo'
    And request
      """
      { 
        customerId: <customerId>, 
        accountNumber: <accountNumber>, 
        cardNumber: <cardNumber> 
      }
      """
    And headers headers
    When method POST
    Then status 200
    And match response == '#[]'
    And match response[0].customerId == '#number'
    And match response[0].currency == '#string'
    And match response[0].withdrawal.limits.monthly.available == '#number'
    And match response[0].withdrawal.limits.monthly.maximum == '#number'
    And match response[0].withdrawal.limits.monthly.spent == '#number'
    And match response[0].withdrawal.limits.daily.available == '#number'
    And match response[0].withdrawal.limits.daily.maximum == '#number'
    And match response[0].withdrawal.limits.daily.spent == '#number'
    And match response[0].withdrawal.transactions.monthly.available == '#number'
    And match response[0].withdrawal.transactions.monthly.maximum == '#number'
    And match response[0].withdrawal.transactions.monthly.usedup == '#number'
    And match response[0].withdrawal.transactions.daily.available == '#number'
    And match response[0].withdrawal.transactions.daily.maximum == '#number'
    And match response[0].withdrawal.transactions.daily.usedup == '#number'
    And match response[0].purchase.limits.monthly.available == '#number'
    And match response[0].purchase.limits.monthly.maximum == '#number'
    And match response[0].purchase.limits.monthly.spent == '#number'
    And match response[0].purchase.limits.daily.available == '#number'
    And match response[0].purchase.limits.daily.maximum == '#number'
    And match response[0].purchase.limits.daily.spent == '#number'
    And match response[0].purchase.transactions.monthly.available == '#number'
    And match response[0].purchase.transactions.monthly.maximum == '#number'
    And match response[0].purchase.transactions.monthly.usedup == '#number'
    And match response[0].purchase.transactions.daily.available == '#number'
    And match response[0].purchase.transactions.daily.maximum == '#number'
    And match response[0].purchase.transactions.daily.usedup == '#number'
    And match response[0].txnsPerDay.available == '#number'
    And match response[0].txnsPerDay.maximum == '#number'
    And match response[0].txnsPerDay.usedup == '#number'
    And match response[0].txnsPerDay.amount == '#number'
    And match response[0].perTxn == '#number'

    Examples:
      | read('GetAccountSpecificLimitsInfo_post.csv') |

  Scenario: Validate authorization failure
    Given path '/GetAccountSpecificLimitsInfo'
    And request
      """
      { 
        customerId: 1045300, 
        accountNumber: ['1042345'], 
        cardNumber: ['123456'] 
      }
      """
    And headers { Authorization: 'Bearer invalid_token', botId: '<botId>', accountId: '<accountId>' }
    When method POST
    Then status 401
    And match response.err.message == '#string'

  Scenario: Validate not found error
    Given path '/GetAccountSpecificLimitsInfo'
    And request
      """
      { 
        customerId: 9999999, 
        accountNumber: ['9999999'], 
        cardNumber: ['9999999'] 
      }
      """
    And headers headers
    When method POST
    Then status 404
    And match response.err.message == '#string'
