# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /disputeTransaction_post for http method type POST 
# RoostTestHash=22f5e56b90
# 
# 

# ********RoostGPT********
Feature: Dispute Transaction API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Dispute a transaction with valid input
    Given path 'disputeTransaction'
    And request
      """
      { 
        "customerId": <customerId>, 
        "emailId": "<emailId>", 
        "transactionsData": [ 
          { 
            "transactionId": <transactionId>, 
            "reasonCode": "<reasonCode>" 
          } 
        ] 
      }
      """
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    When method POST
    Then status 200
    And match response == {}

    Examples:
      | read('disputeTransaction_post.csv') |

  Scenario Outline: Dispute a transaction with missing authorization
    Given path 'disputeTransaction'
    And request
      """
      { 
        "customerId": <customerId>, 
        "emailId": "<emailId>", 
        "transactionsData": [ 
          { 
            "transactionId": <transactionId>, 
            "reasonCode": "<reasonCode>" 
          } 
        ] 
      }
      """
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    When method POST
    Then status 401
    And match response.err.message == '#string'

    Examples:
      | customerId | emailId        | transactionId | reasonCode   | botId | accountId |
      |    1045300 | John@yahoo.com |         12345 | UIDENTF-CHRG | bot1  | account1  |

  Scenario Outline: Dispute a transaction with invalid endpoint
    Given path 'invalidEndpoint'
    And request
      """
      { 
        "customerId": <customerId>, 
        "emailId": "<emailId>", 
        "transactionsData": [ 
          { 
            "transactionId": <transactionId>, 
            "reasonCode": "<reasonCode>" 
          } 
        ] 
      }
      """
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    When method POST
    Then status 404
    And match response.err.message == '#string'

    Examples:
      | customerId | emailId        | transactionId | reasonCode   | Authorization | botId | accountId |
      |    1045300 | John@yahoo.com |         12345 | UIDENTF-CHRG | authToken     | bot1  | account1  |
