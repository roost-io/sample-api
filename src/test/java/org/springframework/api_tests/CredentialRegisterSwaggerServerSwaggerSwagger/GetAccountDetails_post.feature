# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /GetAccountDetails_post for http method type POST 
# RoostTestHash=f7fde44390
# 
# 

# ********RoostGPT********
Feature: Validate GetAccountDetails API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def headers = { Authorization: 'Bearer <token>', botId: '<botId>', accountId: '<accountId>' }

  Scenario Outline: Validate successful retrieval of account details
    Given path '/GetAccountDetails'
    And request
      """
      { 
        customerId: <customerId>, 
        accountInfo: [ 
          { 
            accountType: '<accountType>', 
            accountNumber: '<accountNumber>', 
            cardNumber: '<cardNumber>' 
          } 
        ] 
      }
      """
    And headers headers
    When method POST
    Then status 200
    And match response == '#[]'
    And match response[0].customerId == '#number'
    And match response[0].nameOnAccount == '#string'
    And match response[0].accountName == '#string'
    And match response[0].accountNickname == '#string'
    And match response[0].accountNumber == '#string'
    And match response[0].accountType == '#string'
    And match response[0].status == '#string'
    And match response[0].displayCardStatus == '#string'
    And match response[0].currency == '#string'
    And match response[0].availableBalance == '#number'
    And match response[0].currentBalance == '#number'
    And match response[0].minimumBalance == '#number'
    And match response[0].activatedDate == '#string'
    And match response[0].lastUpdated == '#string'
    And match response[0].personalBankerName == '#string'
    And match response[0].personalBankerContact.email == '#string'
    And match response[0].personalBankerContact.mobileNumber == '#string'
    And match response[0].maxTransactionLimit == '#number'
    And match response[0].userID == '#string'
    And match response[0].cardNetwork == '#string'
    And match response[0].cardName == '#string'
    And match response[0].P2PLimit == '#number'
    And match response[0].routingNumber == '#string'
    And match response[0].availableCashLimit == '#number'
    And match response[0].productName == '#string'
    And match response[0].productCode == '#string'
    And match response[0].location == '#string'
    And match response[0].email == '#string'
    And match response[0].phone == '#number'
    And match response[0].internalTransferFromEnabled == '#boolean'
    And match response[0].internalTransferToEnabled == '#boolean'
    And match response[0].p2pEnabled == '#boolean'
    And match response[0].paybillEnabled == '#boolean'
    And match response[0].chequeBookDetails.enabled == '#boolean'
    And match response[0].chequeBookDetails.allowed == '#number'
    And match response[0].chequeBookDetails.preferred == '#number'
    And match response[0].chequeBookDetails.numberOfLeaves == '#number'
    And match response[0].cardChannelInfo.ATM.enable == '#boolean'
    And match response[0].cardChannelInfo.ATM.limit == '#number'
    And match response[0].cardChannelInfo.offline.enable == '#boolean'
    And match response[0].cardChannelInfo.offline.limit == '#number'
    And match response[0].cardChannelInfo.international.enable == '#boolean'
    And match response[0].cardChannelInfo.international.limit == '#number'
    And match response[0].cardChannelInfo.online.enable == '#boolean'
    And match response[0].cardChannelInfo.online.limit == '#number'
    And match response[0].cardChannelInfo.contactless.enable == '#boolean'
    And match response[0].cardChannelInfo.contactless.limit == '#number'
    And match response[0].cardRestrictions.countries[0].countrycode == '#string'
    And match response[0].cardRestrictions.mcc[0].name == '#string'
    And match response[0].cardRestrictions.mcc[0].description == '#string'
    And match response[0].cardRestrictions.mcc[0].blocked == '#boolean'
    And match response[0].cardDetails[0].cardName == '#string'
    And match response[0].cardDetails[0].cardNumber == '#string'
    And match response[0].cardDetails[0].cardStatus == '#string'
    And match response[0].cardDetails[0].cardType == '#string'
    And match response[0].cardDetails[0].expDate == '#string'
    And match response[0].cardDetails[0].displayCardStatus == '#string'
    And match response[0].cardDetails[0].primaryCard == '#string'
    And match response[0].cardDetails[0].cardChannelInfo.ATM.enable == '#boolean'
    And match response[0].cardDetails[0].cardChannelInfo.ATM.limit == '#number'
    And match response[0].cardDetails[0].cardChannelInfo.offline.enable == '#boolean'
    And match response[0].cardDetails[0].cardChannelInfo.offline.limit == '#number'
    And match response[0].cardDetails[0].cardChannelInfo.international.enable == '#boolean'
    And match response[0].cardDetails[0].cardChannelInfo.international.limit == '#number'
    And match response[0].cardDetails[0].cardChannelInfo.online.enable == '#boolean'
    And match response[0].cardDetails[0].cardChannelInfo.online.limit == '#number'
    And match response[0].cardDetails[0].cardChannelInfo.contactless.enable == '#boolean'
    And match response[0].cardDetails[0].cardChannelInfo.contactless.limit == '#number'
    And match response[0].cardDetails[0].cardRestrictions.countries[0].countrycode == '#string'
    And match response[0].cardDetails[0].cardRestrictions.mcc[0].name == '#string'
    And match response[0].cardDetails[0].cardRestrictions.mcc[0].description == '#string'
    And match response[0].cardDetails[0].cardRestrictions.mcc[0].blocked == '#boolean'
    And match response[0].cardDetails[0].autopay.enabled == '#boolean'
    And match response[0].cardDetails[0].autopay.sourceAccountId == '#string'
    And match response[0].cardDetails[0].autopay.paymentType == '#string'
    And match response[0].cardDetails[0].autopay.onStatementDate == '#boolean'
    And match response[0].cardDetails[0].autopay.dayOfMonth == '#string'
    And match response[0].cardDetails[0].dueAmount == '#number'
    And match response[0].cardDetails[0].dueDate == '#string'
    And match response[0].cardDetails[0].minimumPaymentDue == '#number'
    And match response[0].cardDetails[0].partialPaymentPaid == '#number'

    Examples:
      | read('GetAccountDetails_post.csv') |

  Scenario: Validate authorization failure
    Given path '/GetAccountDetails'
    And request
      """
      { 
        customerId: 1045300, 
        accountInfo: [ 
          { 
            accountType: 'Savings Account', 
            accountNumber: '1042345', 
            cardNumber: '12345678901690' 
          } 
        ] 
      }
      """
    And headers { Authorization: 'Bearer invalid_token', botId: '<botId>', accountId: '<accountId>' }
    When method POST
    Then status 401
    And match response.err.message == '#string'

  Scenario: Validate not found error
    Given path '/GetAccountDetails'
    And request
      """
      { 
        customerId: 9999999, 
        accountInfo: [ 
          { 
            accountType: 'Savings Account', 
            accountNumber: '9999999', 
            cardNumber: '99999999999999' 
          } 
        ] 
      }
      """
    And headers headers
    When method POST
    Then status 404
    And match response.err.message == '#string'
