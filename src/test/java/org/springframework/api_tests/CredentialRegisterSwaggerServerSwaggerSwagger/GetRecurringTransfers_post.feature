# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /GetRecurringTransfers_post for http method type POST 
# RoostTestHash=c09c26dd8a
# 
# 

# ********RoostGPT********
Feature: Get Recurring Transfers API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Validate successful retrieval of recurring transfers
    Given path 'GetRecurringTransfers'
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    And request
      """
      { 
        "customerId": <customerId>, 
        "status": '<status>' 
      }
      """
    When method GET
    Then status 200
    And match response == '#[]'
    And match response[0].Type == '#string'
    And match response[0].CustomerId == '#number'
    And match response[0].Amount == '#number'
    And match response[0].SourceAccountNumber == '#string'
    And match response[0].TargetAccountNumber == '#string'
    And match response[0].Currency == '#string'
    And match response[0].Status == '#string'
    And match response[0].ScheduledDate == '#number'
    And match response[0].recurringOptions.amountType == '#string'
    And match response[0].recurringOptions.frequency.iterate == '#string'
    And match response[0].recurringOptions.frequency.duration.numberOfTransfers == '#number'
    And match response[0].id == '#string'

    Examples:
      | read('GetRecurringTransfers_post.csv') |

  Scenario Outline: Validate authorization failure
    Given path 'GetRecurringTransfers'
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    When method GET
    Then status 401
    And match response.err.message == '#string'

    Examples:
      | Authorization | botId  | accountId |
      |               | bot123 | acc456    |

  Scenario Outline: Validate not found error
    Given path 'GetRecurringTransfers'
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    And request
      """
      { 
        "customerId": <customerId>, 
        "status": '<status>' 
      }
      """
    When method GET
    Then status 404
    And match response.err.message == '#string'

    Examples:
      | Authorization | botId  | accountId | customerId | status |
      | Bearer token  | bot123 | acc999    |    9999999 | Active |
