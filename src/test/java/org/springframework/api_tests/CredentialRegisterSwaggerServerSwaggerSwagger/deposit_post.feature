# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /deposit_post for http method type POST 
# RoostTestHash=1ef90ed31b
# 
# 

# ********RoostGPT********
Feature: Deposit API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def headers = { Authorization: 'Bearer <token>', botId: '<botId>', accountId: '<accountId>' }

  Scenario Outline: Successful Deposit
    Given path 'deposit'
    And requestHeaders headers
    And request
      """
      { 
        customerId: <customerId>, 
        sourceAccountId: '<sourceAccountId>', 
        amount: '<amount>', 
        currency: '<currency>', 
        image: { 
          frontImage: '<frontImage>', 
          backImage: '<backImage>' 
        } 
      }
      """
    When method POST
    Then status 200

    Examples:
      | read('deposit_post.csv') |

  Scenario Outline: Unauthorized Deposit
    Given path 'deposit'
    And requestHeaders
      """
      { 
        botId: '<botId>', 
        accountId: '<accountId>' 
      }
      """
    And request
      """
      { 
        customerId: <customerId>, 
        sourceAccountId: '<sourceAccountId>', 
        amount: '<amount>', 
        currency: '<currency>', 
        image: { 
          frontImage: '<frontImage>', 
          backImage: '<backImage>' 
        } 
      }
      """
    When method POST
    Then status 401
    And match response == { err: { message: '#string' } }

    Examples:
      | botId | accountId | customerId | sourceAccountId | amount  | currency | frontImage         | backImage          |
      | botId | accountId |    1045300 |         1042345 | 1042222 | USD      | https://google.com | https://google.com |

  Scenario Outline: Deposit Not Found
    Given path 'deposit'
    And requestHeaders headers
    And request
      """
      { 
        customerId: <customerId>, 
        sourceAccountId: '<sourceAccountId>', 
        amount: '<amount>', 
        currency: '<currency>', 
        image: { 
          frontImage: '<frontImage>', 
          backImage: '<backImage>' 
        } 
      }
      """
    When method POST
    Then status 404
    And match response == { err: { message: '#string' } }

    Examples:
      | customerId | sourceAccountId | amount  | currency | frontImage         | backImage          |
      |    9999999 |         9999999 | 9999999 | USD      | https://google.com | https://google.com |
