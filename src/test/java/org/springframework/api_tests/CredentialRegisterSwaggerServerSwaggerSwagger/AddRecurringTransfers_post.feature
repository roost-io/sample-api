# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /AddRecurringTransfers_post for http method type POST 
# RoostTestHash=edc623316f
# 
# 

# ********RoostGPT********
Feature: Add Recurring Transfers API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def headers = { Authorization: 'Bearer <token>', botId: '<botId>', accountId: '<accountId>' }

  Scenario Outline: Test Add Recurring Transfers with valid inputs
    Given path 'AddRecurringTransfers'
    And requestHeaders headers
    And request
      """
      {
        "customerId": <customerId>,
        "amount": <amount>,
        "sourceAccountId": "<sourceAccountId>",
        "targetAccountId": "<targetAccountId>",
        "currency": "<currency>",
        "status": "<status>",
        "scheduledDate": <scheduledDate>,
        "recurringOptions": {
          "amountType": "<amountType>",
          "frequency": {
            "iterate": "<iterate>",
            "duration": {
              "numberOfTransfers": <numberOfTransfers>
            }
          }
        }
      }
      """
    When method POST
    Then status 200
    And match response == {}
    And match responseHeaders['Content-Type'] == 'application/json'

    Examples:
      | read('AddRecurringTransfers_post.csv') |

  Scenario Outline: Test Add Recurring Transfers with missing authorization
    Given path 'AddRecurringTransfers'
    And requestHeaders { botId: '<botId>', accountId: '<accountId>' }
    And request
      """
      {
        "customerId": <customerId>,
        "amount": <amount>,
        "sourceAccountId": "<sourceAccountId>",
        "targetAccountId": "<targetAccountId>",
        "currency": "<currency>",
        "status": "<status>",
        "scheduledDate": <scheduledDate>,
        "recurringOptions": {
          "amountType": "<amountType>",
          "frequency": {
            "iterate": "<iterate>",
            "duration": {
              "numberOfTransfers": <numberOfTransfers>
            }
          }
        }
      }
      """
    When method POST
    Then status 401
    And match response.err.message == '#string'

    Examples:
      | customerId | amount | sourceAccountId | targetAccountId | currency | status  | scheduledDate | amountType | iterate | numberOfTransfers |
      |    1045304 |     39 |         1042347 |         1043699 | USD      | Pending | 1616544000000 | Fixed      | Weekly  |                 3 |

  Scenario Outline: Test Add Recurring Transfers with invalid endpoint
    Given path 'InvalidEndpoint'
    And requestHeaders headers
    And request
      """
      {
        "customerId": <customerId>,
        "amount": <amount>,
        "sourceAccountId": "<sourceAccountId>",
        "targetAccountId": "<targetAccountId>",
        "currency": "<currency>",
        "status": "<status>",
        "scheduledDate": <scheduledDate>,
        "recurringOptions": {
          "amountType": "<amountType>",
          "frequency": {
            "iterate": "<iterate>",
            "duration": {
              "numberOfTransfers": <numberOfTransfers>
            }
          }
        }
      }
      """
    When method POST
    Then status 404
    And match response.err.message == '#string'

    Examples:
      | customerId | amount | sourceAccountId | targetAccountId | currency | status  | scheduledDate | amountType | iterate | numberOfTransfers |
      |    1045304 |     39 |         1042347 |         1043699 | USD      | Pending | 1616544000000 | Fixed      | Weekly  |                 3 |
