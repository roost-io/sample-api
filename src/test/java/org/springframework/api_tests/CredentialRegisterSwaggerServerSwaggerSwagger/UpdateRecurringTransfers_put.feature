# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /UpdateRecurringTransfers_put for http method type PUT 
# RoostTestHash=37a79cbf48
# 
# 

# ********RoostGPT********
Feature: Update Recurring Transfers API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * def headers = { Authorization: 'Bearer <token>', botId: '<botId>', accountId: '<accountId>' }

  Scenario Outline: Test Update Recurring Transfers with valid payload
    Given path '/UpdateRecurringTransfers'
    And requestHeaders headers
    And request
      """
      { 
        customerId: <customerId>, 
        paymentId: '<paymentId>', 
        sourceAccountId: '<sourceAccountId>', 
        targetAccountId: '<targetAccountId>', 
        scheduledDate: <scheduledDate>, 
        recurringOptions: { 
          amountType: '<amountType>', 
          frequency: { 
            iterate: '<iterate>', 
            duration: { 
              numberOfTransfers: <numberOfTransfers> 
            } 
          }, 
          updateTransferType: '<updateTransferType>' 
        } 
      }
      """
    When method PUT
    Then status 200

    Examples:
      | read('UpdateRecurringTransfers_put.csv') |

  Scenario Outline: Test Update Recurring Transfers with missing Authorization
    Given path '/UpdateRecurringTransfers'
    And requestHeaders { botId: '<botId>', accountId: '<accountId>' }
    And request
      """
      { 
        customerId: <customerId>, 
        paymentId: '<paymentId>', 
        sourceAccountId: '<sourceAccountId>', 
        targetAccountId: '<targetAccountId>', 
        scheduledDate: <scheduledDate>, 
        recurringOptions: { 
          amountType: '<amountType>', 
          frequency: { 
            iterate: '<iterate>', 
            duration: { 
              numberOfTransfers: <numberOfTransfers> 
            } 
          }, 
          updateTransferType: '<updateTransferType>' 
        } 
      }
      """
    When method PUT
    Then status 401
    And match response.err.message == '#string'

    Examples:
      | botId   | accountId   | customerId | paymentId        | sourceAccountId | targetAccountId | scheduledDate | amountType | iterate | numberOfTransfers | updateTransferType |
      | <botId> | <accountId> |    1045304 | 744a77644d67e891 |         1042347 |         1043699 | 1617148800000 | Fixed      | Weekly  |                 3 | Next               |

  Scenario Outline: Test Update Recurring Transfers with invalid endpoint
    Given path '/InvalidEndpoint'
    And requestHeaders headers
    And request
      """
      { 
        customerId: <customerId>, 
        paymentId: '<paymentId>', 
        sourceAccountId: '<sourceAccountId>', 
        targetAccountId: '<targetAccountId>', 
        scheduledDate: <scheduledDate>, 
        recurringOptions: { 
          amountType: '<amountType>', 
          frequency: { 
            iterate: '<iterate>', 
            duration: { 
              numberOfTransfers: <numberOfTransfers> 
            } 
          }, 
          updateTransferType: '<updateTransferType>' 
        } 
      }
      """
    When method PUT
    Then status 404
    And match response.err.message == '#string'

    Examples:
      | customerId | paymentId        | sourceAccountId | targetAccountId | scheduledDate | amountType | iterate | numberOfTransfers | updateTransferType |
      |    1045304 | 744a77644d67e891 |         1042347 |         1043699 | 1617148800000 | Fixed      | Weekly  |                 3 | Next               |
