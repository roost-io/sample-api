# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /GetCustomerInfo_post for http method type POST 
# RoostTestHash=da6199b435
# 
# 

# ********RoostGPT********
Feature: Get Customer Information API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * header Authorization = 'Bearer <token>'
    * header botId = '<botId>'
    * header accountId = '<accountId>'

  Scenario Outline: Validate successful retrieval of customer information
    Given path '/GetCustomerInfo'
    And request
      """
      { "customerId": <customerId> }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.alternatePhoneNumber == '#number'
    And match response.customerId == '#string'
    And match response.email == '#string'
    And match response.identificationNumber == '#number'
    And match response.identificationType == '#string'
    And match response.image == '#string'
    And match response.isAlternateMobileNumber == '#boolean'
    And match response.isPrimaryMobileNumber == '#boolean'
    And match response.location == '#string'
    And match response.name == '#string'
    And match response.firstName == '#string'
    And match response.lastName == '#string'
    And match response.personalBanker == '#object'
    And match response.personalBanker.name == '#string'
    And match response.personalBanker.email == '#string'
    And match response.personalBanker.mobileNumber == '#string'
    And match response.phone == '#number'
    And match response.securityQuestions == '#array'
    And match response.securityQuestions[*] == '#string'
    And match response.segmentId == '#number'

    Examples:
      | read('GetCustomerInfo_post.csv') |

  Scenario: Validate authorization failure
    Given path '/GetCustomerInfo'
    And request
      """
      { "customerId": 1045300 }
      """
    And header Authorization = 'Bearer invalid_token'
    When method POST
    Then status 401
    And match response == '#object'
    And match response.err == '#object'
    And match response.err.message == '#string'

  Scenario: Validate not found error
    Given path '/GetCustomerInfo'
    And request
      """
      { "customerId": 9999999 }
      """
    When method POST
    Then status 404
    And match response == '#object'
    And match response.err == '#object'
    And match response.err.message == '#string'
