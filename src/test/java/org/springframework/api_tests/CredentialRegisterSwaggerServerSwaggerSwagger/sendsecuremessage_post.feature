# ********RoostGPT********

# Test generated by RoostGPT for test Karate_Test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /sendsecuremessage_post for http method type POST 
# RoostTestHash=62536877eb
# 
# 

# ********RoostGPT********
Feature: Secure Message API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Test sending secure message with valid inputs
    Given path 'sendsecuremessage'
    And request """ 
    { 
      "authType": "<authType>",
      "firstName": "<firstName>",
      "lastName": "<lastName>",
      "email": "<email>",
      "phoneNumber": <phoneNumber>,
      "topic": "<topic>",
      "message": "<message>",
      "availableTime": "<availableTime>",
      "chatHistory": "<chatHistory>",
      "cif": <cif>
    }
    """
    And header Authorization = '<Authorization>'
    And header botId = '<botId>'
    And header accountId = '<accountId>'
    When method POST
    Then status 200

  Examples:
    | authType   | firstName | lastName | email           | phoneNumber | topic                      | message                           | availableTime | chatHistory                         | cif    | Authorization | botId | accountId |
    | Authorized | James     | William  | James@gmail.com | 9787643445  | Routing and Account Number | Unable to find my routing number. | nighttime    | html formatted message sent as string | 1045310 | Bearer token  | bot1 | acc1      |

  Scenario: Test sending secure message with missing Authorization header
    Given path 'sendsecuremessage'
    And request """ 
    { 
      "authType": "Authorized",
      "firstName": "James",
      "lastName": "William",
      "email": "James@gmail.com",
      "phoneNumber": 9787643445,
      "topic": "Routing and Account Number",
      "message": "Unable to find my routing number.",
      "availableTime": "nighttime",
      "chatHistory": "html formatted message sent as string",
      "cif": 1045310
    }
    """
    And header botId = 'bot1'
    And header accountId = 'acc1'
    When method POST
    Then status 401
    And match response.err.message == '#string'

  Scenario: Test sending secure message with missing botId header
    Given path 'sendsecuremessage'
    And request """ 
    { 
      "authType": "Authorized",
      "firstName": "James",
      "lastName": "William",
      "email": "James@gmail.com",
      "phoneNumber": 9787643445,
      "topic": "Routing and Account Number",
      "message": "Unable to find my routing number.",
      "availableTime": "nighttime",
      "chatHistory": "html formatted message sent as string",
      "cif": 1045310
    }
    """
    And header Authorization = 'Bearer token'
    And header accountId = 'acc1'
    When method POST
    Then status 401
    And match response.err.message == '#string'

  Scenario: Test sending secure message with missing accountId header
    Given path 'sendsecuremessage'
    And request """ 
    { 
      "authType": "Authorized",
      "firstName": "James",
      "lastName": "William",
      "email": "James@gmail.com",
      "phoneNumber": 9787643445,
      "topic": "Routing and Account Number",
      "message": "Unable to find my routing number.",
      "availableTime": "nighttime",
      "chatHistory": "html formatted message sent as string",
      "cif": 1045310
    }
    """
    And header Authorization = 'Bearer token'
    And header botId = 'bot1'
    When method POST
    Then status 401
    And match response.err.message == '#string'

  Scenario: Test sending secure message with invalid endpoint
    Given path 'invalidendpoint'
    And request """ 
    { 
      "authType": "Authorized",
      "firstName": "James",
      "lastName": "William",
      "email": "James@gmail.com",
      "phoneNumber": 9787643445,
      "topic": "Routing and Account Number",
      "message": "Unable to find my routing number.",
      "availableTime": "nighttime",
      "chatHistory": "html formatted message sent as string",
      "cif": 1045310
    }
    """
    And header Authorization = 'Bearer token'
    And header botId = 'bot1'
    And header accountId = 'acc1'
    When method POST
    Then status 404
    And match response.err.message == '#string'
