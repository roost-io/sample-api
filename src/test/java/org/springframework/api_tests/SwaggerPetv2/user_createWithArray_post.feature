# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /user/createWithArray_post for http method type POST 
# RoostTestHash=2fceff8367
# 
# 

# ********RoostGPT********
Feature: Create Users With Array Input

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario: Create users with valid array input
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": 1,
          "username": "user1",
          "firstName": "John",
          "lastName": "Doe",
          "email": "john.doe@example.com",
          "password": "password123",
          "phone": "1234567890",
          "userStatus": 1
        },
        {
          "id": 2,
          "username": "user2",
          "firstName": "Jane",
          "lastName": "Smith",
          "email": "jane.smith@example.com",
          "password": "password456",
          "phone": "0987654321",
          "userStatus": 0
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with single user in array
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": 100,
          "username": "singleuser",
          "firstName": "Single",
          "lastName": "User",
          "email": "single.user@example.com",
          "password": "singlepass",
          "phone": "5555555555",
          "userStatus": 1
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with minimal required fields
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "username": "minimaluser1"
        },
        {
          "username": "minimaluser2"
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with all fields populated
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": 999,
          "username": "fulluser",
          "firstName": "Full",
          "lastName": "Details",
          "email": "full.details@example.com",
          "password": "fullpassword",
          "phone": "1111111111",
          "userStatus": 2
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with empty array
    Given path '/v2/user/createWithArray'
    And request []
    When method POST
    Then status 200

  Scenario: Create users with null values in fields
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": null,
          "username": "nulluser",
          "firstName": null,
          "lastName": null,
          "email": null,
          "password": "password",
          "phone": null,
          "userStatus": null
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with integer fields as strings
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": "123",
          "username": "stringiduser",
          "firstName": "String",
          "lastName": "ID",
          "email": "string.id@example.com",
          "password": "password",
          "phone": "1234567890",
          "userStatus": "1"
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with special characters in fields
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": 456,
          "username": "special@user#1",
          "firstName": "Spéciàl",
          "lastName": "Chäracters",
          "email": "special.chars@example.com",
          "password": "p@ssw0rd!",
          "phone": "+1-234-567-8900",
          "userStatus": 1
        }
      ]
      """
    When method POST
    Then status 200

  Scenario: Create users with long string values
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": 789,
          "username": "verylongusernamethatexceedsnormallimits",
          "firstName": "VeryLongFirstNameThatMightExceedTypicalLimits",
          "lastName": "VeryLongLastNameThatMightExceedTypicalLimits",
          "email": "very.long.email.address@example.com",
          "password": "verylongpasswordthatmightexceedtypicallimits",
          "phone": "123456789012345678901234567890",
          "userStatus": 1
        }
      ]
      """
    When method POST
    Then status 200

  Scenario Outline: Create users with different user status values
    Given path '/v2/user/createWithArray'
    And request
      """
      [
        {
          "id": <id>,
          "username": "<username>",
          "firstName": "Test",
          "lastName": "User",
          "email": "test@example.com",
          "password": "password",
          "phone": "1234567890",
          "userStatus": <userStatus>
        }
      ]
      """
    When method POST
    Then status 200

    Examples:
      | read('user_createWithArray_post.csv') |

  Scenario: Create users with missing request body
    Given path '/v2/user/createWithArray'
    When method POST
    Then status 400

  Scenario: Create users with invalid JSON format
    Given path '/v2/user/createWithArray'
    And request '{"invalid": json}'
    When method POST
    Then status 400

  Scenario: Create users with non-array request body
    Given path '/v2/user/createWithArray'
    And request
      """
      {
        "id": 1,
        "username": "notarray",
        "firstName": "Not",
        "lastName": "Array"
      }
      """
    When method POST
    Then status 400
