# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /user/login_get for http method type GET 
# RoostTestHash=d905dac95c
# 
# 

# ********RoostGPT********
Feature: User Login API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario: Successful user login with valid credentials
    Given path '/v2/user/login'
    And param username = 'testuser'
    And param password = 'testpass123'
    When method GET
    Then status 200
    And match responseType == 'string'
    And match response == '#string'
    And match responseHeaders['X-Expires-After'] == '#string'
    And match responseHeaders['X-Rate-Limit'] == '#number'

  Scenario: Login with invalid username password combination
    Given path '/v2/user/login'
    And param username = 'invaliduser'
    And param password = 'wrongpassword'
    When method GET
    Then status 400

  Scenario: Login with missing username parameter
    Given path '/v2/user/login'
    And param password = 'testpass123'
    When method GET
    Then status 400

  Scenario: Login with missing password parameter
    Given path '/v2/user/login'
    And param username = 'testuser'
    When method GET
    Then status 400

  Scenario: Login with empty username
    Given path '/v2/user/login'
    And param username = ''
    And param password = 'testpass123'
    When method GET
    Then status 400

  Scenario: Login with empty password
    Given path '/v2/user/login'
    And param username = 'testuser'
    And param password = ''
    When method GET
    Then status 400

  Scenario: Login with both parameters missing
    Given path '/v2/user/login'
    When method GET
    Then status 400

  Scenario Outline: Login with various credential combinations
    Given path '/v2/user/login'
    And param username = '<username>'
    And param password = '<password>'
    When method GET
    Then status <expectedStatus>
    And if (<expectedStatus> == 200) match responseType == 'string'
    And if (<expectedStatus> == 200) match responseHeaders['X-Expires-After'] == '#string'
    And if (<expectedStatus> == 200) match responseHeaders['X-Rate-Limit'] == '#number'

    Examples:
      | username    | password    | expectedStatus |
      | validuser   | validpass   |            200 |
      | admin       | admin123    |            200 |
      | testuser1   | password123 |            200 |
      | invaliduser | invalidpass |            400 |
      | user123     | wrongpass   |            400 |
      |             | password    |            400 |
      | username    |             |            400 |

  Scenario: Verify response headers format for successful login
    Given path '/v2/user/login'
    And param username = 'testuser'
    And param password = 'testpass123'
    When method GET
    Then status 200
    And match response == '#string'
    And match responseHeaders['X-Expires-After'] == '#string'
    And match responseHeaders['X-Rate-Limit'] == '#number'
    And assert responseHeaders['X-Rate-Limit'] > 0

  Scenario: Login with special characters in username
    Given path '/v2/user/login'
    And param username = 'user@domain.com'
    And param password = 'testpass123'
    When method GET
    Then status 400

  Scenario: Login with special characters in password
    Given path '/v2/user/login'
    And param username = 'testuser'
    And param password = 'pass@#$%'
    When method GET
    Then status 400

  Scenario: Login with very long username
    Given path '/v2/user/login'
    And param username = 'verylongusernamethatexceedsnormallimitsandmightcauseissues'
    And param password = 'testpass123'
    When method GET
    Then status 400

  Scenario: Login with very long password
    Given path '/v2/user/login'
    And param username = 'testuser'
    And param password = 'verylongpasswordthatexceedsnormallimitsandmightcauseissueswiththeauthenticationsystem'
    When method GET
    Then status 400
