# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /store/order_post for http method type POST 
# RoostTestHash=340dd2a1e1
# 
# 

# ********RoostGPT********
Feature: Store Order API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Place order for a pet with valid data
    Given path '/v2/store/order'
    And request
      """
      {
        "id": <id>,
        "petId": <petId>,
        "quantity": <quantity>,
        "shipDate": "<shipDate>",
        "status": "<status>",
        "complete": <complete>
      }
      """
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.petId == '#number'
    And match response.quantity == '#number'
    And match response.shipDate == '#string'
    And match response.status == '#string'
    And match response.status == '#regex (placed|approved|delivered)'
    And match response.complete == '#boolean'

    Examples:
      | read('store_order_post.csv') |

  Scenario: Place order with minimal required data
    Given path '/v2/store/order'
    And request
      """
      {
        "petId": 100,
        "quantity": 1,
        "status": "placed"
      }
      """
    When method POST
    Then status 200
    And match response.id == '#number'
    And match response.petId == '#number'
    And match response.quantity == '#number'
    And match response.shipDate == '##string'
    And match response.status == '#string'
    And match response.status == '#regex (placed|approved|delivered)'
    And match response.complete == '##boolean'

  Scenario: Place order with all optional fields as null
    Given path '/v2/store/order'
    And request
      """
      {
        "id": null,
        "petId": 50,
        "quantity": 3,
        "shipDate": null,
        "status": "approved",
        "complete": null
      }
      """
    When method POST
    Then status 200
    And match response.id == '##number'
    And match response.petId == '#number'
    And match response.quantity == '#number'
    And match response.shipDate == '##string'
    And match response.status == '#string'
    And match response.status == '#regex (placed|approved|delivered)'
    And match response.complete == '##boolean'

  Scenario Outline: Place order with invalid data - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": <id>,
        "petId": <petId>,
        "quantity": <quantity>,
        "shipDate": "<shipDate>",
        "status": "<status>",
        "complete": <complete>
      }
      """
    When method POST
    Then status 400

    Examples:
      | id | petId | quantity | shipDate                 | status         | complete |
      | -1 |    10 |        2 | 2024-01-15T10:30:00.000Z | placed         | true     |
      |  1 |   -10 |        2 | 2024-01-15T10:30:00.000Z | placed         | true     |
      |  1 |    10 |       -2 | 2024-01-15T10:30:00.000Z | placed         | true     |
      |  1 |    10 |        2 | invalid-date             | placed         | true     |
      |  1 |    10 |        2 | 2024-01-15T10:30:00.000Z | invalid-status | true     |

  Scenario: Place order with empty request body - should return 400
    Given path '/v2/store/order'
    And request {}
    When method POST
    Then status 400

  Scenario: Place order with missing required fields - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": 1,
        "quantity": 2
      }
      """
    When method POST
    Then status 400

  Scenario: Place order with invalid JSON format - should return 400
    Given path '/v2/store/order'
    And request 'invalid json'
    When method POST
    Then status 400

  Scenario: Place order with string values for numeric fields - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": "string-id",
        "petId": "string-petId",
        "quantity": "string-quantity",
        "status": "placed"
      }
      """
    When method POST
    Then status 400

  Scenario: Place order with boolean values for numeric fields - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": true,
        "petId": false,
        "quantity": true,
        "status": "placed"
      }
      """
    When method POST
    Then status 400

  Scenario: Place order with array values for simple fields - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": [1, 2, 3],
        "petId": [10, 20],
        "quantity": [5],
        "status": ["placed", "approved"]
      }
      """
    When method POST
    Then status 400

  Scenario: Place order with object values for simple fields - should return 400
    Given path '/v2/store/order'
    And request
      """
      {
        "id": {"value": 1},
        "petId": {"value": 10},
        "quantity": {"value": 2},
        "status": {"value": "placed"}
      }
      """
    When method POST
    Then status 400
