# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /pet/findByStatus_get for http method type GET 
# RoostTestHash=44cafec54d
# 
# 

# ********RoostGPT********
Feature: Find Pets by Status API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Find pets by single status
    Given path '/v2/pet/findByStatus'
    And param status = '<status>'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == "available" || _ == "pending" || _ == "sold"'

    Examples:
      | read('pet_findByStatus_get.csv') |

  Scenario: Find pets by multiple status values
    Given path '/v2/pet/findByStatus'
    And param status = 'available'
    And param status = 'pending'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == "available" || _ == "pending" || _ == "sold"'

  Scenario: Find pets by all status values
    Given path '/v2/pet/findByStatus'
    And param status = 'available'
    And param status = 'pending'
    And param status = 'sold'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == "available" || _ == "pending" || _ == "sold"'

  Scenario Outline: Invalid status value should return 400
    Given path '/v2/pet/findByStatus'
    And param status = '<invalidStatus>'
    When method GET
    Then status 400

    Examples:
      | invalidStatus |
      | invalid       |
      | unknown       |
      | active        |
      | inactive      |

  Scenario: Missing required status parameter should return 400
    Given path '/v2/pet/findByStatus'
    When method GET
    Then status 400

  Scenario: Empty status parameter should return 400
    Given path '/v2/pet/findByStatus'
    And param status = ''
    When method GET
    Then status 400

  Scenario: Verify response content type for successful request
    Given path '/v2/pet/findByStatus'
    And param status = 'available'
    When method GET
    Then status 200
    And match header Content-Type contains 'application/json'

  Scenario: Verify required fields are present in response
    Given path '/v2/pet/findByStatus'
    And param status = 'available'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*] contains { name: '#string', photoUrls: '#[]' }
