# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /user/createWithList_post for http method type POST 
# RoostTestHash=41ad79e90d
# 
# 

# ********RoostGPT********
Feature: Create users with list input

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario: Create users with valid list input
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 1,
          "username": "user1",
          "firstName": "John",
          "lastName": "Doe",
          "email": "john.doe@example.com",
          "password": "password123",
          "phone": "1234567890",
          "userStatus": 1
        },
        {
          "id": 2,
          "username": "user2",
          "firstName": "Jane",
          "lastName": "Smith",
          "email": "jane.smith@example.com",
          "password": "password456",
          "phone": "0987654321",
          "userStatus": 0
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with single user in array
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 100,
          "username": "singleuser",
          "firstName": "Single",
          "lastName": "User",
          "email": "single.user@example.com",
          "password": "singlepass",
          "phone": "5555555555",
          "userStatus": 1
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with minimal required fields
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "username": "minimaluser"
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with all fields as null except username
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": null,
          "username": "nullfielduser",
          "firstName": null,
          "lastName": null,
          "email": null,
          "password": null,
          "phone": null,
          "userStatus": null
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with empty array
    Given path '/v2/user/createWithList'
    And request []
    When method post
    Then status 200

  Scenario Outline: Create users with various data types
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": <id>,
          "username": "<username>",
          "firstName": "<firstName>",
          "lastName": "<lastName>",
          "email": "<email>",
          "password": "<password>",
          "phone": "<phone>",
          "userStatus": <userStatus>
        }
      ]
      """
    When method post
    Then status 200

    Examples:
      | read('user_createWithList_post.csv') |

  Scenario: Create users with large array
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 2001,
          "username": "bulkuser1",
          "firstName": "Bulk",
          "lastName": "User1",
          "email": "bulk1@example.com",
          "password": "bulkpass1",
          "phone": "1111111111",
          "userStatus": 1
        },
        {
          "id": 2002,
          "username": "bulkuser2",
          "firstName": "Bulk",
          "lastName": "User2",
          "email": "bulk2@example.com",
          "password": "bulkpass2",
          "phone": "2222222222",
          "userStatus": 0
        },
        {
          "id": 2003,
          "username": "bulkuser3",
          "firstName": "Bulk",
          "lastName": "User3",
          "email": "bulk3@example.com",
          "password": "bulkpass3",
          "phone": "3333333333",
          "userStatus": 1
        },
        {
          "id": 2004,
          "username": "bulkuser4",
          "firstName": "Bulk",
          "lastName": "User4",
          "email": "bulk4@example.com",
          "password": "bulkpass4",
          "phone": "4444444444",
          "userStatus": 0
        },
        {
          "id": 2005,
          "username": "bulkuser5",
          "firstName": "Bulk",
          "lastName": "User5",
          "email": "bulk5@example.com",
          "password": "bulkpass5",
          "phone": "5555555555",
          "userStatus": 1
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with special characters in fields
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 3001,
          "username": "special_user@123",
          "firstName": "Spéciàl",
          "lastName": "Üser",
          "email": "special.user+test@example.com",
          "password": "P@ssw0rd!",
          "phone": "+1-555-123-4567",
          "userStatus": 1
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with long string values
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 4001,
          "username": "verylongusernamethatexceedsnormallimits",
          "firstName": "VeryLongFirstNameThatExceedsNormalLimits",
          "lastName": "VeryLongLastNameThatExceedsNormalLimits",
          "email": "verylongemailaddressthatexceedsnormallimits@example.com",
          "password": "VeryLongPasswordThatExceedsNormalLimits123!",
          "phone": "123456789012345678901234567890",
          "userStatus": 1
        }
      ]
      """
    When method post
    Then status 200

  Scenario: Create users with numeric string values
    Given path '/v2/user/createWithList'
    And request
      """
      [
        {
          "id": 5001,
          "username": "12345",
          "firstName": "123",
          "lastName": "456",
          "email": "123@456.com",
          "password": "789",
          "phone": "1234567890",
          "userStatus": 1
        }
      ]
      """
    When method post
    Then status 200
