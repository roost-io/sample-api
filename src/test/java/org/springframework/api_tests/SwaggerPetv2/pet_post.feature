# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=33f954929c
# 
# 

# ********RoostGPT********
Feature: Add a new pet to the store

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Add a new pet to the store with valid data
    Given path '/v2/pet'
    And request
      """
      {
        "id": <id>,
        "category": <category>,
        "name": "<name>",
        "photoUrls": <photoUrls>,
        "tags": <tags>,
        "status": "<status>"
      }
      """
    When method POST
    Then status 200
    And match response.id == '#? _ == null || typeof _ == "number"'
    And match response.category == '#? _ == null || typeof _ == "object"'
    And if (response.category != null) match response.category.id == '##number'
    And if (response.category != null) match response.category.name == '##string'
    And match response.name == '#string'
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'
    And match response.tags == '#? _ == null || typeof _ == "object"'
    And if (response.tags != null) match each response.tags[*].id == '##number'
    And if (response.tags != null) match each response.tags[*].name == '##string'
    And match response.status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

    Examples:
      | read('pet_post.csv') |

  Scenario: Add a new pet with minimal required fields
    Given path '/v2/pet'
    And request
      """
      {
        "name": "minimal pet",
        "photoUrls": ["http://example.com/minimal.jpg"]
      }
      """
    When method POST
    Then status 200
    And match response.id == '#? _ == null || typeof _ == "number"'
    And match response.category == '#? _ == null || typeof _ == "object"'
    And match response.name == '#string'
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'
    And match response.tags == '#? _ == null || typeof _ == "object"'
    And match response.status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

  Scenario: Add a new pet with XML content type
    Given path '/v2/pet'
    And header Content-Type = 'application/xml'
    And request
      """
      <Pet>
        <id>100</id>
        <category>
          <id>1</id>
          <name>Dogs</name>
        </category>
        <name>xml-doggie</name>
        <photoUrls>
          <photoUrl>http://example.com/xml-photo.jpg</photoUrl>
        </photoUrls>
        <tags>
          <tag>
            <id>1</id>
            <name>xml-tag</name>
          </tag>
        </tags>
        <status>available</status>
      </Pet>
      """
    When method POST
    Then status 200

  Scenario Outline: Add a new pet with invalid input - missing required fields
    Given path '/v2/pet'
    And request <requestBody>
    When method POST
    Then status 405
    And match response.description == '#? _ == null || typeof _ == "string"'

    Examples:
      | requestBody                                      |
      | {"id": 1, "category": {"id": 1, "name": "Dogs"}} |
      | {"name": "test"}                                 |
      | {"photoUrls": ["http://example.com/test.jpg"]}   |
      | {}                                               |

  Scenario: Add a new pet with invalid status enum value
    Given path '/v2/pet'
    And request
      """
      {
        "name": "invalid status pet",
        "photoUrls": ["http://example.com/invalid.jpg"],
        "status": "invalid_status"
      }
      """
    When method POST
    Then status 405
    And match response.description == '#? _ == null || typeof _ == "string"'

  Scenario: Add a new pet with invalid data types
    Given path '/v2/pet'
    And request
      """
      {
        "id": "invalid_id",
        "name": "test pet",
        "photoUrls": ["http://example.com/test.jpg"]
      }
      """
    When method POST
    Then status 405
    And match response.description == '#? _ == null || typeof _ == "string"'

  Scenario: Add a new pet with empty photoUrls array
    Given path '/v2/pet'
    And request
      """
      {
        "name": "empty photos pet",
        "photoUrls": []
      }
      """
    When method POST
    Then status 405
    And match response.description == '#? _ == null || typeof _ == "string"'

  Scenario: Add a new pet with complex nested structure
    Given path '/v2/pet'
    And request
      """
      {
        "id": 999,
        "category": {
          "id": 10,
          "name": "Exotic Pets"
        },
        "name": "complex pet",
        "photoUrls": [
          "http://example.com/photo1.jpg",
          "http://example.com/photo2.jpg",
          "http://example.com/photo3.jpg"
        ],
        "tags": [
          {
            "id": 100,
            "name": "rare"
          },
          {
            "id": 101,
            "name": "expensive"
          },
          {
            "id": 102,
            "name": "beautiful"
          }
        ],
        "status": "available"
      }
      """
    When method POST
    Then status 200
    And match response.id == '#? _ == null || typeof _ == "number"'
    And match response.category == '#? _ == null || typeof _ == "object"'
    And if (response.category != null) match response.category.id == '##number'
    And if (response.category != null) match response.category.name == '##string'
    And match response.name == '#string'
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'
    And match response.tags == '#? _ == null || typeof _ == "object"'
    And if (response.tags != null) match each response.tags[*].id == '##number'
    And if (response.tags != null) match each response.tags[*].name == '##string'
    And match response.status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'
