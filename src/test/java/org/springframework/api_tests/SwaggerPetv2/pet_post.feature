# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=33f954929c
# 
# 

# ********RoostGPT********
Feature: Add a new pet to the store

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Add a new pet with valid data
    Given path 'v2/pet'
    And request
      """
      { 
        "id": <id>, 
        "category": { "id": <categoryId>, "name": "<categoryName>" }, 
        "name": "<name>", 
        "photoUrls": <photoUrls>, 
        "tags": <tags>, 
        "status": "<status>" 
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.category.id == '#? _ == null || typeof _ == "number"'
    And match response.category.name == '#? _ == null || typeof _ == "string"'
    And match response.name == '#string'
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'
    And match response.tags == '#? _ == null || typeof _ == "array"'
    And match each response.tags[*].id == '#? _ == null || typeof _ == "number"'
    And match each response.tags[*].name == '#? _ == null || typeof _ == "string"'
    And match response.status == '#string'

    Examples:
      | read('pet_post.csv') |

  Scenario: Add a new pet with invalid input
    Given path 'v2/pet'
    And request
      """
      { 
        "id": "invalid", 
        "category": { "id": "invalid", "name": 123 }, 
        "name": 456, 
        "photoUrls": "invalid", 
        "tags": "invalid", 
        "status": 789 
      }
      """
    When method POST
    Then status 405
    And match response == '#null'
