# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /pet/{petId}_get for http method type GET 
# RoostTestHash=561990ad39
# 
# 

# ********RoostGPT********
Feature: Get Pet by ID API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { api_key: karate.properties['api_key'] }

  Scenario Outline: Get pet by ID - successful operation
    Given path '/v2/pet/<petId>'
    When method GET
    Then status 200
    And match response.id == '#? _ == null || typeof _ == "number"'
    And match response.category == '#? _ == null || typeof _ == "object"'
    And if (response.category != null) match response.category.id == '#? _ == null || typeof _ == "number"'
    And if (response.category != null) match response.category.name == '#? _ == null || typeof _ == "string"'
    And match response.name == '#string'
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'
    And match response.tags == '#? _ == null || typeof _ == "object"'
    And if (response.tags != null) match each response.tags[*].id == '#? _ == null || typeof _ == "number"'
    And if (response.tags != null) match each response.tags[*].name == '#? _ == null || typeof _ == "string"'
    And match response.status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

    Examples:
      | read('pet_petId_get.csv') |

  Scenario Outline: Get pet by ID - invalid ID supplied
    Given path '/v2/pet/<petId>'
    When method GET
    Then status 400

    Examples:
      | petId   |
      |      -1 |
      |       0 |
      | invalid |
      | abc     |

  Scenario Outline: Get pet by ID - pet not found
    Given path '/v2/pet/<petId>'
    When method GET
    Then status 404

    Examples:
      | petId     |
      | 999999999 |
      | 888888888 |
      | 777777777 |

  Scenario: Get pet by ID - verify required fields are present
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And match response contains { name: '#string', photoUrls: '#array' }
    And match response.name == '#present'
    And match response.photoUrls == '#present'

  Scenario: Get pet by ID - verify response content type
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And match header Content-Type contains 'application/json'

  Scenario: Get pet by ID - verify integer format for ID fields
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And if (response.id != null) match response.id == '#number'
    And if (response.category != null && response.category.id != null) match response.category.id == '#number'
    And if (response.tags != null) match each response.tags[*].id == '#? _ == null || typeof _ == "number"'

  Scenario: Get pet by ID - verify photoUrls array structure
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And match response.photoUrls == '#array'
    And match each response.photoUrls[*] == '#string'

  Scenario: Get pet by ID - verify tags array structure
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And if (response.tags != null) match response.tags == '#array'
    And if (response.tags != null) match each response.tags[*] == '#object'
    And if (response.tags != null) match each response.tags[*].id == '#? _ == null || typeof _ == "number"'
    And if (response.tags != null) match each response.tags[*].name == '#? _ == null || typeof _ == "string"'

  Scenario: Get pet by ID - verify status enum values
    Given path '/v2/pet/1'
    When method GET
    Then status 200
    And if (response.status != null) match response.status == '#? _ == "available" || _ == "pending" || _ == "sold"'
