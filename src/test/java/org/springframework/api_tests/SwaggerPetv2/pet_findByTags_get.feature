# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /pet/findByTags_get for http method type GET 
# RoostTestHash=9124f669d9
# 
# 

# ********RoostGPT********
Feature: Find Pets by Tags API

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Find pets by single tag
    Given path '/v2/pet/findByTags'
    And param tags = '<tag>'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

    Examples:
      | read('pet_findByTags_get.csv') |

  Scenario: Find pets by multiple tags
    Given path '/v2/pet/findByTags'
    And param tags = 'tag1'
    And param tags = 'tag2'
    And param tags = 'tag3'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

  Scenario: Find pets with empty result
    Given path '/v2/pet/findByTags'
    And param tags = 'nonexistenttag'
    When method GET
    Then status 200
    And match response == '#[]'

  Scenario Outline: Invalid tag values should return 400
    Given path '/v2/pet/findByTags'
    And param tags = '<invalidTag>'
    When method GET
    Then status 400

    Examples:
      | invalidTag |
      |            |
      | null       |
      | undefined  |

  Scenario: Missing required tags parameter should return 400
    Given path '/v2/pet/findByTags'
    When method GET
    Then status 400

  Scenario: Find pets by tags with special characters
    Given path '/v2/pet/findByTags'
    And param tags = 'tag-with-dash'
    And param tags = 'tag_with_underscore'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'

  Scenario: Verify response structure for successful operation
    Given path '/v2/pet/findByTags'
    And param tags = 'tag1'
    When method GET
    Then status 200
    And match response == '#[]'
    And if (response.length > 0) karate.call('classpath:validate-pet-structure.js', response[0])

  Scenario: Find pets by case sensitive tags
    Given path '/v2/pet/findByTags'
    And param tags = 'TAG1'
    When method GET
    Then status 200
    And match response == '#[]'

  Scenario: Find pets with numeric tag values
    Given path '/v2/pet/findByTags'
    And param tags = '123'
    And param tags = '456'
    When method GET
    Then status 200
    And match response == '#[]'
    And match each response[*].id == '##number'
    And match each response[*].category == '#? _ == null || typeof _ == "object"'
    And match each response[*].category.id == '##number'
    And match each response[*].category.name == '##string'
    And match each response[*].name == '#string'
    And match each response[*].photoUrls == '#[]'
    And match each response[*].photoUrls[*] == '#string'
    And match each response[*].tags == '#? _ == null || typeof _ == "object"'
    And match each response[*].tags[*].id == '##number'
    And match each response[*].tags[*].name == '##string'
    And match each response[*].status == '#? _ == null || _ == "available" || _ == "pending" || _ == "sold"'
