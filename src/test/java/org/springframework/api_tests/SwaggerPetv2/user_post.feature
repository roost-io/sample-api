# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /user_post for http method type POST 
# RoostTestHash=d815599fc6
# 
# 

# ********RoostGPT********
Feature: User Management API Tests

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase

  Scenario Outline: Create user with valid data
    Given path 'v2/user'
    And request
      """
      { 
        "id": <id>, 
        "username": '<username>', 
        "firstName": '<firstName>', 
        "lastName": '<lastName>', 
        "email": '<email>', 
        "password": '<password>', 
        "phone": '<phone>', 
        "userStatus": <userStatus> 
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '##number'
    And match response.username == '##string'
    And match response.firstName == '##string'
    And match response.lastName == '##string'
    And match response.email == '##string'
    And match response.password == '##string'
    And match response.phone == '##string'
    And match response.userStatus == '##number'

    Examples:
      | read('user_post.csv') |

  Scenario: Create user with missing required fields
    Given path 'v2/user'
    And request
      """
      { 
        "username": 'user3', 
        "firstName": 'Alice', 
        "lastName": 'Brown' 
      }
      """
    When method POST
    Then status 400
    And match response == '#object'
    And match response.message == '##string'

  Scenario: Create user with invalid data types
    Given path 'v2/user'
    And request
      """
      { 
        "id": 'invalid', 
        "username": 123, 
        "firstName": true, 
        "lastName": false, 
        "email": 456, 
        "password": 789, 
        "phone": null, 
        "userStatus": 'active' 
      }
      """
    When method POST
    Then status 400
    And match response == '#object'
    And match response.message == '##string'
