# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /pet/{petId}/uploadImage_post for http method type POST 
# RoostTestHash=8dac89cb33
# 
# 

# ********RoostGPT********
Feature: Upload Image for Pet

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Upload image for a pet with valid data
    Given path 'v2/pet', <petId>, 'uploadImage'
    And multipart field additionalMetadata = <additionalMetadata>
    And multipart file file =
      """
      { 
        read: <filePath>, 
        filename: <fileName>, 
        contentType: <fileType> 
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.type == '#string'
    And match response.message == '#string'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario: Upload image for a pet without file
    Given path 'v2/pet', 789, 'uploadImage'
    And multipart field additionalMetadata = 'Metadata without file'
    When method POST
    Then status 200
    And match response == '#object'
    And match response.code == '#number'
    And match response.type == '#string'
    And match response.message == '#string'

  Scenario: Upload image for a pet with invalid petId
    Given path 'v2/pet', 'invalidId', 'uploadImage'
    And multipart field additionalMetadata = 'Invalid petId test'
    And multipart file file =
      """
      { 
        read: 'classpath:image.jpg', 
        filename: 'image.jpg', 
        contentType: 'image/jpeg' 
      }
      """
    When method POST
    Then status 400
    And match response == '#object'
    And match response.code == '#number'
    And match response.type == '#string'
    And match response.message == '#string'
