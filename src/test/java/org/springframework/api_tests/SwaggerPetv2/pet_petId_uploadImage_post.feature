# ********RoostGPT********

# Test generated by RoostGPT for test karate-pet using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /pet/{petId}/uploadImage_post for http method type POST 
# RoostTestHash=8dac89cb33
# 
# 

# ********RoostGPT********
Feature: Upload pet image

  Background:
    * def urlBase = karate.properties['API_HOST']
    * url urlBase
    * configure headers = { Authorization: karate.properties['AUTH_TOKEN'] }

  Scenario Outline: Upload image for pet with valid petId and form data
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = '<additionalMetadata>'
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with only petId
    Given path '/v2/pet/<petId>/uploadImage'
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with only file
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with only additional metadata
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = '<additionalMetadata>'
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with different file types
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = '<additionalMetadata>'
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with large petId values
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = '<additionalMetadata>'
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with empty additional metadata
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = ''
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario Outline: Upload image for pet with special characters in metadata
    Given path '/v2/pet/<petId>/uploadImage'
    And multipart field additionalMetadata = '<additionalMetadata>'
    And multipart file file = { read: '<filePath>', filename: '<fileName>', contentType: '<contentType>' }
    When method post
    Then status 200
    And match response == { code: '#number', type: '#string', message: '#string' }
    And match response.code == '#? typeof _ == "number"'
    And match response.type == '#? typeof _ == "string"'
    And match response.message == '#? typeof _ == "string"'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |
