# ********RoostGPT********

# Test generated by RoostGPT for test integration-artillary-petstore-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=9d3c7d64d4
# ROOST_METHOD_SIG_HASH=2b5f7094f6
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Query pets by status and tags',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Retrieve pets by tags',
#     steps: 'Given I set request-param "tags" to "trial,test"\n' +
#       'When I send GET request to "/pet/findByTags"\n' +
#       'Then the response status code should be 200\n' +
#       'And the response JSON should be an array',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Query pets by status and tags

  Background:
    * def PETSTORE_V3_3273D64931_URL = karate.properties['PETSTORE_V3_3273D64931_URL'] || karate.get('PETSTORE_V3_3273D64931_URL', 'http://localhost:4010')
    * def PETSTORE_V3_3273D64931_AUTH_TOKEN = karate.properties['PETSTORE_V3_3273D64931_AUTH_TOKEN'] || karate.get('PETSTORE_V3_3273D64931_AUTH_TOKEN', 'Bearer_Dummy_Token')
    * configure headers = { Authorization: PETSTORE_V3_3273D64931_AUTH_TOKEN }

  Scenario: Retrieve pets by tags
    * url PETSTORE_V3_3273D64931_URL
    And path '/pet/findByTags'
    And param tags = """ 
    [
      'trial', 
      'test'
    ]
    """
    When method GET
    Then status 200
    And match response == '#[]'

  Scenario: Validate schema for response items
    * url PETSTORE_V3_3273D64931_URL
    And path '/pet/findByTags'
    And param tags = """
    [
      'trial', 
      'test'
    ]
    """
    When method GET
    Then status 200
    And for each item in response
    * match item.id == '#number'
    * match item.name == '#string'
    * match item.category.id == '#number'
    * match item.category.name == '#string'
    * match item.photoUrls == '#[]'
    * match item.photoUrls[0] == '#string'
    * match item.tags == '#[]'
    * match item.tags[0].id == '#number'
    * match item.tags[0].name == '#string'
    * match item.status == '#string'
    * match item.status in ['available', 'pending', 'sold']

  Scenario Outline: Retrieve pets with invalid tags
    * url PETSTORE_V3_3273D64931_URL
    And path '/pet/findByTags'
    And param tags = <invalid_tags>
    When method GET
    Then status 400
    And match response.description contains 'Invalid tag value'

    Examples:
      | invalid_tags   |
      | ['invalid']    |
      | ['!@#']        |
      | ['123abc']     |

  Scenario Outline: Unexpected error handling
    * url PETSTORE_V3_3273D64931_URL
    And path '/pet/findByTags'
    And param tags = <unexpected_tags>
    When method GET
    Then status != 200
    And match response.description contains 'Unexpected error'

    Examples:
      | unexpected_tags |
      | []              |
