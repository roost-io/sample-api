# ********RoostGPT********

# Test generated by RoostGPT for test integration-artillary-petstore-v3 using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=64f8b358b3
# ROOST_METHOD_SIG_HASH=604f0c16a4
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Create and retrieve a pet',
#   background: 'Background:\n' +
#     '    Given the Petstore API is available at https://petstore3.swagger.io/api/v3',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Successfully create a new pet and retrieve it by ID',
#     steps: 'Given I set request-header "Content-Type" to "application/json"\n' +
#       'And I set request-body to:\n' +
#       '      """\n' +
#       '      {\n' +
#       '        "name": "Fluffy",\n' +
#       '        "tag": "cat"\n' +
#       '      }\n' +
#       'When I send POST request to "/pet"\n' +
#       'Then the response status code should be 200\n' +
#       'And the response JSON should include:\n' +
#       '      | name | Fluffy |\n' +
#       '      | tag  | cat    |\n' +
#       'And the response JSON should include an integer value for "id"\n' +
#       'When I extract the value of "id" as petId\n' +
#       'And I send GET request to "/pet/{petId}"\n' +
#       'Then the response status code should be 200\n' +
#       'And the response JSON.name should be "Fluffy"\n' +
#       'And the response JSON.tag should be "cat"',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Create and retrieve a pet

Background:
    * def PETSTORE_V3_3273D64931_URL = karate.properties['PETSTORE_V3_3273D64931_URL'] || karate.get('PETSTORE_V3_3273D64931_URL', 'http://localhost:4010')
    * def PETSTORE_V3_3273D64931_AUTH_TOKEN = karate.properties['PETSTORE_V3_3273D64931_AUTH_TOKEN'] || karate.get('PETSTORE_V3_3273D64931_AUTH_TOKEN', 'Bearer_Dummy_Token')

Scenario: Successfully create a new pet and retrieve it by ID
    * url PETSTORE_V3_3273D64931_URL
    * configure headers = { Authorization: PETSTORE_V3_3273D64931_AUTH_TOKEN }
    
    Given path '/pet'
    And header Content-Type = 'application/json'
    And request """
    {
        "id": 1,
        "name": "Fluffy",
        "category": {
            "id": 10,
            "name": "Cats"
        },
        "photoUrls": ["http://petstore.com/photos/fluffy.jpg"],
        "tags": [
            {
                "id": 100,
                "name": "tag1"
            },
            {
                "id": 101,
                "name": "tag2"
            }
        ],
        "status": "available"
    }
    """
    When method post
    Then status 200
    And match response == """
    {
        "id": "#number",
        "name": "Fluffy",
        "category": {
            "id": "#number",
            "name": "Cats"
        },
        "photoUrls": ["http://petstore.com/photos/fluffy.jpg"],
        "tags": [
            {
                "id": "#number",
                "name": "tag1"
            },
            {
                "id": "#number",
                "name": "tag2"
            }
        ],
        "status": "available"
    }
    """
    * def petId = response.id

Scenario: Successfully retrieve the created pet using GET request
    * url PETSTORE_V3_3273D64931_URL
    * configure headers = { Authorization: PETSTORE_V3_3273D64931_AUTH_TOKEN }

    Given path '/pet/' + petId
    When method get
    Then status 200
    And match response == """
    {
        "id": "#number",
        "name": "Fluffy",
        "category": {
            "id": "#number",
            "name": "Cats"
        },
        "photoUrls": ["http://petstore.com/photos/fluffy.jpg"],
        "tags": [
            {
                "id": "#number",
                "name": "tag1"
            },
            {
                "id": "#number",
                "name": "tag2"
            }
        ],
        "status": "available"
    }
    """

Scenario: Fail to retrieve a non-existent pet
    * url PETSTORE_V3_3273D64931_URL
    * configure headers = { Authorization: PETSTORE_V3_3273D64931_AUTH_TOKEN }

    Given path '/pet/999999'
    When method get
    Then status 404
    And match response == """
    {
        "message": "Pet not found",
        "code": 404
    }
    """

Scenario Outline: Validation failures when creating a pet
    * url PETSTORE_V3_3273D64931_URL
    * configure headers = { Authorization: PETSTORE_V3_3273D64931_AUTH_TOKEN }

    Given path '/pet'
    And header Content-Type = 'application/json'
    And request <inputPayload>
    When method post
    Then status <responseStatus>

Examples:
    | inputPayload                                                    | responseStatus |
    | { "id": null, "name": "Fluffy", "category": null, "photoUrls": [""], "tags": null, "status": null } | 400            |
    | {}                                                              | 422            |
