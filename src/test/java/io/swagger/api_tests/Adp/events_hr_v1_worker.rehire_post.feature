# ********RoostGPT********

# Test generated by RoostGPT for test adp_api_test_karate_sonnet4 using AI Type Claude AI and AI Model claude-sonnet-4-20250514
# 
# Feature file generated for /events/hr/v1/worker.rehire_post for http method type POST 
# RoostTestHash=9b314ae800
# 
# 

# ********RoostGPT********
Feature: Worker Rehire API Testing

Background:
  * def urlBase = karate.properties['API_HOST']
  * url urlBase

Scenario: Successfully rehire a worker with complete data
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And header roleCode = 'administrator'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "EMP001"
                },
                "person": {
                  "governmentIDs": [
                    {
                      "idValue": "123456789",
                      "nameCode": {
                        "codeValue": "SSN",
                        "shortName": "Social Security Number",
                        "longName": "Social Security Number"
                      }
                    }
                  ],
                  "legalName": {
                    "givenName": "John",
                    "middleName": "Michael",
                    "familyName1": "Doe",
                    "familyName2": "Smith",
                    "preferredSalutations": [
                      {
                        "typeCode": {
                          "codeValue": "FORMAL",
                          "shortName": "Formal"
                        },
                        "salutationCode": {
                          "codeValue": "MR",
                          "shortName": "Mr."
                        }
                      }
                    ],
                    "nickName": "Johnny"
                  },
                  "birthDate": "1990-01-15",
                  "legalAddress": {
                    "nameCode": {
                      "codeValue": "HOME",
                      "shortName": "Home"
                    },
                    "lineOne": "123 Main Street",
                    "lineTwo": "Apt 4B",
                    "lineThree": "Building A",
                    "cityName": "New York",
                    "countrySubdivisionLevel1": {
                      "codeValue": "NY"
                    },
                    "countryCode": "US",
                    "postalCode": "10001",
                    "deliveryPoint": "Front Door",
                    "customIndicators": [
                      {
                        "nameCode": {
                          "codeValue": "PRIMARY",
                          "shortName": "Primary"
                        },
                        "indicatorValue": true
                      }
                    ]
                  },
                  "communication": {
                    "landlines": [
                      {
                        "nameCode": {
                          "codeValue": "HOME",
                          "shortName": "Home"
                        },
                        "formattedNumber": "+1-555-123-4567"
                      }
                    ],
                    "mobiles": [
                      {
                        "nameCode": {
                          "codeValue": "PERSONAL",
                          "shortName": "Personal"
                        },
                        "formattedNumber": "+1-555-987-6543"
                      }
                    ],
                    "emails": [
                      {
                        "nameCode": {
                          "codeValue": "PERSONAL",
                          "shortName": "Personal"
                        },
                        "emailUri": "john.doe@email.com"
                      }
                    ]
                  },
                  "genderCode": {
                    "codeValue": "M",
                    "shortName": "Male"
                  },
                  "maritalStatusCode": {
                    "codeValue": "S",
                    "shortName": "Single"
                  },
                  "religionCode": {
                    "codeValue": "CHR",
                    "shortName": "Christian"
                  },
                  "disabledIndicator": false,
                  "passports": [
                    {
                      "documentID": "P123456789",
                      "typeCode": {
                        "codeValue": "PASSPORT",
                        "shortName": "Passport"
                      },
                      "countryCode": "US",
                      "issuingParty": {
                        "address": {
                          "lineThree": "Department of State"
                        }
                      },
                      "issueDate": "2020-01-01",
                      "expirationDate": "2030-01-01"
                    }
                  ],
                  "birthPlace": {
                    "cityName": "Boston",
                    "countryCode": "US"
                  },
                  "otherPersonalAddresses": [
                    {
                      "nameCode": {
                        "codeValue": "WORK",
                        "shortName": "Work"
                      },
                      "lineOne": "456 Business Ave",
                      "lineTwo": "Suite 100",
                      "lineThree": "Floor 5",
                      "cityName": "New York",
                      "countrySubdivisionLevel1": {
                        "codeValue": "NY"
                      },
                      "countryCode": "US",
                      "postalCode": "10002"
                    }
                  ],
                  "ethnicityCode": {
                    "codeValue": "CAUC",
                    "shortName": "Caucasian"
                  },
                  "citizenshipCountryCodes": [
                    {
                      "codeValue": "US",
                      "shortName": "United States"
                    }
                  ],
                  "customFieldGroup": {
                    "codeFields": [
                      {
                        "nameCode": {
                          "codeValue": "DEPT",
                          "shortName": "Department"
                        },
                        "codeValue": "IT",
                        "shortName": "Information Technology"
                      }
                    ],
                    "dateFields": [
                      {
                        "nameCode": {
                          "shortName": "Start Date",
                          "longName": "Employment Start Date"
                        },
                        "dateValue": "2024-01-01"
                      }
                    ]
                  }
                },
                "workerDates": {
                  "firstHireDate": "2020-01-01",
                  "originalHireDate": "2020-01-01",
                  "acquisitionDate": "2020-01-01",
                  "rehireDate": "2024-01-01",
                  "retirementDate": "2055-01-01"
                },
                "businessCommunication": {
                  "landlines": [
                    {
                      "nameCode": {
                        "codeValue": "OFFICE",
                        "shortName": "Office"
                      },
                      "formattedNumber": "+1-555-111-2222",
                      "extension": "1234"
                    }
                  ],
                  "mobiles": [
                    {
                      "nameCode": {
                        "codeValue": "BUSINESS",
                        "shortName": "Business"
                      },
                      "formattedNumber": "+1-555-333-4444"
                    }
                  ],
                  "emails": [
                    {
                      "nameCode": {
                        "codeValue": "BUSINESS",
                        "shortName": "Business"
                      },
                      "emailUri": "john.doe@company.com"
                    }
                  ]
                },
                "workAssignment": {
                  "reportsTo": [
                    {
                      "associateOID": "MGR001",
                      "workerID": {
                        "idValue": "MGR001",
                        "schemeCode": {
                          "codeValue": "EMP_ID",
                          "shortName": "Employee ID"
                        }
                      },
                      "reportsToWorkerName": {
                        "formattedName": "Jane Smith"
                      }
                    }
                  ],
                  "exitNoticeDuration": "P2W",
                  "primaryIndicator": true,
                  "expectedStartDate": "2024-01-01",
                  "assignmentStatus": {
                    "statusCode": {
                      "codeValue": "ACTIVE",
                      "shortName": "Active"
                    },
                    "reasonCode": {
                      "codeValue": "REHIRE",
                      "shortName": "Rehire"
                    }
                  },
                  "standardPayPeriodHours": {
                    "unitCode": {
                      "shortName": "Hours"
                    }
                  },
                  "assignmentCostCenters": [
                    {
                      "costCenterID": "CC001"
                    }
                  ],
                  "customFieldGroup": {
                    "codeFields": [
                      {
                        "nameCode": {
                          "codeValue": "LEVEL",
                          "shortName": "Level"
                        },
                        "codeValue": "SENIOR",
                        "shortName": "Senior"
                      }
                    ],
                    "dateFields": [
                      {
                        "nameCode": {
                          "codeValue": "REVIEW_DATE",
                          "shortName": "Review Date"
                        },
                        "dateValue": "2024-06-01"
                      }
                    ],
                    "numberFields": [
                      {
                        "nameCode": {
                          "codeValue": "YEARS_EXP",
                          "shortName": "Years Experience"
                        },
                        "numberValue": 5
                      }
                    ],
                    "stringFields": [
                      {
                        "nameCode": {
                          "codeValue": "SKILLS",
                          "shortName": "Skills"
                        },
                        "stringValue": "Java, Python, SQL"
                      }
                    ],
                    "indicatorFields": [
                      {
                        "nameCode": {
                          "codeValue": "REMOTE_ELIGIBLE",
                          "shortName": "Remote Eligible"
                        },
                        "indicatorValue": true
                      }
                    ]
                  },
                  "workerProbationPeriod": {
                    "endDate": "2024-04-01"
                  },
                  "workerTypeCode": {
                    "codeValue": "FTE",
                    "shortName": "Full Time Employee"
                  },
                  "workLevelCode": {
                    "codeValue": "L3",
                    "shortName": "Level 3"
                  },
                  "legalEntityID": "LE001",
                  "workerGroups": [
                    {
                      "groupCode": {
                        "shortName": "IT Department"
                      }
                    }
                  ],
                  "jobCode": {
                    "codeValue": "DEV001",
                    "shortName": "Software Developer"
                  },
                  "jobTitle": "Senior Software Developer",
                  "workShiftCode": {
                    "shortName": "Day Shift"
                  },
                  "standardHours": {
                    "hoursQuantity": "40",
                    "unitCode": {
                      "codeValue": "WEEKLY",
                      "shortName": "Weekly"
                    }
                  },
                  "fullTimeEquivalenceRatio": "1.0",
                  "assignedOrganizationalUnits": [
                    {
                      "nameCode": {
                        "codeValue": "IT_DEPT",
                        "shortName": "IT Department",
                        "longName": "Information Technology Department"
                      },
                      "typeCode": {
                        "codeValue": "DEPT",
                        "shortName": "Department"
                      }
                    }
                  ],
                  "homeWorkLocation": {
                    "nameCode": {
                      "codeValue": "NYC_OFFICE",
                      "shortName": "NYC Office"
                    }
                  },
                  "payrollFileNumber": "PF001",
                  "payrollGroupCode": "PG001",
                  "baseRemuneration": {
                    "effectiveDate": "2024-01-01",
                    "recordingBasisCode": {
                      "shortName": "Annual"
                    },
                    "payPeriodRateAmount": {
                      "nameCode": {
                        "shortName": "Salary"
                      },
                      "amountValue": 75000
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then status 200
  And match response.events == '#array'
  And match response.events[0].data.output.worker.workerID.idValue == '#string'
  And match response.events[0].data.output.worker.workerID.schemeCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workerID.schemeCode.shortName == '##string'
  And match response.events[0].data.output.worker.associateOID == '##string'
  And match response.events[0].data.output.worker.person.identityDocuments == '##array'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].documentID == '##string'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].typeCode.longName == '##string'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].typeCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].typeCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].countryCode == '##string'
  And match each response.events[0].data.output.worker.person.identityDocuments[*].expirationDate == '##string'
  And match response.events[0].data.output.worker.person.governmentIDs == '##array'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].idValue == '##string'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].nameCode.longName == '##string'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].countryCode == '##string'
  And match each response.events[0].data.output.worker.person.governmentIDs[*].expirationDate == '##string'
  And match response.events[0].data.output.worker.person.legalName.givenName == '##string'
  And match response.events[0].data.output.worker.person.legalName.familyName1 == '##string'
  And match response.events[0].data.output.worker.person.legalName.formattedName == '##string'
  And match response.events[0].data.output.worker.person.legalName.preferredSalutations == '##array'
  And match each response.events[0].data.output.worker.person.legalName.preferredSalutations[*].salutationCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.legalName.preferredSalutations[*].salutationCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.legalName.preferredSalutations[*].typeCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.legalName.preferredSalutations[*].typeCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.legalName.preferredSalutations[*].sequenceNumber == '##number'
  And match response.events[0].data.output.worker.person.legalName.nickName == '##string'
  And match response.events[0].data.output.worker.person.birthDate == '##string'
  And match response.events[0].data.output.worker.person.birthDateString == '##string'
  And match response.events[0].data.output.worker.person.communication.landlines == '##array'
  And match each response.events[0].data.output.worker.person.communication.landlines[*].formattedNumber == '##string'
  And match each response.events[0].data.output.worker.person.communication.landlines[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.communication.landlines[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.communication.mobiles == '##array'
  And match each response.events[0].data.output.worker.person.communication.mobiles[*].formattedNumber == '##string'
  And match each response.events[0].data.output.worker.person.communication.mobiles[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.communication.mobiles[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.communication.emails == '##array'
  And match each response.events[0].data.output.worker.person.communication.emails[*].emailUri == '##string'
  And match each response.events[0].data.output.worker.person.communication.emails[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.communication.emails[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.deceasedIndicator == '##boolean'
  And match response.events[0].data.output.worker.person.genderCode.codeValue == '##string'
  And match response.events[0].data.output.worker.person.genderCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.religionCode.codeValue == '##string'
  And match response.events[0].data.output.worker.person.religionCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.maritalStatusCode.codeValue == '##string'
  And match response.events[0].data.output.worker.person.maritalStatusCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.disabledIndicator == '##boolean'
  And match response.events[0].data.output.worker.person.birthPlace.cityName == '##string'
  And match response.events[0].data.output.worker.person.birthPlace.countryCode == '##string'
  And match response.events[0].data.output.worker.person.ethnicityCode.codeValue == '##string'
  And match response.events[0].data.output.worker.person.ethnicityCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.citizenshipCountryCodes == '##array'
  And match each response.events[0].data.output.worker.person.citizenshipCountryCodes[*].codeValue == '##string'
  And match each response.events[0].data.output.worker.person.citizenshipCountryCodes[*].shortName == '##string'
  And match response.events[0].data.output.worker.person.customFieldGroup.codeFields == '##array'
  And match each response.events[0].data.output.worker.person.customFieldGroup.codeFields[*].codeValue == '##string'
  And match each response.events[0].data.output.worker.person.customFieldGroup.codeFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.customFieldGroup.codeFields[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.customFieldGroup.codeFields[*].shortName == '##string'
  And match response.events[0].data.output.worker.person.customFieldGroup.dateFields == '##array'
  And match each response.events[0].data.output.worker.person.customFieldGroup.dateFields[*].dateValue == '##string'
  And match each response.events[0].data.output.worker.person.customFieldGroup.dateFields[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.customFieldGroup.dateFields[*].nameCode.longName == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.nameCode.codeValue == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.lineOne == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.lineTwo == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.cityName == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.countrySubdivisionLevel1.codeValue == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.postalCode == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.deliveryPoint == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.countryCode == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.customIndicators == '##array'
  And match each response.events[0].data.output.worker.person.legalAddress.customIndicators[*].indicatorValue == '##boolean'
  And match each response.events[0].data.output.worker.person.legalAddress.customIndicators[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.legalAddress.customIndicators[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.person.legalAddress.lineThree == '##string'
  And match response.events[0].data.output.worker.person.otherPersonalAddresses == '##array'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].customIndicators == '##array'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].customIndicators[*].indicatorValue == '##boolean'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].customIndicators[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].customIndicators[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].lineOne == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].lineTwo == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].lineThree == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].cityName == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].countrySubdivisionLevel1.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].countryCode == '##string'
  And match each response.events[0].data.output.worker.person.otherPersonalAddresses[*].postalCode == '##string'
  And match response.events[0].data.output.worker.person.passports == '##array'
  And match each response.events[0].data.output.worker.person.passports[*].documentID == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].typeCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].typeCode.shortName == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].countryCode == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].issuingParty.address.lineThree == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].issueDate == '##string'
  And match each response.events[0].data.output.worker.person.passports[*].expirationDate == '##string'
  And match response.events[0].data.output.worker.workAssignment.exitNoticeDuration == '##string'
  And match response.events[0].data.output.worker.workAssignment.assignmentStatus.statusCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.assignmentStatus.statusCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.assignmentStatus.reasonCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.assignmentStatus.reasonCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.workerProbationPeriod.endDate == '##string'
  And match response.events[0].data.output.worker.workAssignment.homeWorkLocation.address.countryCode == '##string'
  And match response.events[0].data.output.worker.workAssignment.homeWorkLocation.nameCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.homeWorkLocation.nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.reportsTo == '##array'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].associateOID == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].workerID.schemeCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].workerID.schemeCode.shortName == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].workerID.idValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].reportsToWorkerName.formattedName == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].reportsToRelationshipCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.reportsTo[*].reportsToRelationshipCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.payrollFileNumber == '##string'
  And match response.events[0].data.output.worker.workAssignment.customFieldGroup.codeFields == '##array'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.codeFields[*].codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.codeFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.codeFields[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.codeFields[*].shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.customFieldGroup.dateFields == '##array'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.dateFields[*].dateValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.dateFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.dateFields[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.customFieldGroup.indicatorFields == '##array'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.indicatorFields[*].indicatorValue == '##boolean'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.indicatorFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.indicatorFields[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.customFieldGroup.stringFields == '##array'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.stringFields[*].stringValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.stringFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.stringFields[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.customFieldGroup.numberFields == '##array'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.numberFields[*].numberValue == '##number'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.numberFields[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.customFieldGroup.numberFields[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.primaryIndicator == '##boolean'
  And match response.events[0].data.output.worker.workAssignment.legalEntityID == '##string'
  And match response.events[0].data.output.worker.workAssignment.expectedStartDate == '##string'
  And match response.events[0].data.output.worker.workAssignment.assignmentCostCenters == '##array'
  And match each response.events[0].data.output.worker.workAssignment.assignmentCostCenters[*].costCenterID == '##string'
  And match each response.events[0].data.output.worker.workAssignment.assignmentCostCenters[*].costCenterName == '##string'
  And match response.events[0].data.output.worker.workAssignment.workerTypeCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.workerTypeCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.workLevelCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.workLevelCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.workerGroups == '##array'
  And match each response.events[0].data.output.worker.workAssignment.workerGroups[*].groupCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.jobCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.jobCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.jobTitle == '##string'
  And match response.events[0].data.output.worker.workAssignment.workShiftCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.standardHours.unitCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workAssignment.standardHours.unitCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.fullTimeEquivalenceRatio == '##number'
  And match response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits == '##array'
  And match each response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits[*].nameCode.longName == '##string'
  And match each response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits[*].typeCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.workAssignment.assignedOrganizationalUnits[*].typeCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.standardPayPeriodHours.unitCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.payrollGroupCode == '##string'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.effectiveDate == '##string'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.hourlyRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.dailyRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.weeklyRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.monthlyRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.annualRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.recordingBasisCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.biweeklyRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.payPeriodRateAmount.nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.payPeriodRateAmount.amountValue == '##number'
  And match response.events[0].data.output.worker.workAssignment.baseRemuneration.payPeriodRateAmount.currencyCode == '##string'
  And match response.events[0].data.output.worker.workerDates.originalHireDate == '##string'
  And match response.events[0].data.output.worker.workerDates.adjustedServiceDate == '##string'
  And match response.events[0].data.output.worker.workerDates.acquisitionDate == '##string'
  And match response.events[0].data.output.worker.workerDates.retirementDate == '##string'
  And match response.events[0].data.output.worker.workerDates.rehireDate == '#string'
  And match response.events[0].data.output.worker.workerStatus.statusCode.codeValue == '##string'
  And match response.events[0].data.output.worker.workerStatus.statusCode.shortName == '##string'
  And match response.events[0].data.output.worker.businessCommunication.landlines == '##array'
  And match each response.events[0].data.output.worker.businessCommunication.landlines[*].formattedNumber == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.landlines[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.landlines[*].nameCode.shortName == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.landlines[*].extension == '##string'
  And match response.events[0].data.output.worker.businessCommunication.mobiles == '##array'
  And match each response.events[0].data.output.worker.businessCommunication.mobiles[*].formattedNumber == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.mobiles[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.mobiles[*].nameCode.shortName == '##string'
  And match response.events[0].data.output.worker.businessCommunication.emails == '##array'
  And match each response.events[0].data.output.worker.businessCommunication.emails[*].emailUri == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.emails[*].nameCode.codeValue == '##string'
  And match each response.events[0].data.output.worker.businessCommunication.emails[*].nameCode.shortName == '##string'
  And match response.confirmMessage.confirmMessageID.idValue == '##string'
  And match response.confirmMessage.confirmMessageID.schemeName == '##string'
  And match response.confirmMessage.confirmMessageID.schemeAgencyName == '##string'
  And match response.confirmMessage.createDateTime == '##string'
  And match response.confirmMessage.requestReceiptDateTime == '##string'
  And match response.confirmMessage.processMessages == '##array'
  And match each response.confirmMessage.processMessages[*].processMessageID.idValue == '##string'
  And match each response.confirmMessage.processMessages[*].processMessageID.schemeName == '##string'
  And match each response.confirmMessage.processMessages[*].processMessageID.schemeAgencyName == '##string'
  And match each response.confirmMessage.processMessages[*].messageTypeCode.codeValue == '##string'
  And match each response.confirmMessage.processMessages[*].userMessage.messageTxt == '##string'
  And match response.confirmMessage.resourceMessages == '##array'
  And match each response.confirmMessage.resourceMessages[*].resourceMessageID.idValue == '##string'
  And match each response.confirmMessage.resourceMessages[*].resourceMessageID.schemeName == '##string'
  And match each response.confirmMessage.resourceMessages[*].resourceMessageID.schemeAgencyName == '##string'
  And match each response.confirmMessage.resourceMessages[*].resourceStatusCode.codeValue == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].resourceStatusCode.codeValue == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.idValue == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.schemeName == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.schemeAgencyName == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].messageTypeCode.codeValue == '##string'
  And match each response.confirmMessage.resourceMessages[*].processMessages[*].userMessage.messageTxt == '##string'

Scenario Outline: Rehire worker with different role codes
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And header roleCode = '<roleCode>'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "<workerID>"
                },
                "person": {
                  "legalName": {
                    "givenName": "<givenName>",
                    "familyName1": "<familyName1>"
                  },
                  "birthDate": "<birthDate>",
                  "legalAddress": {
                    "nameCode": {
                      "codeValue": "HOME",
                      "shortName": "Home"
                    },
                    "lineOne": "<lineOne>",
                    "cityName": "<cityName>",
                    "countryCode": "<countryCode>"
                  },
                  "communication": {
                    "emails": [
                      {
                        "emailUri": "<emailUri>"
                      }
                    ]
                  },
                  "genderCode": {
                    "codeValue": "<genderCodeValue>",
                    "shortName": "<genderShortName>"
                  }
                },
                "workerDates": {
                  "rehireDate": "<rehireDate>"
                },
                "workAssignment": {
                  "reportsTo": [
                    {
                      "reportsToWorkerName": {
                        "formattedName": "<managerName>"
                      }
                    }
                  ],
                  "expectedStartDate": "<expectedStartDate>",
                  "workerTypeCode": {
                    "codeValue": "<workerTypeCode>",
                    "shortName": "<workerTypeShortName>"
                  },
                  "workLevelCode": {
                    "codeValue": "<workLevelCode>",
                    "shortName": "<workLevelShortName>"
                  },
                  "jobCode": {
                    "codeValue": "<jobCode>",
                    "shortName": "<jobShortName>"
                  },
                  "jobTitle": "<jobTitle>",
                  "fullTimeEquivalenceRatio": "<fullTimeEquivalenceRatio>",
                  "payrollFileNumber": "<payrollFileNumber>",
                  "payrollGroupCode": "<payrollGroupCode>",
                  "baseRemuneration": {
                    "effectiveDate": "<effectiveDate>",
                    "recordingBasisCode": {
                      "shortName": "<recordingBasisShortName>"
                    },
                    "payPeriodRateAmount": {
                      "nameCode": {
                        "shortName": "<payPeriodShortName>"
                      },
                      "amountValue": <amountValue>
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then status 200
  And match response.events == '#array'
  And match response.events[0].data.output.worker.workerDates.rehireDate == '#string'

  Examples:
    | read('events_hr_v1_worker.rehire_post.csv') |

Scenario: Rehire worker with minimal required data
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "EMP007"
                },
                "person": {
                  "legalName": {
                    "givenName": "Tom",
                    "familyName1": "Anderson"
                  },
                  "birthDate": "1990-07-20",
                  "legalAddress": {
                    "nameCode": {
                      "codeValue": "HOME",
                      "shortName": "Home"
                    },
                    "lineOne": "123 Test Street",
                    "cityName": "Test City",
                    "countryCode": "US"
                  },
                  "communication": {
                    "emails": [
                      {
                        "emailUri": "tom.anderson@test.com"
                      }
                    ]
                  },
                  "genderCode": {
                    "codeValue": "M",
                    "shortName": "Male"
                  }
                },
                "workerDates": {
                  "rehireDate": "2024-07-01"
                },
                "workAssignment": {
                  "reportsTo": [
                    {
                      "reportsToWorkerName": {
                        "formattedName": "Manager Name"
                      }
                    }
                  ],
                  "expectedStartDate": "2024-07-01",
                  "workerTypeCode": {
                    "codeValue": "FTE",
                    "shortName": "Full Time Employee"
                  },
                  "workLevelCode": {
                    "codeValue": "L1",
                    "shortName": "Level 1"
                  },
                  "jobCode": {
                    "codeValue": "JUN001",
                    "shortName": "Junior"
                  },
                  "jobTitle": "Junior Developer",
                  "fullTimeEquivalenceRatio": "1.0",
                  "payrollFileNumber": "PF007",
                  "payrollGroupCode": "PG007",
                  "baseRemuneration": {
                    "effectiveDate": "2024-07-01",
                    "recordingBasisCode": {
                      "shortName": "Annual"
                    },
                    "payPeriodRateAmount": {
                      "nameCode": {
                        "shortName": "Salary"
                      },
                      "amountValue": 55000
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then status 200
  And match response.events == '#array'
  And match response.events[0].data.output.worker.workerDates.rehireDate == '#string'

Scenario: Bad request - missing required fields
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "EMP008"
                },
                "person": {
                  "legalName": {
                    "givenName": "Test"
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then assert responseStatus != 200
  And match response.message.confirmMessage.confirmMessageID.idValue == '##string'
  And match response.message.confirmMessage.confirmMessageID.schemeName == '##string'
  And match response.message.confirmMessage.confirmMessageID.schemeAgencyName == '##string'
  And match response.message.confirmMessage.createDateTime == '##string'
  And match response.message.confirmMessage.requestReceiptDateTime == '##string'
  And match response.message.confirmMessage.processMessages == '##array'
  And match each response.message.confirmMessage.processMessages[*].processMessageID.idValue == '##string'
  And match each response.message.confirmMessage.processMessages[*].processMessageID.schemeName == '##string'
  And match each response.message.confirmMessage.processMessages[*].processMessageID.schemeAgencyName == '##string'
  And match each response.message.confirmMessage.processMessages[*].messageTypeCode.codeValue == '##string'
  And match each response.message.confirmMessage.processMessages[*].userMessage.messageTxt == '##string'
  And match response.message.confirmMessage.resourceMessages == '##array'
  And match each response.message.confirmMessage.resourceMessages[*].resourceMessageID.idValue == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].resourceMessageID.schemeName == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].resourceMessageID.schemeAgencyName == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].resourceStatusCode.codeValue == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].resourceStatusCode.codeValue == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.idValue == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.schemeName == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].processMessageID.schemeAgencyName == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].messageTypeCode.codeValue == '##string'
  And match each response.message.confirmMessage.resourceMessages[*].processMessages[*].userMessage.messageTxt == '##string'

Scenario: Unauthorized request - no authentication
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "EMP009"
                },
                "person": {
                  "legalName": {
                    "givenName": "Unauthorized",
                    "familyName1": "User"
                  },
                  "birthDate": "1990-01-01",
                  "legalAddress": {
                    "nameCode": {
                      "codeValue": "HOME",
                      "shortName": "Home"
                    },
                    "lineOne": "123 Test St",
                    "cityName": "Test City",
                    "countryCode": "US"
                  },
                  "communication": {
                    "emails": [
                      {
                        "emailUri": "unauthorized@test.com"
                      }
                    ]
                  },
                  "genderCode": {
                    "codeValue": "M",
                    "shortName": "Male"
                  }
                },
                "workerDates": {
                  "rehireDate": "2024-01-01"
                },
                "workAssignment": {
                  "reportsTo": [
                    {
                      "reportsToWorkerName": {
                        "formattedName": "Manager"
                      }
                    }
                  ],
                  "expectedStartDate": "2024-01-01",
                  "workerTypeCode": {
                    "codeValue": "FTE",
                    "shortName": "Full Time Employee"
                  },
                  "workLevelCode": {
                    "codeValue": "L1",
                    "shortName": "Level 1"
                  },
                  "jobCode": {
                    "codeValue": "TEST001",
                    "shortName": "Test Job"
                  },
                  "jobTitle": "Test Position",
                  "fullTimeEquivalenceRatio": "1.0",
                  "payrollFileNumber": "PF009",
                  "payrollGroupCode": "PG009",
                  "baseRemuneration": {
                    "effectiveDate": "2024-01-01",
                    "recordingBasisCode": {
                      "shortName": "Annual"
                    },
                    "payPeriodRateAmount": {
                      "nameCode": {
                        "shortName": "Salary"
                      },
                      "amountValue": 50000
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then status 401
  And match response.message == '#string'

Scenario: Internal server error simulation
  Given path '/events/hr/v1/worker.rehire'
  And header Accept = 'application/json'
  And header Content-Type = 'application/json'
  And request
    """
    {
      "events": [
        {
          "data": {
            "transform": {
              "worker": {
                "workerID": {
                  "idValue": "ERROR_TRIGGER"
                },
                "person": {
                  "legalName": {
                    "givenName": "Server",
                    "familyName1": "Error"
                  },
                  "birthDate": "1990-01-01",
                  "legalAddress": {
                    "nameCode": {
                      "codeValue": "HOME",
                      "shortName": "Home"
                    },
                    "lineOne": "123 Error St",
                    "cityName": "Error City",
                    "countryCode": "US"
                  },
                  "communication": {
                    "emails": [
                      {
                        "emailUri": "error@test.com"
                      }
                    ]
                  },
                  "genderCode": {
                    "codeValue": "M",
                    "shortName": "Male"
                  }
                },
                "workerDates": {
                  "rehireDate": "2024-01-01"
                },
                "workAssignment": {
                  "reportsTo": [
                    {
                      "reportsToWorkerName": {
                        "formattedName": "Manager"
                      }
                    }
                  ],
                  "expectedStartDate": "2024-01-01",
                  "workerTypeCode": {
                    "codeValue": "FTE",
                    "shortName": "Full Time Employee"
                  },
                  "workLevelCode": {
                    "codeValue": "L1",
                    "shortName": "Level 1"
                  },
                  "jobCode": {
                    "codeValue": "ERROR001",
                    "shortName": "Error Job"
                  },
                  "jobTitle": "Error Position",
                  "fullTimeEquivalenceRatio": "1.0",
                  "payrollFileNumber": "PF_ERROR",
                  "payrollGroupCode": "PG_ERROR",
                  "baseRemuneration": {
                    "effectiveDate": "2024-01-01",
                    "recordingBasisCode": {
                      "shortName": "Annual"
                    },
                    "payPeriodRateAmount": {
                      "nameCode": {
                        "shortName": "Salary"
                      },
                      "amountValue": 50000
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
    """
  When method POST
  Then status 500
  And match response.message == '#string'
