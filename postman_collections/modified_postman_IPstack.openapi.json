{
  "item": [
    {
      "name": "Specific Response with Fields Parameter",
      "request": {
        "name": "Specific Response with Fields Parameter",
        "description": {
          "content": "\\[optional\\] Set to your preferred output \"field(s)\" according to the Specify Output Fields section.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "134.201.250.155"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "fields",
              "value": "{{fields}}",
              "description": "[optional] Set to your preferred output field(s) according to the Specify Output Fields section.\n"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "134.201.250.155"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "{{fields}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "key": "transfer-encoding",
              "value": "{{transfer-encoding}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "date",
              "value": "{{date}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-apilayer-transaction-id",
              "value": "{{x-apilayer-transaction-id}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-origin",
              "value": "{{access-control-allow-origin}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-methods",
              "value": "{{access-control-allow-methods}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-headers",
              "value": "{{access-control-allow-headers}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-limit",
              "value": "{{x-quota-limit}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-remaining",
              "value": "{{x-quota-remaining}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-increment-usage",
              "value": "{{x-increment-usage}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-request-time",
              "value": "{{x-request-time}}",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"zip\": \"90012\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test IPStack-openapi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for 134.201.250.155?fields={{fields}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `zip` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`zip`)){\n                if(pm.expect(ld.get(pm.response.json(), `zip`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `zip`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`zip length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `zip`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`zip length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `zip`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "XML Output",
      "request": {
        "name": "XML Output",
        "description": {
          "content": "\\[optional\\] Set \"output\" to json or xml to choose between output formats.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "160.39.144.19"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "output",
              "value": "{{output}}",
              "description": "[optional] Set to json or xml to choose between output formats."
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "text/plain"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "160.39.144.19"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "output",
                  "value": "{{output}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "key": "transfer-encoding",
              "value": "{{transfer-encoding}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "date",
              "value": "{{date}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-apilayer-transaction-id",
              "value": "{{x-apilayer-transaction-id}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-origin",
              "value": "{{access-control-allow-origin}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-methods",
              "value": "{{access-control-allow-methods}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-headers",
              "value": "{{access-control-allow-headers}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-limit",
              "value": "{{x-quota-limit}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-remaining",
              "value": "{{x-quota-remaining}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-increment-usage",
              "value": "{{x-increment-usage}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-request-time",
              "value": "{{x-request-time}}",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "<?xml version=\"1.0\"?>\n<result>\n    <ip>160.39.144.19</ip>\n    <type>ipv4</type>\n    <continent_code>NA</continent_code>\n    <continent_name>North America</continent_name>\n    <country_code>US</country_code>\n    <country_name>United States</country_name>\n    <region_code>NY</region_code>\n    <region_name>New York</region_name>\n    <city>Manhattan</city>\n    <zip>10025</zip>\n    <latitude>40.7983512878418</latitude>\n    <longitude>-73.9631576538086</longitude>\n    <location>\n        <geoname_id>5125771</geoname_id>\n        <capital>Washington D.C.</capital>\n        <languages>\n            <code>en</code>\n            <name>English</name>\n            <native>English</native>\n        </languages>\n        <country_flag>https://assets.ipstack.com/flags/us.svg</country_flag>\n        <country_flag_emoji>&#x1F1FA;&#x1F1F8;</country_flag_emoji>\n        <country_flag_emoji_unicode>U+1F1FA U+1F1F8</country_flag_emoji_unicode>\n        <calling_code>1</calling_code>\n        <is_eu></is_eu>\n    </location>\n    <time_zone>\n        <id>America/New_York</id>\n        <current_time>2024-02-15 08:38:46-05:00</current_time>\n        <gmt_offset>-18000</gmt_offset>\n        <code>EST</code>\n        <is_daylight_saving></is_daylight_saving>\n    </time_zone>\n    <currency>\n        <code>USD</code>\n        <name>US Dollar</name>\n        <plural>US dollars</plural>\n        <symbol>$</symbol>\n        <symbol_native>$</symbol_native>\n    </currency>\n    <connection>\n        <asn>14</asn>\n        <isp>Columbia University</isp>\n    </connection>\n</result>",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test IPStack-openapi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for 160.39.144.19?output={{output}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Response body is present\", function () {\n            pm.expect(pm.response.text()).to.not.be.empty;\n        });\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "XML Output",
      "request": {
        "name": "XML Output",
        "description": {
          "content": "\\[optional\\] Set \"output\" to json or xml to choose between output formats.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "72.229.28.185,110.174.165.78"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "",
              "value": "{{}}"
            },
            {
              "disabled": false,
              "key": "output",
              "value": "{{output}}"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "text/plain"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "72.229.28.185,110.174.165.78"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": "{{}}"
                },
                {
                  "key": "output",
                  "value": "{{output}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "key": "transfer-encoding",
              "value": "{{transfer-encoding}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "date",
              "value": "{{date}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-apilayer-transaction-id",
              "value": "{{x-apilayer-transaction-id}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-origin",
              "value": "{{access-control-allow-origin}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-methods",
              "value": "{{access-control-allow-methods}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-headers",
              "value": "{{access-control-allow-headers}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-limit",
              "value": "{{x-quota-limit}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-remaining",
              "value": "{{x-quota-remaining}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-increment-usage",
              "value": "{{x-increment-usage}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-request-time",
              "value": "{{x-request-time}}",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "<?xml version=\"1.0\"?>\n<batch>\n    <result index=\"0\">\n        <ip>72.229.28.185</ip>\n        <type>ipv4</type>\n        <continent_code>NA</continent_code>\n        <continent_name>North America</continent_name>\n        <country_code>US</country_code>\n        <country_name>United States</country_name>\n        <region_code>NY</region_code>\n        <region_name>New York</region_name>\n        <city>Manhattan</city>\n        <zip>10020</zip>\n        <latitude>40.7589111328125</latitude>\n        <longitude>-73.97901916503906</longitude>\n        <location>\n            <geoname_id>5125771</geoname_id>\n            <capital>Washington D.C.</capital>\n            <languages>\n                <code>en</code>\n                <name>English</name>\n                <native>English</native>\n            </languages>\n            <country_flag>https://assets.ipstack.com/flags/us.svg</country_flag>\n            <country_flag_emoji>&#x1F1FA;&#x1F1F8;</country_flag_emoji>\n            <country_flag_emoji_unicode>U+1F1FA U+1F1F8</country_flag_emoji_unicode>\n            <calling_code>1</calling_code>\n            <is_eu></is_eu>\n        </location>\n        <time_zone>\n            <id>America/New_York</id>\n            <current_time>2024-02-26 13:23:16-05:00</current_time>\n            <gmt_offset>-18000</gmt_offset>\n            <code>EST</code>\n            <is_daylight_saving></is_daylight_saving>\n        </time_zone>\n        <currency>\n            <code>USD</code>\n            <name>US Dollar</name>\n            <plural>US dollars</plural>\n            <symbol>$</symbol>\n            <symbol_native>$</symbol_native>\n        </currency>\n        <connection>\n            <asn>12271</asn>\n            <isp>Charter Communications Inc</isp>\n        </connection>\n    </result>\n    <result index=\"1\">\n        <ip>110.174.165.78</ip>\n        <type>ipv4</type>\n        <continent_code>OC</continent_code>\n        <continent_name>Oceania</continent_name>\n        <country_code>AU</country_code>\n        <country_name>Australia</country_name>\n        <region_code>NSW</region_code>\n        <region_name>New South Wales</region_name>\n        <city>Sydney</city>\n        <zip>1210</zip>\n        <latitude>-33.87070083618164</latitude>\n        <longitude>151.20680236816406</longitude>\n        <location>\n            <geoname_id>2147714</geoname_id>\n            <capital>Canberra</capital>\n            <languages>\n                <code>en</code>\n                <name>English</name>\n                <native>English</native>\n            </languages>\n            <country_flag>https://assets.ipstack.com/flags/au.svg</country_flag>\n            <country_flag_emoji>&#x1F1E6;&#x1F1FA;</country_flag_emoji>\n            <country_flag_emoji_unicode>U+1F1E6 U+1F1FA</country_flag_emoji_unicode>\n            <calling_code>61</calling_code>\n            <is_eu></is_eu>\n        </location>\n        <time_zone>\n            <id>Australia/Sydney</id>\n            <current_time>2024-02-27 05:23:16+11:00</current_time>\n            <gmt_offset>39600</gmt_offset>\n            <code>AEDT</code>\n            <is_daylight_saving>1</is_daylight_saving>\n        </time_zone>\n        <currency>\n            <code>AUD</code>\n            <name>Australian Dollar</name>\n            <plural>Australian dollars</plural>\n            <symbol>AU$</symbol>\n            <symbol_native>$</symbol_native>\n        </currency>\n        <connection>\n            <asn>7545</asn>\n            <isp>Tpg Telecom Limited</isp>\n        </connection>\n    </result>\n</batch>",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test IPStack-openapi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for 72.229.28.185,110.174.165.78?={{}}&output={{output}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Response body is present\", function () {\n            pm.expect(pm.response.text()).to.not.be.empty;\n        });\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "Response wrapped inside a callback",
      "request": {
        "name": "Response wrapped inside a callback",
        "description": {
          "content": "Specify a JSONP callback \\[Optional\\] function name according to the JSONP Callbacks section.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "134.201.250.155,72.229.28.185,110.174.165.78"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "callback",
              "value": "{{callback}}",
              "description": "Resposne will be wrapped inside this function name"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "text/plain"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "134.201.250.155,72.229.28.185,110.174.165.78"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "callback",
                  "value": "{{callback}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "key": "transfer-encoding",
              "value": "{{transfer-encoding}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "date",
              "value": "{{date}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-apilayer-transaction-id",
              "value": "{{x-apilayer-transaction-id}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-origin",
              "value": "{{access-control-allow-origin}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-methods",
              "value": "{{access-control-allow-methods}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-headers",
              "value": "{{access-control-allow-headers}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-limit",
              "value": "{{x-quota-limit}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-remaining",
              "value": "{{x-quota-remaining}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-increment-usage",
              "value": "{{x-increment-usage}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-request-time",
              "value": "{{x-request-time}}",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "MY_FUNCTION([{\"ip\": \"134.201.250.155\", \"type\": \"ipv4\", \"continent_code\": \"NA\", \"continent_name\": \"North America\", \"country_code\": \"US\", \"country_name\": \"United States\", \"region_code\": \"CA\", \"region_name\": \"California\", \"city\": \"Los Angeles\", \"zip\": \"90012\", \"latitude\": 34.0655517578125, \"longitude\": -118.24053955078125, \"location\": {\"geoname_id\": 5368361, \"capital\": \"Washington D.C.\", \"languages\": [{\"code\": \"en\", \"name\": \"English\", \"native\": \"English\"}], \"country_flag\": \"https://assets.ipstack.com/flags/us.svg\", \"country_flag_emoji\": \"\\ud83c\\uddfa\\ud83c\\uddf8\", \"country_flag_emoji_unicode\": \"U+1F1FA U+1F1F8\", \"calling_code\": \"1\", \"is_eu\": false}, \"time_zone\": {\"id\": \"America/Los_Angeles\", \"current_time\": \"2024-02-26T10:03:58-08:00\", \"gmt_offset\": -28800, \"code\": \"PST\", \"is_daylight_saving\": false}, \"currency\": {\"code\": \"USD\", \"name\": \"US Dollar\", \"plural\": \"US dollars\", \"symbol\": \"$\", \"symbol_native\": \"$\"}, \"connection\": {\"asn\": 25876, \"isp\": \"Los Angeles Department of Water & Power\"}}, {\"ip\": \"72.229.28.185\", \"type\": \"ipv4\", \"continent_code\": \"NA\", \"continent_name\": \"North America\", \"country_code\": \"US\", \"country_name\": \"United States\", \"region_code\": \"NY\", \"region_name\": \"New York\", \"city\": \"Manhattan\", \"zip\": \"10020\", \"latitude\": 40.7589111328125, \"longitude\": -73.97901916503906, \"location\": {\"geoname_id\": 5125771, \"capital\": \"Washington D.C.\", \"languages\": [{\"code\": \"en\", \"name\": \"English\", \"native\": \"English\"}], \"country_flag\": \"https://assets.ipstack.com/flags/us.svg\", \"country_flag_emoji\": \"\\ud83c\\uddfa\\ud83c\\uddf8\", \"country_flag_emoji_unicode\": \"U+1F1FA U+1F1F8\", \"calling_code\": \"1\", \"is_eu\": false}, \"time_zone\": {\"id\": \"America/New_York\", \"current_time\": \"2024-02-26T13:03:58-05:00\", \"gmt_offset\": -18000, \"code\": \"EST\", \"is_daylight_saving\": false}, \"currency\": {\"code\": \"USD\", \"name\": \"US Dollar\", \"plural\": \"US dollars\", \"symbol\": \"$\", \"symbol_native\": \"$\"}, \"connection\": {\"asn\": 12271, \"isp\": \"Charter Communications Inc\"}}, {\"ip\": \"110.174.165.78\", \"type\": \"ipv4\", \"continent_code\": \"OC\", \"continent_name\": \"Oceania\", \"country_code\": \"AU\", \"country_name\": \"Australia\", \"region_code\": \"NSW\", \"region_name\": \"New South Wales\", \"city\": \"Sydney\", \"zip\": \"1210\", \"latitude\": -33.87070083618164, \"longitude\": 151.20680236816406, \"location\": {\"geoname_id\": 2147714, \"capital\": \"Canberra\", \"languages\": [{\"code\": \"en\", \"name\": \"English\", \"native\": \"English\"}], \"country_flag\": \"https://assets.ipstack.com/flags/au.svg\", \"country_flag_emoji\": \"\\ud83c\\udde6\\ud83c\\uddfa\", \"country_flag_emoji_unicode\": \"U+1F1E6 U+1F1FA\", \"calling_code\": \"61\", \"is_eu\": false}, \"time_zone\": {\"id\": \"Australia/Sydney\", \"current_time\": \"2024-02-27T05:03:58+11:00\", \"gmt_offset\": 39600, \"code\": \"AEDT\", \"is_daylight_saving\": true}, \"currency\": {\"code\": \"AUD\", \"name\": \"Australian Dollar\", \"plural\": \"Australian dollars\", \"symbol\": \"AU$\", \"symbol_native\": \"$\"}, \"connection\": {\"asn\": 7545, \"isp\": \"Tpg Telecom Limited\"}}]);",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test IPStack-openapi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for 134.201.250.155,72.229.28.185,110.174.165.78?callback={{callback}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Response body is present\", function () {\n            pm.expect(pm.response.text()).to.not.be.empty;\n        });\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "Basic Requester IP Lookup",
      "request": {
        "name": "Basic Requester IP Lookup",
        "description": {
          "content": "The ipstack API also offers a separate API endpoint capable of detecting the IP address which the current API request is coming from. In order to use this endpoint, simply append `check` to the API's base URL and specify your preferred optional parameters.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "check"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "",
              "value": "{{}}"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "check"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "",
                  "value": "{{}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "key": "transfer-encoding",
              "value": "{{transfer-encoding}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "date",
              "value": "{{date}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-apilayer-transaction-id",
              "value": "{{x-apilayer-transaction-id}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-origin",
              "value": "{{access-control-allow-origin}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-methods",
              "value": "{{access-control-allow-methods}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "access-control-allow-headers",
              "value": "{{access-control-allow-headers}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-limit",
              "value": "{{x-quota-limit}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-quota-remaining",
              "value": "{{x-quota-remaining}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-increment-usage",
              "value": "{{x-increment-usage}}",
              "description": ""
            },
            {
              "disabled": false,
              "key": "x-request-time",
              "value": "{{x-request-time}}",
              "description": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"ip\": \"137.59.240.169\",\n  \"type\": \"ipv4\",\n  \"continent_code\": \"AS\",\n  \"continent_name\": \"Asia\",\n  \"country_code\": \"IN\",\n  \"country_name\": \"India\",\n  \"region_code\": \"DL\",\n  \"region_name\": \"Delhi\",\n  \"city\": \"New Delhi\",\n  \"zip\": \"110001\",\n  \"latitude\": 28.635299682617188,\n  \"longitude\": 77.2249984741211,\n  \"location\": {\n    \"geoname_id\": 1261481,\n    \"capital\": \"New Delhi\",\n    \"languages\": [\n      {\n        \"code\": \"hi\",\n        \"name\": \"Hindi\",\n        \"native\": \"हिन्दी\"\n      },\n      {\n        \"code\": \"en\",\n        \"name\": \"English\",\n        \"native\": \"English\"\n      }\n    ],\n    \"country_flag\": \"https://assets.ipstack.com/flags/in.svg\",\n    \"country_flag_emoji\": \"🇮🇳\",\n    \"country_flag_emoji_unicode\": \"U+1F1EE U+1F1F3\",\n    \"calling_code\": \"91\",\n    \"is_eu\": false\n  },\n  \"time_zone\": {\n    \"id\": \"Asia/Kolkata\",\n    \"current_time\": \"2024-02-26T23:36:15+05:30\",\n    \"gmt_offset\": 19800,\n    \"code\": \"IST\",\n    \"is_daylight_saving\": false\n  },\n  \"currency\": {\n    \"code\": \"INR\",\n    \"name\": \"Indian Rupee\",\n    \"plural\": \"Indian rupees\",\n    \"symbol\": \"Rs\",\n    \"symbol_native\": \"টকা\"\n  },\n  \"connection\": {\n    \"asn\": 133275,\n    \"isp\": \"Gigantic Infotel Pvt Ltd\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test IPStack-openapi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for check?={{}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `ip` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ip`)){\n                if(pm.expect(ld.get(pm.response.json(), `ip`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ip`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`ip length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `ip`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`ip length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `ip`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('ip format to be ipv4',function(){  \n            pm.expect(ld.get(responseData, `ip`, \"\")).to.match(/^(d{1,3}.){3}d{1,3}$/);\n        })\n\n        pm.test('Response has the `type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                if(pm.expect(ld.get(pm.response.json(), `type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`type length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `type`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`type length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `type`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `continent_code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`continent_code`)){\n                if(pm.expect(ld.get(pm.response.json(), `continent_code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `continent_code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`continent_code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `continent_code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`continent_code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `continent_code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `continent_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`continent_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `continent_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `continent_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`continent_name length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `continent_name`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`continent_name length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `continent_name`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `country_code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`country_code`)){\n                if(pm.expect(ld.get(pm.response.json(), `country_code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `country_code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`country_code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `country_code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`country_code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `country_code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `country_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`country_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `country_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `country_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`country_name length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `country_name`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`country_name length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `country_name`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `region_code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`region_code`)){\n                if(pm.expect(ld.get(pm.response.json(), `region_code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `region_code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`region_code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `region_code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`region_code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `region_code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `region_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`region_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `region_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `region_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`region_name length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `region_name`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`region_name length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `region_name`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `city` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`city`)){\n                if(pm.expect(ld.get(pm.response.json(), `city`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `city`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`city length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `city`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`city length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `city`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `zip` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`zip`)){\n                if(pm.expect(ld.get(pm.response.json(), `zip`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `zip`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`zip length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `zip`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`zip length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `zip`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `latitude` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`latitude`)){\n                if(pm.expect(ld.get(responseData, `latitude`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `latitude`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `latitude`, \"\")).to.be.at.most(1028.6352996826172);\n  \n        pm.expect(ld.get(pm.response.json(), `latitude`, \"\")).to.be.at.least(-971.3647003173828);\n\n        pm.test('Response has the `longitude` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`longitude`)){\n                if(pm.expect(ld.get(responseData, `longitude`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `longitude`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `longitude`, \"\")).to.be.at.most(1077.224998474121);\n  \n        pm.expect(ld.get(pm.response.json(), `longitude`, \"\")).to.be.at.least(-922.7750015258789);\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location.geoname_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`location.geoname_id`)){\n                if(pm.expect(ld.get(responseData, `location.geoname_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `location.geoname_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `location.geoname_id`, \"\")).to.be.at.most(2522962);\n\n        pm.test('Response has the `location.capital` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.capital`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.capital`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.capital`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.capital length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.capital`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.capital length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.capital`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `location.languages` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.languages`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.languages`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `location.languages`))).to.equal(true);\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.languages length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `location.languages`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`location.languages length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `location.languages`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`Each object in the location.languages field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`location.languages`);\n            let languagesArray = ld.get(pm.response.json(), `location.languages`, \"\");\n            for (let languages_it = 0; languages_it < languagesArray.length; languages_it++) {\n                let iterator = languages_it;\n                \t\n        pm.test(`${iterator} element of array 'location.languages[${languages_it}].code' has 'code' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `location.languages[${languages_it}].code`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`location.languages[${languages_it}].code`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`location.languages[${languages_it}].code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.languages[${languages_it}].code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'location.languages[${languages_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `location.languages[${languages_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`location.languages[${languages_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`location.languages[${languages_it}].name length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].name`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.languages[${languages_it}].name length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].name`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'location.languages[${languages_it}].native' has 'native' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `location.languages[${languages_it}].native`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`location.languages[${languages_it}].native`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`location.languages[${languages_it}].native length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].native`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.languages[${languages_it}].native length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.languages[${languages_it}].native`, \"\").length).to.be.at.least(0);\n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `location.country_flag` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.country_flag`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.country_flag`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.country_flag`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.country_flag length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.country_flag length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('location.country_flag format to be url',function(){\n            pm.expect(ld.get(responseData, `location.country_flag`, \"\")).to.match(/^(https?|ftp)://[^s/$.?#].[^s]*$/);\n        })\n\n        pm.test('Response has the `location.country_flag_emoji` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.country_flag_emoji`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.country_flag_emoji`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.country_flag_emoji`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.country_flag_emoji length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag_emoji`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.country_flag_emoji length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag_emoji`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `location.country_flag_emoji_unicode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.country_flag_emoji_unicode`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.country_flag_emoji_unicode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.country_flag_emoji_unicode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.country_flag_emoji_unicode length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag_emoji_unicode`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.country_flag_emoji_unicode length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.country_flag_emoji_unicode`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `location.calling_code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.calling_code`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.calling_code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.calling_code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`location.calling_code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `location.calling_code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`location.calling_code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `location.calling_code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `location.is_eu` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location.is_eu`)){\n                if(pm.expect(ld.get(pm.response.json(), `location.is_eu`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location.is_eu`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `time_zone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`time_zone`)){\n                if(pm.expect(ld.get(pm.response.json(), `time_zone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `time_zone`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `time_zone.id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`time_zone.id`)){\n                if(pm.expect(ld.get(pm.response.json(), `time_zone.id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `time_zone.id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`time_zone.id length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.id`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`time_zone.id length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.id`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `time_zone.current_time` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`time_zone.current_time`)){\n                if(pm.expect(ld.get(pm.response.json(), `time_zone.current_time`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `time_zone.current_time`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`time_zone.current_time length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.current_time`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`time_zone.current_time length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.current_time`, \"\").length).to.be.at.least(0);\n        })\n  \n        pm.test('time_zone.current_time format to be date-time',function(){\n            pm.expect(ld.get(responseData, `time_zone.current_time`, \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `time_zone.gmt_offset` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`time_zone.gmt_offset`)){\n                if(pm.expect(ld.get(responseData, `time_zone.gmt_offset`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `time_zone.gmt_offset`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `time_zone.gmt_offset`, \"\")).to.be.at.most(39600);\n\n        pm.test('Response has the `time_zone.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`time_zone.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `time_zone.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `time_zone.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`time_zone.code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`time_zone.code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `time_zone.code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `time_zone.is_daylight_saving` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`time_zone.is_daylight_saving`)){\n                if(pm.expect(ld.get(pm.response.json(), `time_zone.is_daylight_saving`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `time_zone.is_daylight_saving`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currency.code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency.code`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency.code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency.code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`currency.code length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `currency.code`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`currency.code length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `currency.code`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `currency.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`currency.name length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `currency.name`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`currency.name length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `currency.name`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `currency.plural` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency.plural`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency.plural`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency.plural`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`currency.plural length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `currency.plural`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`currency.plural length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `currency.plural`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `currency.symbol` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency.symbol`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency.symbol`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency.symbol`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`currency.symbol length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `currency.symbol`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`currency.symbol length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `currency.symbol`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `currency.symbol_native` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency.symbol_native`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency.symbol_native`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency.symbol_native`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`currency.symbol_native length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `currency.symbol_native`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`currency.symbol_native length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `currency.symbol_native`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test('Response has the `connection` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`connection`)){\n                if(pm.expect(ld.get(pm.response.json(), `connection`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `connection`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `connection.asn` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`connection.asn`)){\n                if(pm.expect(ld.get(responseData, `connection.asn`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `connection.asn`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n  \n        pm.expect(ld.get(pm.response.json(), `connection.asn`, \"\")).to.be.at.most(266550);\n\n        pm.test('Response has the `connection.isp` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`connection.isp`)){\n                if(pm.expect(ld.get(pm.response.json(), `connection.isp`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `connection.isp`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test(`connection.isp length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `connection.isp`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`connection.isp length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `connection.isp`, \"\").length).to.be.at.least(0);\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://api.ipstack.com",
      "key": "baseUrl"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "b0d8da67-5fd1-4551-89c1-f4f30dc2fed3",
    "name": "IPstack",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "## **Quickstart Guide**\n\n<video src=\"https://youtube.com/embed/cjP8lsqc1Y0\" width=\"620\" height=\"310\"></video>\n\n### Step 1: Fork the collection\n\nTo get started quickly, you need to fork the IP Stack Postman Collection. Simply click the button below to fork it.\n\n[<img src=\"https://run.pstmn.io/button.svg\">](https://god.gw.postman.com/run-collection/10131015-55145132-244c-448c-8e6f-8780866e4862?action=collection/fork)\n\n### Step 2: Get your API Access Key\n\n1. Go to the [IP Stack](https://ipstack.com/?utm_source=Postman&utm_medium=Referral) website and choose the right subscription plan for your particular project.\n2. Get your personal API Access Key on the [Dashboard](https://ipstack.com/dashboard) to authenticate with the API. Keep it safe! You can reset it at any time in your Account Dashboard.\n    \n\n## Step 3: Make your first API call\n\nIP Stack Postman collection contains all the three endpoint supported by IP Stack API.\n\n1. Standard IP Lookup\n2. Bulk IP Lookup\n3. Requester Lookup\n    \n\nWe recommend you to start with the Standard IP Lookup endpoint as it's primary endpoint. It is used to look up single IPv4 or IPv6 addresses. To call this endpoint, simply attach any IPv4 or IPv6 address to the API's base URL.\n\nCheck out all the widely used API calls with the necessary parameters in the [Standard IP Lookup folder](https://apilayer.postman.co/workspace/APILayer~2b7498b6-6d91-4fa8-817f-608441fe42a8/folder/10131015-594322f8-abae-4135-80d1-2cf544caa60b?action=share&creator=10131015&ctx=documentation).",
      "type": "text/plain"
    }
  }
}