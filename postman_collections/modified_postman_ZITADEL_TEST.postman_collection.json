{
  "info": {
    "_postman_id": "8a9b32cd-04ce-4138-a422-5aa313bc7f51",
    "name": "ZITADEL with Postman",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "32877280"
  },
  "item": [
    {
      "name": "Add ZITADEL Project",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for management/v1/projects for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{service_user_PAT}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{name_*string}}\",\n    \"projectRoleAssertion\": \"{{projectRoleAssertion_*boolean}}\",\n    \"projectRoleCheck\": \"{{projectRoleCheck_*boolean}}\",\n    \"hasProjectCheck\": \"{{hasProjectCheck_*boolean}}\",\n    \"privateLabelingSetting\": \"{{privateLabelingSetting_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{your_zitadel_domain}}/management/v1/projects",
          "host": [
            "{{your_zitadel_domain}}"
          ],
          "path": [
            "management",
            "v1",
            "projects"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add ZITADEL WebApp - PKCE",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for management/v1/projects/{{project_id}}/apps/oidc for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{service_user_PAT}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{name_*string}}\",\n    \"redirectUris\": [\n        \"{{redirectUris_0_*string}}\"\n    ],\n    \"responseTypes\": [\n        \"{{responseTypes_0_*string}}\"\n    ],\n    \"grantTypes\": [\n        \"{{grantTypes_0_*string}}\"\n    ],\n    \"appType\": \"{{appType_*string}}\",\n    \"authMethodType\": \"{{authMethodType_*string}}\",\n    \"version\": \"{{version_*string}}\",\n    \"devMode\": \"{{devMode_*boolean}}\",\n    \"accessTokenType\": \"{{accessTokenType_*string}}\",\n    \"accessTokenRoleAssertion\": \"{{accessTokenRoleAssertion_*boolean}}\",\n    \"idTokenRoleAssertion\": \"{{idTokenRoleAssertion_*boolean}}\",\n    \"idTokenUserinfoAssertion\": \"{{idTokenUserinfoAssertion_*boolean}}\",\n    \"clockSkew\": \"{{clockSkew_*string}}\",\n    \"skipNativeAppSuccessPage\": \"{{skipNativeAppSuccessPage_*boolean}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{your_zitadel_domain}}/management/v1/projects/{{project_id}}/apps/oidc",
          "host": [
            "{{your_zitadel_domain}}"
          ],
          "path": [
            "management",
            "v1",
            "projects",
            "{{project_id}}",
            "apps",
            "oidc"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add ZITADEL API",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for management/v1/projects/{{project_id}}/apps/api for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{service_user_PAT}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{name_*string}}\",\n    \"authMethodType\": \"{{authMethodType_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{your_zitadel_domain}}/management/v1/projects/{{project_id}}/apps/api",
          "host": [
            "{{your_zitadel_domain}}"
          ],
          "path": [
            "management",
            "v1",
            "projects",
            "{{project_id}}",
            "apps",
            "api"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add ZITADEL User (Human)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for management/v1/users/human/_import for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{service_user_PAT}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userName\": \"{{userName_*string}}\",\n    \"profile\": {\n        \"firstName\": \"{{profile.firstName_*string}}\",\n        \"lastName\": \"{{profile.lastName_*string}}\",\n        \"nickName\": \"{{profile.nickName_*string}}\",\n        \"displayName\": \"{{profile.displayName_*string}}\",\n        \"preferredLanguage\": \"{{profile.preferredLanguage_*string}}\",\n        \"gender\": \"{{profile.gender_*string}}\"\n    },\n    \"email\": {\n        \"email\": \"{{email.email_*string}}\",\n        \"isEmailVerified\": \"{{email.isEmailVerified_*boolean}}\"\n    },\n    \"phone\": {\n        \"phone\": \"{{phone.phone_*string}}\",\n        \"isPhoneVerified\": \"{{phone.isPhoneVerified_*boolean}}\"\n    },\n    \"hashedPassword\": {\n        \"value\": \"{{hashedPassword.value_*string}}\"\n    },\n    \"passwordChangeRequired\": \"{{passwordChangeRequired_*boolean}}\",\n    \"requestPasswordlessRegistration\": \"{{requestPasswordlessRegistration_*boolean}}\",\n    \"otpCode\": \"{{otpCode_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{your_zitadel_domain}}/management/v1/users/human/_import",
          "host": [
            "{{your_zitadel_domain}}"
          ],
          "path": [
            "management",
            "v1",
            "users",
            "human",
            "_import"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login User and Call Userinfo Endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for oidc/v1/userinfo for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "oauth2",
          "oauth2": [
            {
              "key": "clientId",
              "value": "{{web_app_client_id}}",
              "type": "string"
            },
            {
              "key": "tokenName",
              "value": "",
              "type": "string"
            },
            {
              "key": "tokenType",
              "value": "",
              "type": "string"
            },
            {
              "key": "accessToken",
              "value": "",
              "type": "string"
            },
            {
              "key": "tokenRequestParams",
              "value": [],
              "type": "any"
            },
            {
              "key": "authUrl",
              "value": "{{auth_url}}",
              "type": "string"
            },
            {
              "key": "accessTokenUrl",
              "value": "{{token_url}}",
              "type": "string"
            },
            {
              "key": "scope",
              "value": "openid profile email required_scope urn:zitadel:iam:org:project:id:{{project_id}}:aud ",
              "type": "string"
            },
            {
              "key": "headerPrefix",
              "value": "Bearer",
              "type": "string"
            },
            {
              "key": "grant_type",
              "value": "authorization_code_with_pkce",
              "type": "string"
            },
            {
              "key": "code_verifier",
              "value": "pepsicola123",
              "type": "string"
            },
            {
              "key": "addTokenTo",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{your_zitadel_domain}}/oidc/v1/userinfo",
          "host": [
            "{{your_zitadel_domain}}"
          ],
          "path": [
            "oidc",
            "v1",
            "userinfo"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Unprotected API Call",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/simple-get",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "3000",
          "path": [
            "simple-get"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for simple-get for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Protected API Call",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test postman-test using AI Type Azure Open AI and AI Model roostgpt-4-32k\n\n\nTest generated for protected-get for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3000/protected-get",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "3000",
          "path": [
            "protected-get"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "client_id",
      "value": "253xxxxxxxxxx@test"
    },
    {
      "key": "project_id",
      "value": "25xxxxxxxxx981\n",
      "type": "string"
    },
    {
      "key": "auth_url",
      "value": "https://your_domain.zitadel.cloud/oauth/v2/authorize"
    },
    {
      "key": "token_url",
      "value": "token_url"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ]
}