{
  "item": [
    {
      "id": "e2ccf366-31ec-414d-913c-34a20c6af528",
      "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
      "request": {
        "name": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
        "description": {
          "content": "Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "nobelPrizes"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "offset",
              "value": "{{offset}}",
              "description": "The number of items to skip before starting to collect the result set"
            },
            {
              "disabled": false,
              "key": "limit",
              "value": "{{limit}}",
              "description": "The numbers of items to return"
            },
            {
              "disabled": false,
              "key": "sort",
              "value": "{{sort}}",
              "description": "The sort order (result is sorted by year)"
            },
            {
              "disabled": false,
              "key": "nobelPrizeYear",
              "value": "{{nobelPrizeYear}}",
              "description": "Year the Nobel Prize was awarded, in the form of YYYY"
            },
            {
              "disabled": false,
              "key": "yearTo",
              "value": "{{yearTo}}",
              "description": "Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required"
            },
            {
              "disabled": false,
              "key": "nobelPrizeCategory",
              "value": "{{nobelPrizeCategory}}",
              "description": "Nobel Prize category"
            },
            {
              "disabled": false,
              "key": "format",
              "value": "{{format}}",
              "description": "Format of output (Default = json)"
            },
            {
              "disabled": false,
              "key": "csvLang",
              "value": "{{csvLang}}",
              "description": "Language of output if format is csv (Default = en)"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "a0f3c5e7-44da-4ec3-adc9-099715fc1331",
          "name": "Successful call of Nobel Prize(s) according to the filled fields",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"nobelPrizes\": [\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": \"nostrud\",\n              \"href\": \"Excepteur tempor dolor\",\n              \"action\": \"reprehenderit officia laborum voluptate elit\",\n              \"types\": \"occaecat in dolor est\"\n            },\n            {\n              \"rel\": \"Ut sint\",\n              \"href\": \"ea dolore\",\n              \"action\": \"ipsum anim\",\n              \"types\": \"esse tempor consectetur cillum\"\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": \"sint tempor fugiat dolor\",\n              \"href\": \"ut\",\n              \"action\": \"sit anim\",\n              \"types\": \"nisi sint id in enim\"\n            },\n            {\n              \"rel\": \"enim non aute in\",\n              \"href\": \"id ut nostrud exercitation enim\",\n              \"action\": \"in pariatur\",\n              \"types\": \"non ullamco qui\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"awardYear\": 1989,\n      \"category\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"categoryFullName\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"dateAwarded\": \"2015-11-12\",\n      \"prizeAmount\": 1000000,\n      \"prizeAmountAdjusted\": 1000000,\n      \"topMotivation\": {\n        \"en\": \"English\",\n        \"se\": \"Svenska\",\n        \"false\": \"Norsk\"\n      },\n      \"laureates\": [\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": \"enim dolor laborum\",\n              \"href\": \"ea ad sed enim Ut\",\n              \"action\": \"dolore\",\n              \"types\": \"et veniam Duis consectetur\"\n            },\n            {\n              \"rel\": \"in fugiat et\",\n              \"href\": \"ex eiusmo\",\n              \"action\": \"aliquip amet ad deserunt do\",\n              \"types\": \"eiusmod veniam sed aliquip do\"\n            }\n          ]\n        },\n        {\n          \"id\": 34,\n          \"name\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"portion\": \"1\",\n          \"sortOrder\": \"1\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"links\": [\n            {\n              \"rel\": \"aliquip\",\n              \"href\": \"sint veniam et voluptate adipi\",\n              \"action\": \"sunt\",\n              \"types\": \"nisi sint laborum amet\"\n            },\n            {\n              \"rel\": \"eiusmod ut laborum sunt amet\",\n              \"href\": \"cupidatat officia consequat ex\",\n              \"action\": \"eiusmod est\",\n              \"types\": \"cillum et\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"offset\": -49491750,\n    \"limit\": 8659709,\n    \"nobelPrizeYear\": -599783,\n    \"yearTo\": 76355507,\n    \"nobelPrizeCategory\": \"eco\",\n    \"count\": -33322636\n  },\n  \"links\": [\n    {\n      \"first\": \"et Ut nostrud culpa\",\n      \"prev\": \"incididunt Duis sint cupidatat dolore\",\n      \"self\": \"in\",\n      \"next\": \"ex sed tempor ad\",\n      \"last\": \"nisi ad ex nostrud incididunt\"\n    },\n    {\n      \"first\": \"qui ullamco laborum\",\n      \"prev\": \"voluptate laboris pariatur in\",\n      \"self\": \"do est\",\n      \"next\": \"quis consectetur commodo et in\",\n      \"last\": \"cupidatat\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "af81115c-60bc-4f94-a9fd-a0946d0205b9",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7edecc54-84ce-4af2-92ab-885275ba5902",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f7d8f2ca-ac70-4aa0-b873-c00eff030f21",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrizes"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test nobel-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /nobelPrizes?offset=<integer>&limit=<integer>&sort=<string>&nobelPrizeYear=<integer>&yearTo=<integer>&nobelPrizeCategory=<string>&format=<string>&csvLang=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Nobel Prize(s) according to the filled fields\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `nobelPrizes` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrizes`)){\n              if(pm.expect(_.get(responseData[0], `nobelPrizes`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrizes`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `nobelPrizes` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes`)){\n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrizes`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the nobelPrizes field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes`);\n          let nobelPrizesArray = _.get(pm.response.json(), `nobelPrizes`, \"\");\n          for (let nobelPrizes_it = 0; nobelPrizes_it < nobelPrizesArray.length; nobelPrizes_it++) {\n            let iterator = nobelPrizes_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'category' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].category`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category' has 'category' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].category`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].category`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].category.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'categoryFullName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName' has 'categoryFullName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].categoryFullName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'dateAwarded' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].dateAwarded' has 'dateAwarded' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('nobelPrizes[${nobelPrizes_it}].dateAwarded format to be date',function(){\n                pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].dateAwarded\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'topMotivation' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].topMotivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation' has 'topMotivation' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].topMotivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].topMotivation`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].topMotivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].topMotivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].topMotivation.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].topMotivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].topMotivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].topMotivation.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].topMotivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].topMotivation.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].topMotivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].topMotivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].topMotivation.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'laureates' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'laureates' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the nobelPrizes[${nobelPrizes_it}].laureates field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes[${nobelPrizes_it}].laureates`);\n          let laureatesArray = _.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates`, \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; laureates_it++) {\n            let iterator = laureates_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n  \n        pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].id`, \"\")).to.be.at.least(1);\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'name' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name' has 'name' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].name.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'portion' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion' has 'portion' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].portion\", \"\")).to.include.oneOf([\"1\",\"1/2\",\"1/3\",\"1/4\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sortOrder' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder' has 'sortOrder' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].sortOrder\", \"\")).to.include.oneOf([\"1\",\"2\",\"3\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'motivation' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation' has 'motivation' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`);\n          let linksArray = _.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel' has 'rel' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href' has 'href' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action' has 'action' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types' has 'types' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrizes[${nobelPrizes_it}].laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta`)){\n          if(pm.expect(_.get(responseData[0], `meta`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta`)){\n          if(pm.expect(_.get(pm.response.json(), `meta`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.offset` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.offset`)){\n                  if(pm.expect(_.get(responseData[0], `meta.offset`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.offset`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.offset` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.offset`)){\n                if(pm.expect(_.get(responseData, `meta.offset`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.offset`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.limit` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.limit`)){\n                  if(pm.expect(_.get(responseData[0], `meta.limit`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.limit`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.limit` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.limit`)){\n                if(pm.expect(_.get(responseData, `meta.limit`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.limit`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n  \n        pm.expect(_.get(pm.response.json(), `meta.limit`, \"\")).to.be.at.least(1);\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.nobelPrizeYear` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.nobelPrizeYear`)){\n                  if(pm.expect(_.get(responseData[0], `meta.nobelPrizeYear`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.nobelPrizeYear`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.nobelPrizeYear`)){\n                if(pm.expect(_.get(responseData, `meta.nobelPrizeYear`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.nobelPrizeYear`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.yearTo` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.yearTo`)){\n                  if(pm.expect(_.get(responseData[0], `meta.yearTo`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.yearTo`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.yearTo` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.yearTo`)){\n                if(pm.expect(_.get(responseData, `meta.yearTo`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.yearTo`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.nobelPrizeCategory`)){\n          if(pm.expect(_.get(responseData[0], `meta.nobelPrizeCategory`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.nobelPrizeCategory`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.nobelPrizeCategory`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.nobelPrizeCategory`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.nobelPrizeCategory`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.count` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.count`)){\n                  if(pm.expect(_.get(responseData[0], `meta.count`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.count`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.count` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.count`)){\n                if(pm.expect(_.get(responseData, `meta.count`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.count`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`links`)){\n              if(pm.expect(_.get(responseData[0], `links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `links`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`links`)){\n              if(pm.expect(_.get(pm.response.json(), `links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `links`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`links`);\n          let linksArray = _.get(pm.response.json(), `links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'first' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].first`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].first`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].first' has 'first' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].first`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].first`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'prev' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].prev`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].prev`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].prev' has 'prev' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].prev`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].prev`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'self' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].self`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].self`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].self' has 'self' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].self`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].self`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'next' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].next`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].next`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].next' has 'next' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].next`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].next`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'last' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].last`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].last`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].last' has 'last' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].last`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].last`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "ce3a88d6-5534-447b-a055-af72e23e67ab",
      "name": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
      "request": {
        "name": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
        "description": {
          "content": "Obtain information about one specific Nobel Prize. Used as unique identifier for links.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "nobelPrize",
            ":category",
            ":year"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{category}}",
              "key": "category",
              "description": "(Required) Nobel Prize category"
            },
            {
              "disabled": false,
              "type": "any",
              "value": "{{year}}",
              "key": "year",
              "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "d6d55b85-409a-452c-8ed8-bcee7df2f712",
          "name": "Successful call of the Nobel Prize giving the category and year",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"nobelPrize\": {\n    \"awardYear\": 1989,\n    \"category\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"categoryFullName\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"dateAwarded\": \"2015-11-12\",\n    \"prizeAmount\": 1000000,\n    \"prizeAmountAdjusted\": 1000000,\n    \"topMotivation\": {\n      \"en\": \"English\",\n      \"se\": \"Svenska\",\n      \"false\": \"Norsk\"\n    },\n    \"laureates\": [\n      {\n        \"id\": 34,\n        \"name\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"portion\": \"1\",\n        \"sortOrder\": \"1\",\n        \"motivation\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"links\": [\n          {\n            \"rel\": \"cillum ullamco aute\",\n            \"href\": \"dolor nisi enim\",\n            \"action\": \"dolor in\",\n            \"types\": \"dolore do enim minim\"\n          },\n          {\n            \"rel\": \"aliquip fugiat labore\",\n            \"href\": \"ex cillum\",\n            \"action\": \"proident dolore tempor\",\n            \"types\": \"exercit\"\n          }\n        ]\n      },\n      {\n        \"id\": 34,\n        \"name\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"portion\": \"1\",\n        \"sortOrder\": \"1\",\n        \"motivation\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"links\": [\n          {\n            \"rel\": \"consequat enim mollit tempor\",\n            \"href\": \"sed commodo adipisicing qui velit\",\n            \"action\": \"Duis minim\",\n            \"types\": \"do ad nisi qui\"\n          },\n          {\n            \"rel\": \"laborum dolor mollit dolore mi\",\n            \"href\": \"do\",\n            \"action\": \"consequat esse sit ullamco ut\",\n            \"types\": \"incididunt\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "04e87d5d-cf80-4a87-b744-a24ce1038d82",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f2d1d7fe-1e40-49f9-9a4b-01d4cbddbda7",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c22e85c7-a6ae-4d6c-aeda-55a994dbe57a",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "nobelPrize",
                ":category",
                ":year"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{category}}",
                  "key": "category",
                  "description": "(Required) Nobel Prize category"
                },
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{year}}",
                  "key": "year",
                  "description": "(Required) Year of the awarded Nobel Prize, in the form of YYYY"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test nobel-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /nobelPrize/:category/:year for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of the Nobel Prize giving the category and year\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `nobelPrize.awardYear` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.awardYear`)){\n                  if(pm.expect(_.get(responseData[0], `nobelPrize.awardYear`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `nobelPrize.awardYear`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `nobelPrize.awardYear` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`nobelPrize.awardYear`)){\n                if(pm.expect(_.get(responseData, `nobelPrize.awardYear`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `nobelPrize.awardYear`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.category` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.category`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.category`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.category`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.category` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.category`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.category`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.category`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.category.en` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.category.en`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.category.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.category.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.category.en` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.category.en`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.category.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.category.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.category.se` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.category.se`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.category.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.category.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.category.se` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.category.se`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.category.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.category.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.category.false` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.category.false`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.category.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.category.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.category.false` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.category.false`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.category.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.category.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.categoryFullName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.categoryFullName`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.categoryFullName`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.categoryFullName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.categoryFullName`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.categoryFullName`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.categoryFullName.en` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.categoryFullName.en`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.categoryFullName.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.categoryFullName.en` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.categoryFullName.en`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.categoryFullName.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.categoryFullName.se` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.categoryFullName.se`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.categoryFullName.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.categoryFullName.se` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.categoryFullName.se`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.categoryFullName.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.categoryFullName.false` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.categoryFullName.false`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.categoryFullName.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.categoryFullName.false` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.categoryFullName.false`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.categoryFullName.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.dateAwarded` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.dateAwarded`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.dateAwarded`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.dateAwarded` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.dateAwarded`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.dateAwarded`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('nobelPrize.dateAwarded format to be date',function(){\n                pm.expect(_.get(responseData, \"nobelPrize.dateAwarded\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `nobelPrize.prizeAmount` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.prizeAmount`)){\n                  if(pm.expect(_.get(responseData[0], `nobelPrize.prizeAmount`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `nobelPrize.prizeAmount`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `nobelPrize.prizeAmount` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`nobelPrize.prizeAmount`)){\n                if(pm.expect(_.get(responseData, `nobelPrize.prizeAmount`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `nobelPrize.prizeAmount`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `nobelPrize.prizeAmountAdjusted` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.prizeAmountAdjusted`)){\n                  if(pm.expect(_.get(responseData[0], `nobelPrize.prizeAmountAdjusted`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `nobelPrize.prizeAmountAdjusted`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `nobelPrize.prizeAmountAdjusted` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`nobelPrize.prizeAmountAdjusted`)){\n                if(pm.expect(_.get(responseData, `nobelPrize.prizeAmountAdjusted`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `nobelPrize.prizeAmountAdjusted`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.topMotivation` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.topMotivation`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.topMotivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.topMotivation`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.topMotivation` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.topMotivation`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.topMotivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.topMotivation`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.topMotivation.en` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.topMotivation.en`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.topMotivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.topMotivation.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.topMotivation.en` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.topMotivation.en`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.topMotivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.topMotivation.en`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.topMotivation.se` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.topMotivation.se`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.topMotivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.topMotivation.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.topMotivation.se` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.topMotivation.se`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.topMotivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.topMotivation.se`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `nobelPrize.topMotivation.false` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.topMotivation.false`)){\n          if(pm.expect(_.get(responseData[0], `nobelPrize.topMotivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `nobelPrize.topMotivation.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `nobelPrize.topMotivation.false` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.topMotivation.false`)){\n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.topMotivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `nobelPrize.topMotivation.false`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `nobelPrize.laureates` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`nobelPrize.laureates`)){\n              if(pm.expect(_.get(responseData[0], `nobelPrize.laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrize.laureates`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `nobelPrize.laureates` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.laureates`)){\n              if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrize.laureates`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the nobelPrize.laureates field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.laureates`);\n          let laureatesArray = _.get(pm.response.json(), `nobelPrize.laureates`, \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; laureates_it++) {\n            let iterator = laureates_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n  \n        pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].id`, \"\")).to.be.at.least(1);\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'name' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].name`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].name' has 'name' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].name`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].name.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].name.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].name.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].name.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].name.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].name.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].name.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].name.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].name.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'portion' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].portion`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].portion' has 'portion' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].portion`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('nobelPrize.laureates[${laureates_it}].portion to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrize.laureates[${laureates_it}].portion\", \"\")).to.include.oneOf([\"1\",\"1/2\",\"1/3\",\"1/4\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'sortOrder' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].sortOrder' has 'sortOrder' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('nobelPrize.laureates[${laureates_it}].sortOrder to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"nobelPrize.laureates[${laureates_it}].sortOrder\", \"\")).to.include.oneOf([\"1\",\"2\",\"3\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'motivation' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].motivation`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].motivation' has 'motivation' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].motivation`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].motivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].motivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].motivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the nobelPrize.laureates[${laureates_it}].links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`nobelPrize.laureates[${laureates_it}].links`);\n          let linksArray = _.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].links[${links_it}].rel' has 'rel' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].links[${links_it}].href' has 'href' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].links[${links_it}].action' has 'action' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `nobelPrize.laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`nobelPrize.laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'nobelPrize.laureates[${laureates_it}].links[${links_it}].types' has 'types' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `nobelPrize.laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`nobelPrize.laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d563feb7-7285-4d34-8e61-6d1cb22e5926",
      "name": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
      "request": {
        "name": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
        "description": {
          "content": "Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "laureates"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "offset",
              "value": "{{offset}}",
              "description": "The number of items to skip before starting to collect the result set"
            },
            {
              "disabled": false,
              "key": "limit",
              "value": "{{limit}}",
              "description": "The numbers of items to return"
            },
            {
              "disabled": false,
              "key": "sort",
              "value": "{{sort}}",
              "description": "Sort order, result is sorted alphabetically by known name"
            },
            {
              "disabled": false,
              "key": "ID",
              "value": "{{ID}}",
              "description": "Numeric ID of the Laureate (unique key for each Nobel Laureate)"
            },
            {
              "disabled": false,
              "key": "name",
              "value": "{{name}}",
              "description": "Laureate's name (person or organization)"
            },
            {
              "disabled": false,
              "key": "gender",
              "value": "{{gender}}",
              "description": "Laureate's gender if person"
            },
            {
              "disabled": false,
              "key": "motivation",
              "value": "{{motivation}}",
              "description": "Text in Laureate's motivation"
            },
            {
              "disabled": false,
              "key": "affiliation",
              "value": "{{affiliation}}",
              "description": "Affiliation(s) for the Laureate at the time of the award"
            },
            {
              "disabled": false,
              "key": "residence",
              "value": "{{residence}}",
              "description": "Laureate's place of residence at the time is awarded"
            },
            {
              "disabled": false,
              "key": "birthDate",
              "value": "{{birthDate}}",
              "description": "Birth date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "birthDateTo",
              "value": "{{birthDateTo}}",
              "description": "Return Laureates born within a range of years between birthDate and birthDateTo. BirthDate field is required"
            },
            {
              "disabled": false,
              "key": "deathDate",
              "value": "{{deathDate}}",
              "description": "Death date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "deathDateTo",
              "value": "{{deathDateTo}}",
              "description": "Return Laureates deceased within a range of years between deathDate and deathhDateTo. DeathDate field is required"
            },
            {
              "disabled": false,
              "key": "foundedDate",
              "value": "{{foundedDate}}",
              "description": "Founding date of Laureate if Organization. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD"
            },
            {
              "disabled": false,
              "key": "birthCity",
              "value": "{{birthCity}}",
              "description": "Laureate's city of birth if person"
            },
            {
              "disabled": false,
              "key": "birthCountry",
              "value": "{{birthCountry}}",
              "description": "Laureate's country of birth if person"
            },
            {
              "disabled": false,
              "key": "birthContinent",
              "value": "{{birthContinent}}",
              "description": "Laureate's continent of birth if person. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "deathCity",
              "value": "{{deathCity}}",
              "description": "Laureate's city of death if person"
            },
            {
              "disabled": false,
              "key": "deathCountry",
              "value": "{{deathCountry}}",
              "description": "Laureate's country of death if person"
            },
            {
              "disabled": false,
              "key": "deathContinent",
              "value": "{{deathContinent}}",
              "description": "Laureate's continent of death if person. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "foundedCity",
              "value": "{{foundedCity}}",
              "description": "City where organization was founded"
            },
            {
              "disabled": false,
              "key": "foundedCountry",
              "value": "{{foundedCountry}}",
              "description": "Country where organization was founded"
            },
            {
              "disabled": false,
              "key": "foundedContinent",
              "value": "{{foundedContinent}}",
              "description": "Continent where organization was founded. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "HeadquartersCity",
              "value": "{{HeadquartersCity}}",
              "description": "City where organization's hearquarters are"
            },
            {
              "disabled": false,
              "key": "HeadquartersCountry",
              "value": "{{HeadquartersCountry}}",
              "description": "Country where organization's hearquarters are"
            },
            {
              "disabled": false,
              "key": "HeadquartersContinent",
              "value": "{{HeadquartersContinent}}",
              "description": "Continent where organization's hearquarters are. Continent as in geonames.org standard"
            },
            {
              "disabled": false,
              "key": "nobelPrizeYear",
              "value": "{{nobelPrizeYear}}",
              "description": "The year the Nobel Prize was awarded, in the form of YYYY"
            },
            {
              "disabled": false,
              "key": "yearTo",
              "value": "{{yearTo}}",
              "description": "Used in combination with nobelPrizeYear to specify a range of years between nobelPrizeYear and YearTo. nobelPrizeYear is required"
            },
            {
              "disabled": false,
              "key": "nobelPrizeCategory",
              "value": "{{nobelPrizeCategory}}",
              "description": "Nobel Prize category."
            },
            {
              "disabled": false,
              "key": "format",
              "value": "{{format}}",
              "description": "Output format (Default = json)."
            },
            {
              "disabled": false,
              "key": "csvLang",
              "value": "{{csvLang}}",
              "description": "Language if output format is csv (default = en)."
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "70889ab9-9e27-495a-aeee-b0dfa604153c",
          "name": "Successful call of Laureate(s).",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"laureates\": [\n    {\n      \"id\": 456,\n      \"laureateIfPerson\": {\n        \"knownName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"givenName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"familyName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"fullName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"filename\": \"filename\",\n        \"penname\": \"Penname\",\n        \"gender\": \"female\",\n        \"birth\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"death\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        }\n      },\n      \"laureateIfOrg\": {\n        \"orgName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"nativeName\": \"Native name\",\n        \"acronym\": \"Acronym\",\n        \"founded\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"dissolution\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"headquarters\": {\n          \"city\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"country\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"cityNow\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\",\n            \"sameAs\": [\n              \"https://\",\n              \"https://\"\n            ]\n          },\n          \"countryNow\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\",\n            \"sameAs\": [\n              \"https://\",\n              \"https://\"\n            ]\n          },\n          \"continent\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"locationString\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          }\n        }\n      },\n      \"wikipedia\": {\n        \"slug\": \"slug\",\n        \"english\": \"https://en.wikipedia.org/wiki/\"\n      },\n      \"wikidata\": {\n        \"id\": \"id\",\n        \"url\": \"https://www.wikidata.org/wiki/\"\n      },\n      \"sameAs\": [\n        \"https://\",\n        \"https://\"\n      ],\n      \"links\": [\n        {\n          \"rel\": \"eu aliquip sunt Lorem\",\n          \"href\": \"dolo\",\n          \"action\": \"id sed eu\",\n          \"types\": \"aliqua quis in\"\n        },\n        {\n          \"rel\": \"minim sed dolor nisi\",\n          \"href\": \"dolore laboris\",\n          \"action\": \"laborum\",\n          \"types\": \"amet quis\"\n        }\n      ],\n      \"nobelPrizes\": [\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"categoryFullName\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"residences\": [\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"links\": [\n            {\n              \"rel\": \"fug\",\n              \"href\": \"velit ipsum tempor\",\n              \"action\": \"Duis deserunt ut sunt Lorem\",\n              \"types\": \"Ut ullamco anim in fugiat\"\n            },\n            {\n              \"rel\": \"eu c\",\n              \"href\": \"ea\",\n              \"action\": \"ea incididunt\",\n              \"types\": \"Ut\"\n            }\n          ]\n        },\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"categoryFullName\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"residences\": [\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"links\": [\n            {\n              \"rel\": \"velit dolor culpa\",\n              \"href\": \"non elit Lorem\",\n              \"action\": \"q\",\n              \"types\": \"sunt ex\"\n            },\n            {\n              \"rel\": \"eu dolor\",\n              \"href\": \"Ut anim consequat do\",\n              \"action\": \"quis\",\n              \"types\": \"sint ut consectetur\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": 456,\n      \"laureateIfPerson\": {\n        \"knownName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"givenName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"familyName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"fullName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"filename\": \"filename\",\n        \"penname\": \"Penname\",\n        \"gender\": \"female\",\n        \"birth\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"death\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        }\n      },\n      \"laureateIfOrg\": {\n        \"orgName\": {\n          \"en\": \"English\",\n          \"se\": \"Svenska\",\n          \"false\": \"Norsk\"\n        },\n        \"nativeName\": \"Native name\",\n        \"acronym\": \"Acronym\",\n        \"founded\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"dissolution\": {\n          \"date\": \"1989-04-25\",\n          \"place\": {\n            \"city\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"country\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"cityNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"countryNow\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\",\n              \"sameAs\": [\n                \"https://\",\n                \"https://\"\n              ]\n            },\n            \"continent\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            },\n            \"locationString\": {\n              \"en\": \"English\",\n              \"se\": \"Svenska\",\n              \"false\": \"Norsk\"\n            }\n          }\n        },\n        \"headquarters\": {\n          \"city\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"country\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"cityNow\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\",\n            \"sameAs\": [\n              \"https://\",\n              \"https://\"\n            ]\n          },\n          \"countryNow\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\",\n            \"sameAs\": [\n              \"https://\",\n              \"https://\"\n            ]\n          },\n          \"continent\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"locationString\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          }\n        }\n      },\n      \"wikipedia\": {\n        \"slug\": \"slug\",\n        \"english\": \"https://en.wikipedia.org/wiki/\"\n      },\n      \"wikidata\": {\n        \"id\": \"id\",\n        \"url\": \"https://www.wikidata.org/wiki/\"\n      },\n      \"sameAs\": [\n        \"https://\",\n        \"https://\"\n      ],\n      \"links\": [\n        {\n          \"rel\": \"esse\",\n          \"href\": \"ut\",\n          \"action\": \"minim dolor\",\n          \"types\": \"nulla sunt do\"\n        },\n        {\n          \"rel\": \"Lorem enim veniam s\",\n          \"href\": \"Excepteur veniam nostrud\",\n          \"action\": \"qui nulla\",\n          \"types\": \"id\"\n        }\n      ],\n      \"nobelPrizes\": [\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"categoryFullName\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"residences\": [\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"links\": [\n            {\n              \"rel\": \"est elit\",\n              \"href\": \"\",\n              \"action\": \"culpa ad elit eu\",\n              \"types\": \"Excepteur in nostrud est\"\n            },\n            {\n              \"rel\": \"labore sed cu\",\n              \"href\": \"aliquip cupidatat id\",\n              \"action\": \"aute culpa laboris\",\n              \"types\": \"exercitation esse mollit\"\n            }\n          ]\n        },\n        {\n          \"awardYear\": 1989,\n          \"category\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"categoryFullName\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"sortOrder\": \"1\",\n          \"portion\": \"1\",\n          \"dateAwarded\": \"1989-04-25\",\n          \"prizeStatus\": \"received\",\n          \"motivation\": {\n            \"en\": \"English\",\n            \"se\": \"Svenska\",\n            \"false\": \"Norsk\"\n          },\n          \"prizeAmount\": 1000000,\n          \"prizeAmountAdjusted\": 1000000,\n          \"affiliations\": [\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"name\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nameNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"nativeName\": \"Le romenic universitet\",\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"residences\": [\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            },\n            {\n              \"city\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"country\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              },\n              \"cityNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"countryNow\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\",\n                \"sameAs\": [\n                  \"https://\",\n                  \"https://\"\n                ]\n              },\n              \"locationString\": {\n                \"en\": \"English\",\n                \"se\": \"Svenska\",\n                \"false\": \"Norsk\"\n              }\n            }\n          ],\n          \"links\": [\n            {\n              \"rel\": \"ad sit\",\n              \"href\": \"ut\",\n              \"action\": \"est proident\",\n              \"types\": \"proident adipisicing tempor velit\"\n            },\n            {\n              \"rel\": \"ea ut incididunt\",\n              \"href\": \"eu voluptate aliquip et\",\n              \"action\": \"aute adipisicing do cillum\",\n              \"types\": \"ad irure est officia mollit\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"meta\": {\n    \"offset\": -36283167,\n    \"limit\": -54875880,\n    \"sort\": \"Duis\",\n    \"ID\": 44852524,\n    \"name\": \"esse id quis est laborum\",\n    \"gender\": \"Dui\",\n    \"motivation\": \"in\",\n    \"affiliation\": \"elit\",\n    \"residence\": \"nisi cupidatat amet incididunt\",\n    \"birthDate\": \"sed in\",\n    \"birthDateTo\": \"aliquip magna officia amet esse\",\n    \"deathDate\": \"ullamco nisi pariatur et\",\n    \"deathDateTo\": \"dolor velit nos\",\n    \"foundedDate\": \"incididunt adipisicing\",\n    \"birthCity\": \"aute sit\",\n    \"birthCountry\": \"eiusmod\",\n    \"birthContinent\": \"tempor consequat do\",\n    \"deathCity\": \"incididunt sit ea minim proident\",\n    \"deathCountry\": \"ut irure pariatur in\",\n    \"deathContinent\": \"cillum in\",\n    \"foundedCity\": \"ex irure\",\n    \"foundedCountry\": \"enim nulla\",\n    \"foundedContinent\": \"tempor sunt\",\n    \"headquartersCity\": \"culpa commodo minim\",\n    \"headquartersCountry\": \"irure aliquip Excepteur ut\",\n    \"headquartersContinent\": \"occaecat nulla\",\n    \"nobelPrizeYear\": -89134953,\n    \"yearTo\": 34131322,\n    \"nobelPrizeCategory\": \"ullamco id Ut culpa ex\",\n    \"count\": 53629673\n  },\n  \"links\": [\n    {\n      \"first\": \"consectetur nulla cupidatat dolor voluptate\",\n      \"prev\": \"ut\",\n      \"self\": \"laboris in\",\n      \"next\": \"ea consectetur nulla pariatur deserunt\",\n      \"last\": \"adi\"\n    },\n    {\n      \"first\": \"reprehenderit\",\n      \"prev\": \"Ut\",\n      \"self\": \"Duis\",\n      \"next\": \"in anim\",\n      \"last\": \"deserunt consectetur quis enim\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a678aa09-6b12-43ec-84ed-11bd02d62ad8",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ce22b0fe-cb95-43c7-9f79-3b4459612eba",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9b7264ef-98e5-415d-9ac5-5c5351541ab0",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "laureates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "{{offset}}"
                },
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "sort",
                  "value": "{{sort}}"
                },
                {
                  "key": "ID",
                  "value": "{{ID}}"
                },
                {
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "key": "gender",
                  "value": "{{gender}}"
                },
                {
                  "key": "motivation",
                  "value": "{{motivation}}"
                },
                {
                  "key": "affiliation",
                  "value": "{{affiliation}}"
                },
                {
                  "key": "residence",
                  "value": "{{residence}}"
                },
                {
                  "key": "birthDate",
                  "value": "{{birthDate}}"
                },
                {
                  "key": "birthDateTo",
                  "value": "{{birthDateTo}}"
                },
                {
                  "key": "deathDate",
                  "value": "{{deathDate}}"
                },
                {
                  "key": "deathDateTo",
                  "value": "{{deathDateTo}}"
                },
                {
                  "key": "foundedDate",
                  "value": "{{foundedDate}}"
                },
                {
                  "key": "birthCity",
                  "value": "{{birthCity}}"
                },
                {
                  "key": "birthCountry",
                  "value": "{{birthCountry}}"
                },
                {
                  "key": "birthContinent",
                  "value": "{{birthContinent}}"
                },
                {
                  "key": "deathCity",
                  "value": "{{deathCity}}"
                },
                {
                  "key": "deathCountry",
                  "value": "{{deathCountry}}"
                },
                {
                  "key": "deathContinent",
                  "value": "{{deathContinent}}"
                },
                {
                  "key": "foundedCity",
                  "value": "{{foundedCity}}"
                },
                {
                  "key": "foundedCountry",
                  "value": "{{foundedCountry}}"
                },
                {
                  "key": "foundedContinent",
                  "value": "{{foundedContinent}}"
                },
                {
                  "key": "HeadquartersCity",
                  "value": "{{HeadquartersCity}}"
                },
                {
                  "key": "HeadquartersCountry",
                  "value": "{{HeadquartersCountry}}"
                },
                {
                  "key": "HeadquartersContinent",
                  "value": "{{HeadquartersContinent}}"
                },
                {
                  "key": "nobelPrizeYear",
                  "value": "{{nobelPrizeYear}}"
                },
                {
                  "key": "yearTo",
                  "value": "{{yearTo}}"
                },
                {
                  "key": "nobelPrizeCategory",
                  "value": "{{nobelPrizeCategory}}"
                },
                {
                  "key": "format",
                  "value": "{{format}}"
                },
                {
                  "key": "csvLang",
                  "value": "{{csvLang}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test nobel-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /laureates?offset=<integer>&limit=<integer>&sort=<string>&ID=<integer>&name=<string>&gender=<string>&motivation=<string>&affiliation=<string>&residence=<string>&birthDate=<date>&birthDateTo=<date>&deathDate=<date>&deathDateTo=<date>&foundedDate=<date>&birthCity=<utf-8>&birthCountry=<utf-8>&birthContinent=<string>&deathCity=<utf-8>&deathCountry=<utf-8>&deathContinent=<string>&foundedCity=<utf-8>&foundedCountry=<utf-8>&foundedContinent=<string>&HeadquartersCity=<utf-8>&HeadquartersCountry=<utf-8>&HeadquartersContinent=<string>&nobelPrizeYear=<integer>&yearTo=<integer>&nobelPrizeCategory=<string>&format=<string>&csvLang=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Laureate(s).\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `laureates` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`laureates`)){\n              if(pm.expect(_.get(responseData[0], `laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `laureates` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`laureates`)){\n              if(pm.expect(_.get(pm.response.json(), `laureates`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the laureates field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates`);\n          let laureatesArray = _.get(pm.response.json(), `laureates`, \"\");\n          for (let laureates_it = 0; laureates_it < laureatesArray.length; laureates_it++) {\n            let iterator = laureates_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'laureatesArray'has 'id' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].id`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].id`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n  \n        pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].id`, \"\")).to.be.at.least(1);\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'laureateIfPerson' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson' has 'laureateIfPerson' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'knownName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.knownName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.knownName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.knownName' has 'knownName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.knownName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.knownName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.knownName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.knownName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.knownName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.knownName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.knownName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.knownName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.knownName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.knownName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.knownName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.knownName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.knownName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.knownName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.knownName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.knownName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.knownName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'givenName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.givenName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.givenName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.givenName' has 'givenName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.givenName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.givenName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.givenName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.givenName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.givenName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.givenName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.givenName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.givenName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.givenName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.givenName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.givenName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.givenName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.givenName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.givenName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.givenName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.givenName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.givenName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'familyName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.familyName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.familyName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.familyName' has 'familyName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.familyName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.familyName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.familyName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.familyName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.familyName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.familyName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.familyName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.familyName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.familyName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.familyName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.familyName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.familyName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.familyName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.familyName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.familyName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.familyName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.familyName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'fullName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.fullName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.fullName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.fullName' has 'fullName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.fullName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.fullName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.fullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.fullName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.fullName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.fullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.fullName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.fullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.fullName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.fullName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.fullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.fullName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.fullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.fullName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.fullName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.fullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.fullName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.filename`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.filename`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.filename`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.filename`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'penname' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.penname`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.penname`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.penname' has 'penname' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.penname`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.penname`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'gender' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.gender`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.gender`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.gender' has 'gender' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.gender`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.gender`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('laureates[${laureates_it}].laureateIfPerson.gender to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"laureates[${laureates_it}].laureateIfPerson.gender\", \"\")).to.include.oneOf([\"female\",\"male\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'birth' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.birth`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.birth`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.birth' has 'birth' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.birth`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.birth`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.birth.date`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.birth.date`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.birth.date' has 'date' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.birth.date`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.birth.date`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('laureates[${laureates_it}].laureateIfPerson.birth.date format to be date',function(){\n                pm.expect(_.get(responseData, \"laureates[${laureates_it}].laureateIfPerson.birth.date\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.birth.place`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.birth.place`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.birth.place' has 'place' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.birth.place`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.birth.place`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'death' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.death`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.death`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.death' has 'death' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.death`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.death`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.death.date`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.death.date`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.death.date' has 'date' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.death.date`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.death.date`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('laureates[${laureates_it}].laureateIfPerson.death.date format to be date',function(){\n                pm.expect(_.get(responseData, \"laureates[${laureates_it}].laureateIfPerson.death.date\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfPerson.death.place`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfPerson.death.place`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfPerson.death.place' has 'place' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfPerson.death.place`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfPerson.death.place`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'laureateIfOrg' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg' has 'laureateIfOrg' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'orgName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.orgName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.orgName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.orgName' has 'orgName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.orgName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.orgName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.orgName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.orgName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.orgName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.orgName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.orgName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.orgName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.orgName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.orgName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.orgName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.orgName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.orgName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.orgName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.orgName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.orgName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.orgName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'nativeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.nativeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.nativeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.nativeName' has 'nativeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.nativeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.nativeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'acronym' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.acronym`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.acronym`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.acronym' has 'acronym' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.acronym`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.acronym`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'founded' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.founded`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.founded`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.founded' has 'founded' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.founded`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.founded`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.founded.date`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.founded.date`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.founded.date' has 'date' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.founded.date`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.founded.date`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('laureates[${laureates_it}].laureateIfOrg.founded.date format to be date',function(){\n                pm.expect(_.get(responseData, \"laureates[${laureates_it}].laureateIfOrg.founded.date\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.founded.place`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.founded.place`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.founded.place' has 'place' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.founded.place`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.founded.place`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'dissolution' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.dissolution`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.dissolution`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.dissolution' has 'dissolution' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.dissolution`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.dissolution`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'date' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.dissolution.date`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.dissolution.date`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.dissolution.date' has 'date' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.dissolution.date`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.dissolution.date`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('laureates[${laureates_it}].laureateIfOrg.dissolution.date format to be date',function(){\n                pm.expect(_.get(responseData, \"laureates[${laureates_it}].laureateIfOrg.dissolution.date\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'place' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.dissolution.place`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.dissolution.place`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.dissolution.place' has 'place' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.dissolution.place`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.dissolution.place`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'headquarters' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters' has 'headquarters' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'city' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.city`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.city`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.city' has 'city' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.city`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.city`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'country' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.country`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.country`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.country' has 'country' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.country`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.country`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'cityNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.cityNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.cityNow' has 'cityNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.cityNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'countryNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.countryNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.countryNow' has 'countryNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.countryNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'continent' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.continent`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.continent`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.continent' has 'continent' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.continent`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.continent`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'locationString' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].laureateIfOrg.headquarters.locationString`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].laureateIfOrg.headquarters.locationString`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].laureateIfOrg.headquarters.locationString' has 'locationString' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].laureateIfOrg.headquarters.locationString`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].laureateIfOrg.headquarters.locationString`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'wikipedia' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikipedia`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikipedia`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikipedia' has 'wikipedia' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikipedia`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikipedia`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'slug' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikipedia.slug`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikipedia.slug`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikipedia.slug' has 'slug' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikipedia.slug`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikipedia.slug`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'english' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikipedia.english`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikipedia.english`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikipedia.english' has 'english' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikipedia.english`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikipedia.english`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'wikidata' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikidata`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikidata`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikidata' has 'wikidata' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikidata`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikidata`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikidata.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikidata.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikidata.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikidata.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikidata.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'laureatesArray' has 'url' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].wikidata.url`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].wikidata.url`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].wikidata.url' has 'url' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].wikidata.url`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].wikidata.url`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].sameAs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].sameAs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].links`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the laureates[${laureates_it}].links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates[${laureates_it}].links`);\n          let linksArray = _.get(pm.response.json(), `laureates[${laureates_it}].links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].links[${links_it}].rel' has 'rel' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].links[${links_it}].href' has 'href' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].links[${links_it}].action' has 'action' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].links[${links_it}].types' has 'types' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'nobelPrizes' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'laureatesArray' has 'nobelPrizes' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the laureates[${laureates_it}].nobelPrizes field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates[${laureates_it}].nobelPrizes`);\n          let nobelPrizesArray = _.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes`, \"\");\n          for (let nobelPrizes_it = 0; nobelPrizes_it < nobelPrizesArray.length; nobelPrizes_it++) {\n            let iterator = nobelPrizes_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'awardYear' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].awardYear`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'category' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category' has 'category' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].category.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'categoryFullName' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName' has 'categoryFullName' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].categoryFullName.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'sortOrder' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder' has 'sortOrder' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].sortOrder\", \"\")).to.include.oneOf([\"1\",\"2\",\"3\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'portion' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion' has 'portion' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].portion\", \"\")).to.include.oneOf([\"1\",\"1/2\",\"1/3\",\"1/4\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'dateAwarded' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded' has 'dateAwarded' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded format to be date',function(){\n                pm.expect(_.get(responseData, \"laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].dateAwarded\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'prizeStatus' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus' has 'prizeStatus' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeStatus\", \"\")).to.include.oneOf([\"received\",\"declined\",\"restricted\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'motivation' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation' has 'motivation' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'nobelPrizesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].motivation.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmount' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmount`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'nobelPrizesArray'has 'prizeAmountAdjusted' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].prizeAmountAdjusted`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'affiliations' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'affiliations' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`);\n          let affiliationsArray = _.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations`, \"\");\n          for (let affiliations_it = 0; affiliations_it < affiliationsArray.length; affiliations_it++) {\n            let iterator = affiliations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'name' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name' has 'name' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].name.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'nameNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow' has 'nameNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nameNow.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'nativeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nativeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nativeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nativeName' has 'nativeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nativeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].nativeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'city' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city' has 'city' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].city.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'country' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country' has 'country' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].country.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'cityNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow' has 'cityNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.sameAs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].cityNow.sameAs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'countryNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow' has 'countryNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.sameAs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'affiliationsArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].countryNow.sameAs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'locationString' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString' has 'locationString' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'affiliationsArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].affiliations[${affiliations_it}].locationString.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'residences' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'residences' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`);\n          let residencesArray = _.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences`, \"\");\n          for (let residences_it = 0; residences_it < residencesArray.length; residences_it++) {\n            let iterator = residences_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'city' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city' has 'city' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].city.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'country' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country' has 'country' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].country.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'cityNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow' has 'cityNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.sameAs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].cityNow.sameAs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'countryNow' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow' has 'countryNow' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.sameAs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'residencesArray' has 'sameAs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.sameAs`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].countryNow.sameAs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'locationString' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString' has 'locationString' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'en' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.en`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.en`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.en' has 'en' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.en`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.en`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'se' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.se`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.se`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.se' has 'se' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.se`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.se`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'residencesArray' has 'false' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.false`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.false`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.false' has 'false' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.false`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].residences[${residences_it}].locationString.false`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'nobelPrizesArray' has 'links' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`);\n          let linksArray = _.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'rel' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].rel' has 'rel' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].rel`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].rel`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'href' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].href' has 'href' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].href`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].href`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'action' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].action' has 'action' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].action`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].action`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'types' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].types' has 'types' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].types`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`laureates[${laureates_it}].nobelPrizes[${nobelPrizes_it}].links[${links_it}].types`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta`)){\n          if(pm.expect(_.get(responseData[0], `meta`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta`)){\n          if(pm.expect(_.get(pm.response.json(), `meta`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.offset` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.offset`)){\n                  if(pm.expect(_.get(responseData[0], `meta.offset`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.offset`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.offset` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.offset`)){\n                if(pm.expect(_.get(responseData, `meta.offset`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.offset`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.limit` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.limit`)){\n                  if(pm.expect(_.get(responseData[0], `meta.limit`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.limit`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.limit` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.limit`)){\n                if(pm.expect(_.get(responseData, `meta.limit`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.limit`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.sort` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.sort`)){\n          if(pm.expect(_.get(responseData[0], `meta.sort`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.sort`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.sort` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.sort`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.sort`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.sort`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.ID` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.ID`)){\n                  if(pm.expect(_.get(responseData[0], `meta.ID`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.ID`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.ID` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.ID`)){\n                if(pm.expect(_.get(responseData, `meta.ID`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.ID`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.name`)){\n          if(pm.expect(_.get(responseData[0], `meta.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.name`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.gender` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.gender`)){\n          if(pm.expect(_.get(responseData[0], `meta.gender`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.gender`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.gender` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.gender`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.gender`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.gender`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.motivation` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.motivation`)){\n          if(pm.expect(_.get(responseData[0], `meta.motivation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.motivation`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.motivation` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.motivation`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.motivation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.motivation`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.affiliation` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.affiliation`)){\n          if(pm.expect(_.get(responseData[0], `meta.affiliation`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.affiliation`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.affiliation` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.affiliation`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.affiliation`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.affiliation`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.residence` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.residence`)){\n          if(pm.expect(_.get(responseData[0], `meta.residence`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.residence`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.residence` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.residence`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.residence`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.residence`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.birthDate`)){\n          if(pm.expect(_.get(responseData[0], `meta.birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.birthDateTo` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.birthDateTo`)){\n          if(pm.expect(_.get(responseData[0], `meta.birthDateTo`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.birthDateTo`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.birthDateTo` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.birthDateTo`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.birthDateTo`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.birthDateTo`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.deathDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.deathDate`)){\n          if(pm.expect(_.get(responseData[0], `meta.deathDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.deathDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.deathDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.deathDate`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.deathDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.deathDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.deathDateTo` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.deathDateTo`)){\n          if(pm.expect(_.get(responseData[0], `meta.deathDateTo`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.deathDateTo`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.deathDateTo` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.deathDateTo`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.deathDateTo`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.deathDateTo`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.foundedDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.foundedDate`)){\n          if(pm.expect(_.get(responseData[0], `meta.foundedDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.foundedDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.foundedDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.foundedDate`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.foundedDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.foundedDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.birthCity` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.birthCity`)){\n          if(pm.expect(_.get(responseData[0], `meta.birthCity`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.birthCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.birthCity` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.birthCity`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.birthCity`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.birthCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.birthCountry` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.birthCountry`)){\n          if(pm.expect(_.get(responseData[0], `meta.birthCountry`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.birthCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.birthCountry` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.birthCountry`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.birthCountry`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.birthCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.birthContinent` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.birthContinent`)){\n          if(pm.expect(_.get(responseData[0], `meta.birthContinent`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.birthContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.birthContinent` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.birthContinent`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.birthContinent`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.birthContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.deathCity` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.deathCity`)){\n          if(pm.expect(_.get(responseData[0], `meta.deathCity`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.deathCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.deathCity` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.deathCity`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.deathCity`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.deathCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.deathCountry` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.deathCountry`)){\n          if(pm.expect(_.get(responseData[0], `meta.deathCountry`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.deathCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.deathCountry` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.deathCountry`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.deathCountry`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.deathCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.deathContinent` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.deathContinent`)){\n          if(pm.expect(_.get(responseData[0], `meta.deathContinent`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.deathContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.deathContinent` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.deathContinent`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.deathContinent`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.deathContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.foundedCity` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.foundedCity`)){\n          if(pm.expect(_.get(responseData[0], `meta.foundedCity`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.foundedCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.foundedCity` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.foundedCity`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.foundedCity`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.foundedCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.foundedCountry` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.foundedCountry`)){\n          if(pm.expect(_.get(responseData[0], `meta.foundedCountry`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.foundedCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.foundedCountry` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.foundedCountry`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.foundedCountry`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.foundedCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.foundedContinent` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.foundedContinent`)){\n          if(pm.expect(_.get(responseData[0], `meta.foundedContinent`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.foundedContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.foundedContinent` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.foundedContinent`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.foundedContinent`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.foundedContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.headquartersCity` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.headquartersCity`)){\n          if(pm.expect(_.get(responseData[0], `meta.headquartersCity`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.headquartersCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.headquartersCity` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.headquartersCity`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.headquartersCity`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.headquartersCity`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.headquartersCountry` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.headquartersCountry`)){\n          if(pm.expect(_.get(responseData[0], `meta.headquartersCountry`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.headquartersCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.headquartersCountry` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.headquartersCountry`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.headquartersCountry`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.headquartersCountry`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.headquartersContinent` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.headquartersContinent`)){\n          if(pm.expect(_.get(responseData[0], `meta.headquartersContinent`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.headquartersContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.headquartersContinent` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.headquartersContinent`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.headquartersContinent`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.headquartersContinent`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.nobelPrizeYear` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.nobelPrizeYear`)){\n                  if(pm.expect(_.get(responseData[0], `meta.nobelPrizeYear`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.nobelPrizeYear`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.nobelPrizeYear` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.nobelPrizeYear`)){\n                if(pm.expect(_.get(responseData, `meta.nobelPrizeYear`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.nobelPrizeYear`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.yearTo` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.yearTo`)){\n                  if(pm.expect(_.get(responseData[0], `meta.yearTo`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.yearTo`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.yearTo` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.yearTo`)){\n                if(pm.expect(_.get(responseData, `meta.yearTo`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.yearTo`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`meta.nobelPrizeCategory`)){\n          if(pm.expect(_.get(responseData[0], `meta.nobelPrizeCategory`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `meta.nobelPrizeCategory`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `meta.nobelPrizeCategory` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`meta.nobelPrizeCategory`)){\n          if(pm.expect(_.get(pm.response.json(), `meta.nobelPrizeCategory`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `meta.nobelPrizeCategory`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `meta.count` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`meta.count`)){\n                  if(pm.expect(_.get(responseData[0], `meta.count`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `meta.count`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `meta.count` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`meta.count`)){\n                if(pm.expect(_.get(responseData, `meta.count`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `meta.count`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`links`)){\n              if(pm.expect(_.get(responseData[0], `links`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `links`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `links` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`links`)){\n              if(pm.expect(_.get(pm.response.json(), `links`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `links`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the links field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`links`);\n          let linksArray = _.get(pm.response.json(), `links`, \"\");\n          for (let links_it = 0; links_it < linksArray.length; links_it++) {\n            let iterator = links_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'first' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].first`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].first`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].first' has 'first' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].first`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].first`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'prev' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].prev`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].prev`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].prev' has 'prev' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].prev`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].prev`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'self' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].self`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].self`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].self' has 'self' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].self`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].self`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'next' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].next`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].next`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].next' has 'next' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].next`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].next`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'linksArray' has 'last' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `links[${links_it}].last`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`links[${links_it}].last`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'links[${links_it}].last' has 'last' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `links[${links_it}].last`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`links[${links_it}].last`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "05bf81d1-1104-4b5d-8e24-ffdd351c983f",
      "name": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
      "request": {
        "name": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
        "description": {
          "content": "Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "laureate",
            ":laureateID"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{laureateID}}",
              "key": "laureateID",
              "description": "(Required) Numeric Laureate's ID. Unique key."
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "c381fe96-f79a-4aaa-bbe3-0819d0e83e55",
          "name": "Successful call of Laureate given the ID",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "87dc7e33-0584-4392-b1c8-114b1a7203ad",
          "name": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7ba5a439-9951-4ada-bac7-d122c36f2e1c",
          "name": "Not Found. The requested resource could not be found but may be available again in the future.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d293ea31-625f-4c15-bd46-4883033d8860",
          "name": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.",
          "originalRequest": {
            "url": {
              "path": [
                "laureate",
                ":laureateID"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{laureateID}}",
                  "key": "laureateID",
                  "description": "(Required) Numeric Laureate's ID. Unique key."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
          "code": 422,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"code\": \"404\",\n  \"message\": \"There is not Laureate born that date\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test nobel-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /laureate/:laureateID for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful call of Laureate given the ID\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad request.The request could not be understood by the server due to malformed syntax, modifications needed.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found. The requested resource could not be found but may be available again in the future.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://api.nobelprize.org/2.1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "4e423ea9-4987-457b-b654-1d98fb679e88",
    "name": "Nobel Prize Master Data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Information about the Nobel Prizes and the Nobel Prize Laureates",
      "type": "text/plain"
    }
  }
}