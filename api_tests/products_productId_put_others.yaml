# Test generated by RoostGPT for test products-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k


# RoostTestHash=7b2a6b6959

config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  variables:
    authKeys:
      - "{{$processEnvironment.AUTH_TOKEN}}"
  payload:
    path: "products_productId_put_others.csv"
    skipHeader: true
    fields:
      - "id"
      - "name"
      - "description"
      - "price"
scenarios:
  - flow:
      - log: "Invalid product request - updating a non-existent product"
        put:
          url: "/products/99999999999999999" 
          headers:
            Content-Type: "application/json"
            SECURITY_SCHEMA: "{{ authKeys[0] }}"
          json:
            id: "{{ id }}"
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - statusCode: 404
            # Expect a 404 Not Found as the product does not exist.
            # Also, verify that the error detail is present in the body and is not empty
            - hasProperty: "errorDetails"
      - think: 1
      
      - log: "Invalid product request - sending null values"
        put:
          url: "/products/1"
          headers:
            Content-Type: "application/json"
            SECURITY_SCHEMA: "{{ authKeys[0] }}"
          json:
            id: "{{ id }}"
            name: null
            description: null
            price: null
          expect:
            - statusCode: 400
            # Expect a 400 Bad Request as we are sending null values
            # Also, verify that the error detail is present in the body and is not empty
            - hasProperty: "errorDetails"
      - think: 1

      - log: "Invalid URL - will result in a 404 error"
        put:
          url: "/productss/1"
          headers:
            Content-Type: "application/json"
            SECURITY_SCHEMA: "{{ authKeys[0] }}"
          json:
            id: "{{ id }}"
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - statusCode: 404
            # Expect a 404 Not Found as the URL is incorrect
            # Also, verify that the error detail is present in the body and is not empty
            - hasProperty: "errorDetails"
